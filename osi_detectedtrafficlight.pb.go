// Code generated by protoc-gen-go. DO NOT EDIT.
// source: osi_detectedtrafficlight.proto

package osi3

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

//
// \brief A traffic light in the environment as detected by the sensor.
//
// \image html OSI_DetectedTrafficLight.jpg
//
type DetectedTrafficLight struct {
	// Common information of one detected item.
	//
	Header *DetectedItemHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The base parameters of the traffic light.
	//
	// \c BaseStationary::orientation x-axis is view normal of the traffic
	// light's icon.
	//
	Base *BaseStationary `protobuf:"bytes,2,opt,name=base,proto3" json:"base,omitempty"`
	// The root mean squared error of the base parameters of the detected
	// traffic light's geometry. \c TrafficLight::base has to be identical
	// for all \c #candidate traffic lights.
	//
	BaseRmse *BaseStationary `protobuf:"bytes,3,opt,name=base_rmse,json=baseRmse,proto3" json:"base_rmse,omitempty"`
	// A list of candidates for this traffic light as estimated by the
	// sensor.
	//
	// \note OSI uses singular instead of plural for repeated field names.
	//
	Candidate            []*DetectedTrafficLight_CandidateTrafficLight `protobuf:"bytes,4,rep,name=candidate,proto3" json:"candidate,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                      `json:"-"`
	XXX_unrecognized     []byte                                        `json:"-"`
	XXX_sizecache        int32                                         `json:"-"`
}

func (m *DetectedTrafficLight) Reset()         { *m = DetectedTrafficLight{} }
func (m *DetectedTrafficLight) String() string { return proto.CompactTextString(m) }
func (*DetectedTrafficLight) ProtoMessage()    {}
func (*DetectedTrafficLight) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b117eef9d5a7923, []int{0}
}

func (m *DetectedTrafficLight) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DetectedTrafficLight.Unmarshal(m, b)
}
func (m *DetectedTrafficLight) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DetectedTrafficLight.Marshal(b, m, deterministic)
}
func (m *DetectedTrafficLight) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DetectedTrafficLight.Merge(m, src)
}
func (m *DetectedTrafficLight) XXX_Size() int {
	return xxx_messageInfo_DetectedTrafficLight.Size(m)
}
func (m *DetectedTrafficLight) XXX_DiscardUnknown() {
	xxx_messageInfo_DetectedTrafficLight.DiscardUnknown(m)
}

var xxx_messageInfo_DetectedTrafficLight proto.InternalMessageInfo

func (m *DetectedTrafficLight) GetHeader() *DetectedItemHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *DetectedTrafficLight) GetBase() *BaseStationary {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *DetectedTrafficLight) GetBaseRmse() *BaseStationary {
	if m != nil {
		return m.BaseRmse
	}
	return nil
}

func (m *DetectedTrafficLight) GetCandidate() []*DetectedTrafficLight_CandidateTrafficLight {
	if m != nil {
		return m.Candidate
	}
	return nil
}

//
// \brief A candidate for a detected traffic light as estimated by
// the sensor.
//
type DetectedTrafficLight_CandidateTrafficLight struct {
	// The estimated probability that this candidate is the true value.
	//
	// \note The sum of all \c #probability must be one. This probability is
	// given under the condition of
	// \c DetectedItemHeader::existence_probability.
	//
	// Range: [0,1]
	//
	Probability float64 `protobuf:"fixed64,1,opt,name=probability,proto3" json:"probability,omitempty"`
	// The classification of one traffic light that define this candidate.
	//
	// \note IDs, which are referenced in this message, usually
	// reference to \c DetectedXXX::tracking_id IDs.
	//
	Classification       *TrafficLight_Classification `protobuf:"bytes,2,opt,name=classification,proto3" json:"classification,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *DetectedTrafficLight_CandidateTrafficLight) Reset() {
	*m = DetectedTrafficLight_CandidateTrafficLight{}
}
func (m *DetectedTrafficLight_CandidateTrafficLight) String() string {
	return proto.CompactTextString(m)
}
func (*DetectedTrafficLight_CandidateTrafficLight) ProtoMessage() {}
func (*DetectedTrafficLight_CandidateTrafficLight) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b117eef9d5a7923, []int{0, 0}
}

func (m *DetectedTrafficLight_CandidateTrafficLight) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DetectedTrafficLight_CandidateTrafficLight.Unmarshal(m, b)
}
func (m *DetectedTrafficLight_CandidateTrafficLight) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DetectedTrafficLight_CandidateTrafficLight.Marshal(b, m, deterministic)
}
func (m *DetectedTrafficLight_CandidateTrafficLight) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DetectedTrafficLight_CandidateTrafficLight.Merge(m, src)
}
func (m *DetectedTrafficLight_CandidateTrafficLight) XXX_Size() int {
	return xxx_messageInfo_DetectedTrafficLight_CandidateTrafficLight.Size(m)
}
func (m *DetectedTrafficLight_CandidateTrafficLight) XXX_DiscardUnknown() {
	xxx_messageInfo_DetectedTrafficLight_CandidateTrafficLight.DiscardUnknown(m)
}

var xxx_messageInfo_DetectedTrafficLight_CandidateTrafficLight proto.InternalMessageInfo

func (m *DetectedTrafficLight_CandidateTrafficLight) GetProbability() float64 {
	if m != nil {
		return m.Probability
	}
	return 0
}

func (m *DetectedTrafficLight_CandidateTrafficLight) GetClassification() *TrafficLight_Classification {
	if m != nil {
		return m.Classification
	}
	return nil
}

func init() {
	proto.RegisterType((*DetectedTrafficLight)(nil), "osi3.DetectedTrafficLight")
	proto.RegisterType((*DetectedTrafficLight_CandidateTrafficLight)(nil), "osi3.DetectedTrafficLight.CandidateTrafficLight")
}

func init() { proto.RegisterFile("osi_detectedtrafficlight.proto", fileDescriptor_1b117eef9d5a7923) }

var fileDescriptor_1b117eef9d5a7923 = []byte{
	// 281 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xc1, 0x4b, 0xc3, 0x30,
	0x14, 0xc6, 0x69, 0x57, 0x86, 0x4b, 0x41, 0x24, 0x4c, 0x09, 0x3d, 0x48, 0xf5, 0xd4, 0x53, 0x99,
	0xdb, 0x7f, 0x30, 0x3d, 0x6c, 0x20, 0x1e, 0xa2, 0xf7, 0x91, 0xa6, 0xaf, 0x2e, 0xd2, 0x36, 0x23,
	0x79, 0x97, 0xdd, 0xfd, 0xb3, 0x3d, 0x48, 0xd2, 0x0e, 0x5b, 0x95, 0x9d, 0x02, 0xdf, 0xf7, 0xfb,
	0x5e, 0xbe, 0xc7, 0x23, 0xb7, 0xda, 0xaa, 0x5d, 0x09, 0x08, 0x12, 0xa1, 0x44, 0x23, 0xaa, 0x4a,
	0xc9, 0x5a, 0xbd, 0xef, 0x31, 0x3f, 0x18, 0x8d, 0x9a, 0x46, 0xda, 0xaa, 0x55, 0x72, 0xe5, 0x28,
	0xa9, 0x9b, 0x46, 0xb7, 0x9d, 0x9e, 0xdc, 0x38, 0xe5, 0x2f, 0x9f, 0xb0, 0xe1, 0x3c, 0x5d, 0x7c,
	0x80, 0xec, 0x9d, 0xfb, 0xaf, 0x90, 0xcc, 0x9f, 0x7a, 0xe3, 0xad, 0x0b, 0x3e, 0xbb, 0x20, 0x5d,
	0x90, 0xe9, 0x1e, 0x44, 0x09, 0x86, 0x05, 0x69, 0x90, 0xc5, 0x4b, 0x96, 0xbb, 0x3f, 0xf3, 0x13,
	0xbb, 0x45, 0x68, 0x36, 0xde, 0xe7, 0x3d, 0x47, 0x33, 0x12, 0x15, 0xc2, 0x02, 0x0b, 0x3d, 0x3f,
	0xef, 0xf8, 0xb5, 0xb0, 0xf0, 0x8a, 0x02, 0x95, 0x6e, 0x85, 0x39, 0x72, 0x4f, 0xd0, 0x07, 0x32,
	0x73, 0xef, 0xce, 0x34, 0x16, 0xd8, 0xe4, 0x0c, 0x7e, 0xe1, 0x30, 0xde, 0x58, 0xa0, 0x2f, 0x64,
	0x26, 0x45, 0x5b, 0xaa, 0x52, 0x20, 0xb0, 0x28, 0x9d, 0x64, 0xf1, 0x72, 0x31, 0x6e, 0x34, 0x6c,
	0x9f, 0x3f, 0x9e, 0xd8, 0xa1, 0xca, 0x7f, 0x46, 0x24, 0x9f, 0x01, 0xb9, 0xfe, 0x17, 0xa2, 0x29,
	0x89, 0x0f, 0x46, 0x17, 0xa2, 0x50, 0xb5, 0xc2, 0xa3, 0xdf, 0x3e, 0xe0, 0x43, 0x89, 0x6e, 0xc9,
	0xa5, 0xac, 0x85, 0xb5, 0xaa, 0x52, 0xd2, 0x57, 0xed, 0x57, 0xbe, 0xeb, 0x0a, 0x8d, 0x8b, 0x8c,
	0x40, 0xfe, 0x2b, 0xb8, 0x0e, 0x37, 0x41, 0x31, 0xf5, 0x97, 0x58, 0x7d, 0x07, 0x00, 0x00, 0xff,
	0xff, 0x37, 0x90, 0x7b, 0xdc, 0xf5, 0x01, 0x00, 0x00,
}
