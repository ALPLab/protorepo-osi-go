// Code generated by protoc-gen-go. DO NOT EDIT.
// source: osi_occupant.proto

package osi3

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Definition of seat positions.
//
type Occupant_Classification_Seat int32

const (
	// Seat position is unknown (must not be used in ground truth).
	//
	Occupant_Classification_SEAT_UNKNOWN Occupant_Classification_Seat = 0
	// Other (unspecified but known) seat.
	//
	Occupant_Classification_SEAT_OTHER Occupant_Classification_Seat = 1
	// Seat position is in the front row, left seat.
	// This is usually the driver's seat in right-hand traffic.
	//
	Occupant_Classification_SEAT_FRONT_LEFT Occupant_Classification_Seat = 2
	// Seat position is in the front row, right seat.
	// This is usually the driver's seat in left-hand traffic.
	//
	Occupant_Classification_SEAT_FRONT_RIGHT Occupant_Classification_Seat = 3
	// Seat position is in the front row, middle seat.
	//
	Occupant_Classification_SEAT_FRONT_MIDDLE Occupant_Classification_Seat = 4
	// Seat position is in the back row, left seat.
	//
	Occupant_Classification_SEAT_BACK_LEFT Occupant_Classification_Seat = 5
	// Seat position is in the back row, right seat.
	//
	Occupant_Classification_SEAT_BACK_RIGHT Occupant_Classification_Seat = 6
	// Seat position is in the back row, middle seat.
	//
	Occupant_Classification_SEAT_BACK_MIDDLE Occupant_Classification_Seat = 7
	// Seat position is in the third row, left seat.
	//
	Occupant_Classification_SEAT_THIRD_ROW_LEFT Occupant_Classification_Seat = 8
	// Seat position is in the third row, right seat.
	//
	Occupant_Classification_SEAT_THIRD_ROW_RIGHT Occupant_Classification_Seat = 9
	// Seat position is in the third row, middle seat.
	//
	Occupant_Classification_SEAT_THIRD_ROW_MIDDLE Occupant_Classification_Seat = 10
)

var Occupant_Classification_Seat_name = map[int32]string{
	0:  "SEAT_UNKNOWN",
	1:  "SEAT_OTHER",
	2:  "SEAT_FRONT_LEFT",
	3:  "SEAT_FRONT_RIGHT",
	4:  "SEAT_FRONT_MIDDLE",
	5:  "SEAT_BACK_LEFT",
	6:  "SEAT_BACK_RIGHT",
	7:  "SEAT_BACK_MIDDLE",
	8:  "SEAT_THIRD_ROW_LEFT",
	9:  "SEAT_THIRD_ROW_RIGHT",
	10: "SEAT_THIRD_ROW_MIDDLE",
}

var Occupant_Classification_Seat_value = map[string]int32{
	"SEAT_UNKNOWN":          0,
	"SEAT_OTHER":            1,
	"SEAT_FRONT_LEFT":       2,
	"SEAT_FRONT_RIGHT":      3,
	"SEAT_FRONT_MIDDLE":     4,
	"SEAT_BACK_LEFT":        5,
	"SEAT_BACK_RIGHT":       6,
	"SEAT_BACK_MIDDLE":      7,
	"SEAT_THIRD_ROW_LEFT":   8,
	"SEAT_THIRD_ROW_RIGHT":  9,
	"SEAT_THIRD_ROW_MIDDLE": 10,
}

func (x Occupant_Classification_Seat) String() string {
	return proto.EnumName(Occupant_Classification_Seat_name, int32(x))
}

func (Occupant_Classification_Seat) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3c833b5ad6b9f7d3, []int{0, 0, 0}
}

// Definition of hands related to the steering wheel (mostly driver).
//
type Occupant_Classification_SteeringControl int32

const (
	// Hands state is unknown (must not be used in ground truth).
	//
	Occupant_Classification_STEERING_CONTROL_UNKNOWN Occupant_Classification_SteeringControl = 0
	// Other (unspecified but known) hand positioning related to the
	// steering wheel.
	//
	Occupant_Classification_STEERING_CONTROL_OTHER Occupant_Classification_SteeringControl = 1
	// Hands are not on the steering wheel.
	//
	Occupant_Classification_STEERING_CONTROL_NO_HAND Occupant_Classification_SteeringControl = 2
	// One hand is on the steering wheel. Whether it is the left or
	// right hand is unspecified or unknown.
	//
	// \note If there is no differentiation between one or both hands on
	// the steering wheel, this value should be used.
	//
	Occupant_Classification_STEERING_CONTROL_ONE_HAND Occupant_Classification_SteeringControl = 3
	// Both hands are on the steering wheel.
	//
	Occupant_Classification_STEERING_CONTROL_BOTH_HANDS Occupant_Classification_SteeringControl = 4
	// Only left hand is on the steering wheel.
	//
	Occupant_Classification_STEERING_CONTROL_LEFT_HAND Occupant_Classification_SteeringControl = 5
	// Only right hand is on the steering wheel.
	//
	Occupant_Classification_STEERING_CONTROL_RIGHT_HAND Occupant_Classification_SteeringControl = 6
)

var Occupant_Classification_SteeringControl_name = map[int32]string{
	0: "STEERING_CONTROL_UNKNOWN",
	1: "STEERING_CONTROL_OTHER",
	2: "STEERING_CONTROL_NO_HAND",
	3: "STEERING_CONTROL_ONE_HAND",
	4: "STEERING_CONTROL_BOTH_HANDS",
	5: "STEERING_CONTROL_LEFT_HAND",
	6: "STEERING_CONTROL_RIGHT_HAND",
}

var Occupant_Classification_SteeringControl_value = map[string]int32{
	"STEERING_CONTROL_UNKNOWN":    0,
	"STEERING_CONTROL_OTHER":      1,
	"STEERING_CONTROL_NO_HAND":    2,
	"STEERING_CONTROL_ONE_HAND":   3,
	"STEERING_CONTROL_BOTH_HANDS": 4,
	"STEERING_CONTROL_LEFT_HAND":  5,
	"STEERING_CONTROL_RIGHT_HAND": 6,
}

func (x Occupant_Classification_SteeringControl) String() string {
	return proto.EnumName(Occupant_Classification_SteeringControl_name, int32(x))
}

func (Occupant_Classification_SteeringControl) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3c833b5ad6b9f7d3, []int{0, 0, 1}
}

//
// \brief An occupant of a host vehicle, especially the driver of the vehicle.
//
type Occupant struct {
	// The ID of the driver.
	//
	Id *Identifier `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Specific information about the classification of the occupant.
	//
	Classification       *Occupant_Classification `protobuf:"bytes,2,opt,name=classification,proto3" json:"classification,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *Occupant) Reset()         { *m = Occupant{} }
func (m *Occupant) String() string { return proto.CompactTextString(m) }
func (*Occupant) ProtoMessage()    {}
func (*Occupant) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c833b5ad6b9f7d3, []int{0}
}

func (m *Occupant) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Occupant.Unmarshal(m, b)
}
func (m *Occupant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Occupant.Marshal(b, m, deterministic)
}
func (m *Occupant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Occupant.Merge(m, src)
}
func (m *Occupant) XXX_Size() int {
	return xxx_messageInfo_Occupant.Size(m)
}
func (m *Occupant) XXX_DiscardUnknown() {
	xxx_messageInfo_Occupant.DiscardUnknown(m)
}

var xxx_messageInfo_Occupant proto.InternalMessageInfo

func (m *Occupant) GetId() *Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Occupant) GetClassification() *Occupant_Classification {
	if m != nil {
		return m.Classification
	}
	return nil
}

//
// \brief Information regarding the classification of the occupant.
//
type Occupant_Classification struct {
	// Flag determining whether the person is the driver of the vehicle or a
	// passenger.
	//
	IsDriver bool `protobuf:"varint,2,opt,name=is_driver,json=isDriver,proto3" json:"is_driver,omitempty"`
	// Seat position of the vehicle occupant.
	//
	Seat Occupant_Classification_Seat `protobuf:"varint,3,opt,name=seat,proto3,enum=osi3.Occupant_Classification_Seat" json:"seat,omitempty"`
	// Describes the state of the passenger's hands related to the steering
	// wheel (mostly driver).
	//
	SteeringControl      Occupant_Classification_SteeringControl `protobuf:"varint,4,opt,name=steering_control,json=steeringControl,proto3,enum=osi3.Occupant_Classification_SteeringControl" json:"steering_control,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                `json:"-"`
	XXX_unrecognized     []byte                                  `json:"-"`
	XXX_sizecache        int32                                   `json:"-"`
}

func (m *Occupant_Classification) Reset()         { *m = Occupant_Classification{} }
func (m *Occupant_Classification) String() string { return proto.CompactTextString(m) }
func (*Occupant_Classification) ProtoMessage()    {}
func (*Occupant_Classification) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c833b5ad6b9f7d3, []int{0, 0}
}

func (m *Occupant_Classification) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Occupant_Classification.Unmarshal(m, b)
}
func (m *Occupant_Classification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Occupant_Classification.Marshal(b, m, deterministic)
}
func (m *Occupant_Classification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Occupant_Classification.Merge(m, src)
}
func (m *Occupant_Classification) XXX_Size() int {
	return xxx_messageInfo_Occupant_Classification.Size(m)
}
func (m *Occupant_Classification) XXX_DiscardUnknown() {
	xxx_messageInfo_Occupant_Classification.DiscardUnknown(m)
}

var xxx_messageInfo_Occupant_Classification proto.InternalMessageInfo

func (m *Occupant_Classification) GetIsDriver() bool {
	if m != nil {
		return m.IsDriver
	}
	return false
}

func (m *Occupant_Classification) GetSeat() Occupant_Classification_Seat {
	if m != nil {
		return m.Seat
	}
	return Occupant_Classification_SEAT_UNKNOWN
}

func (m *Occupant_Classification) GetSteeringControl() Occupant_Classification_SteeringControl {
	if m != nil {
		return m.SteeringControl
	}
	return Occupant_Classification_STEERING_CONTROL_UNKNOWN
}

func init() {
	proto.RegisterEnum("osi3.Occupant_Classification_Seat", Occupant_Classification_Seat_name, Occupant_Classification_Seat_value)
	proto.RegisterEnum("osi3.Occupant_Classification_SteeringControl", Occupant_Classification_SteeringControl_name, Occupant_Classification_SteeringControl_value)
	proto.RegisterType((*Occupant)(nil), "osi3.Occupant")
	proto.RegisterType((*Occupant_Classification)(nil), "osi3.Occupant.Classification")
}

func init() { proto.RegisterFile("osi_occupant.proto", fileDescriptor_3c833b5ad6b9f7d3) }

var fileDescriptor_3c833b5ad6b9f7d3 = []byte{
	// 442 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x93, 0x4f, 0x6f, 0xd3, 0x30,
	0x18, 0xc6, 0x49, 0x9a, 0x96, 0xee, 0x05, 0xa5, 0xe6, 0xdd, 0x06, 0x59, 0xc7, 0xa0, 0xea, 0x69,
	0x17, 0x72, 0xd8, 0x24, 0xee, 0x6d, 0x93, 0x2d, 0xd1, 0x8a, 0x2d, 0xb9, 0x46, 0xe3, 0x16, 0x85,
	0x34, 0x43, 0x96, 0xb6, 0x78, 0x8a, 0x03, 0x9f, 0x86, 0x33, 0x1f, 0x8e, 0x2f, 0xc0, 0x15, 0xd5,
	0xee, 0xa6, 0xb6, 0x99, 0xe0, 0xe8, 0xe7, 0xcf, 0xef, 0x55, 0x1e, 0x29, 0x80, 0x4a, 0xcb, 0x4c,
	0x15, 0xc5, 0xf7, 0xfb, 0xbc, 0x6a, 0xc2, 0xfb, 0x5a, 0x35, 0x0a, 0x3d, 0xa5, 0xe5, 0xf9, 0x90,
	0xac, 0x9c, 0x42, 0xdd, 0xdd, 0xa9, 0xca, 0xea, 0xe3, 0x9f, 0x3d, 0xe8, 0xb3, 0x75, 0x14, 0x47,
	0xe0, 0xca, 0x65, 0xe0, 0x8c, 0x9c, 0xd3, 0x17, 0x67, 0x24, 0x5c, 0x35, 0xc2, 0x74, 0x59, 0x56,
	0x8d, 0xbc, 0x91, 0x65, 0xcd, 0x5d, 0xb9, 0xc4, 0x18, 0xfc, 0xe2, 0x36, 0xd7, 0x5a, 0xde, 0xc8,
	0x22, 0x6f, 0xa4, 0xaa, 0x02, 0xd7, 0xa4, 0x4f, 0x6c, 0xfa, 0x81, 0x14, 0xce, 0xb6, 0x42, 0x7c,
	0xa7, 0x34, 0xfc, 0xd5, 0x05, 0x7f, 0x3b, 0x82, 0xc7, 0xb0, 0x27, 0x75, 0xb6, 0xac, 0xe5, 0x8f,
	0xb2, 0x36, 0xd0, 0x3e, 0xef, 0x4b, 0x1d, 0x99, 0x37, 0x7e, 0x04, 0x4f, 0x97, 0x79, 0x13, 0x74,
	0x46, 0xce, 0xa9, 0x7f, 0x36, 0xfe, 0xe7, 0xb1, 0x70, 0x51, 0xe6, 0x0d, 0x37, 0x79, 0xfc, 0x02,
	0x44, 0x37, 0x65, 0x59, 0xcb, 0xea, 0x5b, 0x56, 0xa8, 0xaa, 0xa9, 0xd5, 0x6d, 0xe0, 0x19, 0xc6,
	0x87, 0xff, 0x30, 0xd6, 0xad, 0x99, 0x2d, 0xf1, 0x81, 0xde, 0x16, 0xc6, 0x7f, 0x1c, 0xf0, 0x56,
	0x87, 0x90, 0xc0, 0xcb, 0x45, 0x3c, 0x11, 0xd9, 0x67, 0x7a, 0x45, 0xd9, 0x35, 0x25, 0xcf, 0xd0,
	0x07, 0x30, 0x0a, 0x13, 0x49, 0xcc, 0x89, 0x83, 0xfb, 0x30, 0x30, 0xef, 0x0b, 0xce, 0xa8, 0xc8,
	0xe6, 0xf1, 0x85, 0x20, 0x2e, 0x1e, 0x00, 0xd9, 0x10, 0x79, 0x7a, 0x99, 0x08, 0xd2, 0xc1, 0x43,
	0x78, 0xb5, 0xa1, 0x7e, 0x4a, 0xa3, 0x68, 0x1e, 0x13, 0x0f, 0x11, 0x7c, 0x23, 0x4f, 0x27, 0xb3,
	0x2b, 0x0b, 0xe8, 0x3e, 0x52, 0x8d, 0x66, 0xfb, 0xbd, 0x47, 0xaa, 0x11, 0xd7, 0xf5, 0xe7, 0xf8,
	0x06, 0xf6, 0x8d, 0x2a, 0x92, 0x94, 0x47, 0x19, 0x67, 0xd7, 0x96, 0xd1, 0xc7, 0x00, 0x0e, 0x76,
	0x0c, 0x0b, 0xda, 0xc3, 0x23, 0x38, 0xdc, 0x71, 0xd6, 0x34, 0x18, 0xff, 0x76, 0x60, 0xb0, 0x33,
	0x0f, 0xbe, 0x85, 0x60, 0x21, 0xe2, 0x98, 0xa7, 0xf4, 0x32, 0x9b, 0x31, 0x2a, 0x38, 0x9b, 0x6f,
	0x0c, 0x32, 0x84, 0xd7, 0x2d, 0xf7, 0x61, 0x9c, 0xa7, 0x9a, 0x94, 0x65, 0xc9, 0x84, 0x46, 0xc4,
	0xc5, 0x13, 0x38, 0x6a, 0x37, 0x69, 0x6c, 0xed, 0x0e, 0xbe, 0x87, 0xe3, 0x96, 0x3d, 0x65, 0x22,
	0x31, 0xfe, 0x82, 0x78, 0xf8, 0x0e, 0x86, 0xad, 0xc0, 0xea, 0xdb, 0x2d, 0xa0, 0xfb, 0x24, 0xc0,
	0x4c, 0x60, 0x03, 0xbd, 0xa9, 0x9b, 0x38, 0x5f, 0x7b, 0xe6, 0x4f, 0x39, 0xff, 0x1b, 0x00, 0x00,
	0xff, 0xff, 0xdb, 0x53, 0x47, 0x2d, 0x57, 0x03, 0x00, 0x00,
}
