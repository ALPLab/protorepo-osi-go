// Code generated by protoc-gen-go. DO NOT EDIT.
// source: osi_detectedtrafficsign.proto

package osi3

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Definition of traffic sign geometries.
//
type DetectedTrafficSign_DetectedMainSign_Geometry int32

const (
	// Geometry of the traffic sign is unknown (must not be used in
	// ground truth).
	//
	DetectedTrafficSign_DetectedMainSign_GEOMETRY_UNKNOWN DetectedTrafficSign_DetectedMainSign_Geometry = 0
	// Geometry of the traffic sign is unspecified (but known).
	//
	DetectedTrafficSign_DetectedMainSign_GEOMETRY_OTHER DetectedTrafficSign_DetectedMainSign_Geometry = 1
	// Traffic sign has a circular geometry. (0 corners)
	//
	DetectedTrafficSign_DetectedMainSign_GEOMETRY_CIRCLE DetectedTrafficSign_DetectedMainSign_Geometry = 2
	// Traffic sign has a triangular geometry pointing to the top. (3
	// corners)
	//
	DetectedTrafficSign_DetectedMainSign_GEOMETRY_TRIANGLE_TOP DetectedTrafficSign_DetectedMainSign_Geometry = 3
	// Traffic sign has a triangular geometry pointing down. (3 corners)
	//
	DetectedTrafficSign_DetectedMainSign_GEOMETRY_TRIANGLE_DOWN DetectedTrafficSign_DetectedMainSign_Geometry = 4
	// Traffic sign has a square geometry. (4 corners)
	//
	DetectedTrafficSign_DetectedMainSign_GEOMETRY_SQUARE DetectedTrafficSign_DetectedMainSign_Geometry = 5
	// Traffic sign that has a pole geometry. (height is bigger than
	// width e.g. pole indicating highways exit in xx [m]). (4 corners)
	//
	DetectedTrafficSign_DetectedMainSign_GEOMETRY_POLE DetectedTrafficSign_DetectedMainSign_Geometry = 6
	// Traffic sign has a rectangle geometry. (width is bigger than
	// height e.g. one-way) (4 corners)
	//
	DetectedTrafficSign_DetectedMainSign_GEOMETRY_RECTANGLE DetectedTrafficSign_DetectedMainSign_Geometry = 7
	// Traffic sign that has an oversize rectangle geometry. (4 corners)
	// E.g. direction plates on highway or city signs.
	//
	DetectedTrafficSign_DetectedMainSign_GEOMETRY_PLATE DetectedTrafficSign_DetectedMainSign_Geometry = 8
	// Traffic sign has a diamond geometry. (4 corners)
	//
	DetectedTrafficSign_DetectedMainSign_GEOMETRY_DIAMOND DetectedTrafficSign_DetectedMainSign_Geometry = 9
	// Traffic sign has a geometry of an arrow pointing to the left. (5
	// corners)
	//
	DetectedTrafficSign_DetectedMainSign_GEOMETRY_ARROW_LEFT DetectedTrafficSign_DetectedMainSign_Geometry = 10
	// Traffic sign has a geometry of an arrow pointing to the right. (5
	// corners)
	//
	DetectedTrafficSign_DetectedMainSign_GEOMETRY_ARROW_RIGHT DetectedTrafficSign_DetectedMainSign_Geometry = 11
	// Traffic sign has an octagon geometry. (8 corners)
	//
	DetectedTrafficSign_DetectedMainSign_GEOMETRY_OCTAGON DetectedTrafficSign_DetectedMainSign_Geometry = 12
)

var DetectedTrafficSign_DetectedMainSign_Geometry_name = map[int32]string{
	0:  "GEOMETRY_UNKNOWN",
	1:  "GEOMETRY_OTHER",
	2:  "GEOMETRY_CIRCLE",
	3:  "GEOMETRY_TRIANGLE_TOP",
	4:  "GEOMETRY_TRIANGLE_DOWN",
	5:  "GEOMETRY_SQUARE",
	6:  "GEOMETRY_POLE",
	7:  "GEOMETRY_RECTANGLE",
	8:  "GEOMETRY_PLATE",
	9:  "GEOMETRY_DIAMOND",
	10: "GEOMETRY_ARROW_LEFT",
	11: "GEOMETRY_ARROW_RIGHT",
	12: "GEOMETRY_OCTAGON",
}

var DetectedTrafficSign_DetectedMainSign_Geometry_value = map[string]int32{
	"GEOMETRY_UNKNOWN":       0,
	"GEOMETRY_OTHER":         1,
	"GEOMETRY_CIRCLE":        2,
	"GEOMETRY_TRIANGLE_TOP":  3,
	"GEOMETRY_TRIANGLE_DOWN": 4,
	"GEOMETRY_SQUARE":        5,
	"GEOMETRY_POLE":          6,
	"GEOMETRY_RECTANGLE":     7,
	"GEOMETRY_PLATE":         8,
	"GEOMETRY_DIAMOND":       9,
	"GEOMETRY_ARROW_LEFT":    10,
	"GEOMETRY_ARROW_RIGHT":   11,
	"GEOMETRY_OCTAGON":       12,
}

func (x DetectedTrafficSign_DetectedMainSign_Geometry) String() string {
	return proto.EnumName(DetectedTrafficSign_DetectedMainSign_Geometry_name, int32(x))
}

func (DetectedTrafficSign_DetectedMainSign_Geometry) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_332af30ed8b82e49, []int{0, 0, 0}
}

//
// \brief A traffic sign in the environment as detected by the sensor.
//
// \image html OSI_DetectedTrafficSigns.jpg
//
type DetectedTrafficSign struct {
	// Common information of one detected item.
	//
	Header *DetectedItemHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The main sign as detected by the sensor.
	//
	MainSign *DetectedTrafficSign_DetectedMainSign `protobuf:"bytes,2,opt,name=main_sign,json=mainSign,proto3" json:"main_sign,omitempty"`
	// A list of additional supplementary sign(s) as detected by the sensor.
	//
	// \note OSI uses singular instead of plural for repeated field names.
	//
	SupplementarySign    []*DetectedTrafficSign_DetectedSupplementarySign `protobuf:"bytes,3,rep,name=supplementary_sign,json=supplementarySign,proto3" json:"supplementary_sign,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                         `json:"-"`
	XXX_unrecognized     []byte                                           `json:"-"`
	XXX_sizecache        int32                                            `json:"-"`
}

func (m *DetectedTrafficSign) Reset()         { *m = DetectedTrafficSign{} }
func (m *DetectedTrafficSign) String() string { return proto.CompactTextString(m) }
func (*DetectedTrafficSign) ProtoMessage()    {}
func (*DetectedTrafficSign) Descriptor() ([]byte, []int) {
	return fileDescriptor_332af30ed8b82e49, []int{0}
}

func (m *DetectedTrafficSign) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DetectedTrafficSign.Unmarshal(m, b)
}
func (m *DetectedTrafficSign) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DetectedTrafficSign.Marshal(b, m, deterministic)
}
func (m *DetectedTrafficSign) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DetectedTrafficSign.Merge(m, src)
}
func (m *DetectedTrafficSign) XXX_Size() int {
	return xxx_messageInfo_DetectedTrafficSign.Size(m)
}
func (m *DetectedTrafficSign) XXX_DiscardUnknown() {
	xxx_messageInfo_DetectedTrafficSign.DiscardUnknown(m)
}

var xxx_messageInfo_DetectedTrafficSign proto.InternalMessageInfo

func (m *DetectedTrafficSign) GetHeader() *DetectedItemHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *DetectedTrafficSign) GetMainSign() *DetectedTrafficSign_DetectedMainSign {
	if m != nil {
		return m.MainSign
	}
	return nil
}

func (m *DetectedTrafficSign) GetSupplementarySign() []*DetectedTrafficSign_DetectedSupplementarySign {
	if m != nil {
		return m.SupplementarySign
	}
	return nil
}

//
// \brief Candidates for a detected main sign as estimated by the sensor.
//
// \image html OSI_DetectedMainTrafficSign.jpg
//
type DetectedTrafficSign_DetectedMainSign struct {
	// A list of candidates for this traffic sign as estimated by the
	// sensor.
	//
	// \note OSI uses singular instead of plural for repeated field names.
	//
	Candidate []*DetectedTrafficSign_DetectedMainSign_CandidateMainSign `protobuf:"bytes,1,rep,name=candidate,proto3" json:"candidate,omitempty"`
	// The base parameters of the traffic sign.
	//
	// The orientation of the bounding box \c #base
	// ( \c BaseStationary::orientation ) is defined as follows:
	// The z-axis of the given \c BaseStationary::orientation is the vector
	// from the bottom to the top of the traffic sign's 2D image plate.
	// (Normally it is equal to the ground truth z-axis.)
	// The x-axis of the given \c BaseStationary::orientation is view
	// normal of the traffic sign's image.
	// This x-axis points from the traffic sign's image in the direction
	// from where a 'viewer' could see the traffic sign image.
	//
	Base *BaseStationary `protobuf:"bytes,2,opt,name=base,proto3" json:"base,omitempty"`
	// The root mean squared error of the base parameters of the detected
	// traffic sign. \c TrafficSign::MainSign::base has to be identical for
	// all \c #candidate traffic signs.
	//
	BaseRmse *BaseStationary `protobuf:"bytes,3,opt,name=base_rmse,json=baseRmse,proto3" json:"base_rmse,omitempty"`
	// The estimated geometry of the traffic sign.
	//
	Geometry             DetectedTrafficSign_DetectedMainSign_Geometry `protobuf:"varint,4,opt,name=geometry,proto3,enum=osi3.DetectedTrafficSign_DetectedMainSign_Geometry" json:"geometry,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                      `json:"-"`
	XXX_unrecognized     []byte                                        `json:"-"`
	XXX_sizecache        int32                                         `json:"-"`
}

func (m *DetectedTrafficSign_DetectedMainSign) Reset()         { *m = DetectedTrafficSign_DetectedMainSign{} }
func (m *DetectedTrafficSign_DetectedMainSign) String() string { return proto.CompactTextString(m) }
func (*DetectedTrafficSign_DetectedMainSign) ProtoMessage()    {}
func (*DetectedTrafficSign_DetectedMainSign) Descriptor() ([]byte, []int) {
	return fileDescriptor_332af30ed8b82e49, []int{0, 0}
}

func (m *DetectedTrafficSign_DetectedMainSign) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DetectedTrafficSign_DetectedMainSign.Unmarshal(m, b)
}
func (m *DetectedTrafficSign_DetectedMainSign) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DetectedTrafficSign_DetectedMainSign.Marshal(b, m, deterministic)
}
func (m *DetectedTrafficSign_DetectedMainSign) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DetectedTrafficSign_DetectedMainSign.Merge(m, src)
}
func (m *DetectedTrafficSign_DetectedMainSign) XXX_Size() int {
	return xxx_messageInfo_DetectedTrafficSign_DetectedMainSign.Size(m)
}
func (m *DetectedTrafficSign_DetectedMainSign) XXX_DiscardUnknown() {
	xxx_messageInfo_DetectedTrafficSign_DetectedMainSign.DiscardUnknown(m)
}

var xxx_messageInfo_DetectedTrafficSign_DetectedMainSign proto.InternalMessageInfo

func (m *DetectedTrafficSign_DetectedMainSign) GetCandidate() []*DetectedTrafficSign_DetectedMainSign_CandidateMainSign {
	if m != nil {
		return m.Candidate
	}
	return nil
}

func (m *DetectedTrafficSign_DetectedMainSign) GetBase() *BaseStationary {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *DetectedTrafficSign_DetectedMainSign) GetBaseRmse() *BaseStationary {
	if m != nil {
		return m.BaseRmse
	}
	return nil
}

func (m *DetectedTrafficSign_DetectedMainSign) GetGeometry() DetectedTrafficSign_DetectedMainSign_Geometry {
	if m != nil {
		return m.Geometry
	}
	return DetectedTrafficSign_DetectedMainSign_GEOMETRY_UNKNOWN
}

//
// \brief A candidate for a detected main sign as estimated by the
// sensor.
//
type DetectedTrafficSign_DetectedMainSign_CandidateMainSign struct {
	// The estimated probability that this candidate is the true value.
	//
	// \note The sum of all \c #probability must be one. This
	// probability is given under the condition of \c
	// DetectedItemHeader::existence_probability.
	//
	// Range: [0,1]
	//
	Probability float64 `protobuf:"fixed64,1,opt,name=probability,proto3" json:"probability,omitempty"`
	// The classification of one main sign that defines this candidate.
	//
	// \note IDs, which are referenced in this message, usually
	// reference to \c DetectedXXX::tracking_id IDs.
	//
	Classification       *TrafficSign_MainSign_Classification `protobuf:"bytes,2,opt,name=classification,proto3" json:"classification,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *DetectedTrafficSign_DetectedMainSign_CandidateMainSign) Reset() {
	*m = DetectedTrafficSign_DetectedMainSign_CandidateMainSign{}
}
func (m *DetectedTrafficSign_DetectedMainSign_CandidateMainSign) String() string {
	return proto.CompactTextString(m)
}
func (*DetectedTrafficSign_DetectedMainSign_CandidateMainSign) ProtoMessage() {}
func (*DetectedTrafficSign_DetectedMainSign_CandidateMainSign) Descriptor() ([]byte, []int) {
	return fileDescriptor_332af30ed8b82e49, []int{0, 0, 0}
}

func (m *DetectedTrafficSign_DetectedMainSign_CandidateMainSign) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DetectedTrafficSign_DetectedMainSign_CandidateMainSign.Unmarshal(m, b)
}
func (m *DetectedTrafficSign_DetectedMainSign_CandidateMainSign) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DetectedTrafficSign_DetectedMainSign_CandidateMainSign.Marshal(b, m, deterministic)
}
func (m *DetectedTrafficSign_DetectedMainSign_CandidateMainSign) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DetectedTrafficSign_DetectedMainSign_CandidateMainSign.Merge(m, src)
}
func (m *DetectedTrafficSign_DetectedMainSign_CandidateMainSign) XXX_Size() int {
	return xxx_messageInfo_DetectedTrafficSign_DetectedMainSign_CandidateMainSign.Size(m)
}
func (m *DetectedTrafficSign_DetectedMainSign_CandidateMainSign) XXX_DiscardUnknown() {
	xxx_messageInfo_DetectedTrafficSign_DetectedMainSign_CandidateMainSign.DiscardUnknown(m)
}

var xxx_messageInfo_DetectedTrafficSign_DetectedMainSign_CandidateMainSign proto.InternalMessageInfo

func (m *DetectedTrafficSign_DetectedMainSign_CandidateMainSign) GetProbability() float64 {
	if m != nil {
		return m.Probability
	}
	return 0
}

func (m *DetectedTrafficSign_DetectedMainSign_CandidateMainSign) GetClassification() *TrafficSign_MainSign_Classification {
	if m != nil {
		return m.Classification
	}
	return nil
}

//
// \brief Candidates for all detected supplementary signs of one traffic
// sign as estimated by the sensor.
//
// \image html OSI_DetectedSuppSign.jpg
//
type DetectedTrafficSign_DetectedSupplementarySign struct {
	// The definition of one of more supplementary signs that together
	// define this candidate.
	//
	// \note OSI uses singular instead of plural for repeated field names.
	//
	Candidate []*DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign `protobuf:"bytes,1,rep,name=candidate,proto3" json:"candidate,omitempty"`
	// The base parameters of the supplementary traffic sign.
	//
	// The orientation of the bounding box \c SupplementarySign::base
	// ( \c BaseStationary::orientation ) is defined as follows:
	// The z-axis of the given \c BaseStationary::orientation is the vector
	// from the bottom to the top of the supplementary traffic sign's 2D
	// image plate. (Normally it is equal to the ground truth z-axis.) The
	// x-axis of the given \c BaseStationary::orientation is view normal of
	// the supplementary traffic sign's image. This x-axis points from the
	// supplementary traffic sign's image in the direction from where a
	// 'viewer' could see the supplementary traffic sign image.
	//
	Base *BaseStationary `protobuf:"bytes,2,opt,name=base,proto3" json:"base,omitempty"`
	// The root mean squared error of the base parameters of the detected
	// supplementary traffic sign. \c #candidate
	// \c TrafficSign::SupplementarySign::base has to be identical for all
	// \c #candidate supplementary traffic signs.
	//
	BaseRmse             *BaseStationary `protobuf:"bytes,3,opt,name=base_rmse,json=baseRmse,proto3" json:"base_rmse,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *DetectedTrafficSign_DetectedSupplementarySign) Reset() {
	*m = DetectedTrafficSign_DetectedSupplementarySign{}
}
func (m *DetectedTrafficSign_DetectedSupplementarySign) String() string {
	return proto.CompactTextString(m)
}
func (*DetectedTrafficSign_DetectedSupplementarySign) ProtoMessage() {}
func (*DetectedTrafficSign_DetectedSupplementarySign) Descriptor() ([]byte, []int) {
	return fileDescriptor_332af30ed8b82e49, []int{0, 1}
}

func (m *DetectedTrafficSign_DetectedSupplementarySign) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DetectedTrafficSign_DetectedSupplementarySign.Unmarshal(m, b)
}
func (m *DetectedTrafficSign_DetectedSupplementarySign) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DetectedTrafficSign_DetectedSupplementarySign.Marshal(b, m, deterministic)
}
func (m *DetectedTrafficSign_DetectedSupplementarySign) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DetectedTrafficSign_DetectedSupplementarySign.Merge(m, src)
}
func (m *DetectedTrafficSign_DetectedSupplementarySign) XXX_Size() int {
	return xxx_messageInfo_DetectedTrafficSign_DetectedSupplementarySign.Size(m)
}
func (m *DetectedTrafficSign_DetectedSupplementarySign) XXX_DiscardUnknown() {
	xxx_messageInfo_DetectedTrafficSign_DetectedSupplementarySign.DiscardUnknown(m)
}

var xxx_messageInfo_DetectedTrafficSign_DetectedSupplementarySign proto.InternalMessageInfo

func (m *DetectedTrafficSign_DetectedSupplementarySign) GetCandidate() []*DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign {
	if m != nil {
		return m.Candidate
	}
	return nil
}

func (m *DetectedTrafficSign_DetectedSupplementarySign) GetBase() *BaseStationary {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *DetectedTrafficSign_DetectedSupplementarySign) GetBaseRmse() *BaseStationary {
	if m != nil {
		return m.BaseRmse
	}
	return nil
}

//
// \brief A candidate for a detected supplementary sign as estimated by
// the sensor.
//
type DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign struct {
	// The estimated probability that this candidate is the true value.
	//
	// \note The sum of all \c #probability must be one. This
	// probability is given under the condition of \c
	// DetectedItemHeader::existence_probability.
	//
	// Range: [0,1]
	//
	Probability float64 `protobuf:"fixed64,1,opt,name=probability,proto3" json:"probability,omitempty"`
	// The classification of one of more supplementary signs that
	// together define this candidate.
	//
	// \note IDs, which are referenced in this message, usually
	// reference to \c DetectedXXX::tracking_id IDs.
	//
	Classification       *TrafficSign_SupplementarySign_Classification `protobuf:"bytes,2,opt,name=classification,proto3" json:"classification,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                      `json:"-"`
	XXX_unrecognized     []byte                                        `json:"-"`
	XXX_sizecache        int32                                         `json:"-"`
}

func (m *DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign) Reset() {
	*m = DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign{}
}
func (m *DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign) String() string {
	return proto.CompactTextString(m)
}
func (*DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign) ProtoMessage() {}
func (*DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign) Descriptor() ([]byte, []int) {
	return fileDescriptor_332af30ed8b82e49, []int{0, 1, 0}
}

func (m *DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign.Unmarshal(m, b)
}
func (m *DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign.Marshal(b, m, deterministic)
}
func (m *DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign.Merge(m, src)
}
func (m *DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign) XXX_Size() int {
	return xxx_messageInfo_DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign.Size(m)
}
func (m *DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign) XXX_DiscardUnknown() {
	xxx_messageInfo_DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign.DiscardUnknown(m)
}

var xxx_messageInfo_DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign proto.InternalMessageInfo

func (m *DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign) GetProbability() float64 {
	if m != nil {
		return m.Probability
	}
	return 0
}

func (m *DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign) GetClassification() *TrafficSign_SupplementarySign_Classification {
	if m != nil {
		return m.Classification
	}
	return nil
}

func init() {
	proto.RegisterEnum("osi3.DetectedTrafficSign_DetectedMainSign_Geometry", DetectedTrafficSign_DetectedMainSign_Geometry_name, DetectedTrafficSign_DetectedMainSign_Geometry_value)
	proto.RegisterType((*DetectedTrafficSign)(nil), "osi3.DetectedTrafficSign")
	proto.RegisterType((*DetectedTrafficSign_DetectedMainSign)(nil), "osi3.DetectedTrafficSign.DetectedMainSign")
	proto.RegisterType((*DetectedTrafficSign_DetectedMainSign_CandidateMainSign)(nil), "osi3.DetectedTrafficSign.DetectedMainSign.CandidateMainSign")
	proto.RegisterType((*DetectedTrafficSign_DetectedSupplementarySign)(nil), "osi3.DetectedTrafficSign.DetectedSupplementarySign")
	proto.RegisterType((*DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign)(nil), "osi3.DetectedTrafficSign.DetectedSupplementarySign.CandidateSupplementarySign")
}

func init() { proto.RegisterFile("osi_detectedtrafficsign.proto", fileDescriptor_332af30ed8b82e49) }

var fileDescriptor_332af30ed8b82e49 = []byte{
	// 588 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x54, 0xcf, 0x6e, 0xda, 0x4e,
	0x18, 0xfc, 0x19, 0x48, 0x7e, 0xf0, 0xd1, 0xa6, 0x9b, 0xcd, 0x9f, 0x3a, 0x96, 0x2a, 0xa1, 0x9c,
	0x68, 0x0f, 0xa8, 0x4d, 0xae, 0xbd, 0x38, 0xe0, 0x1a, 0x54, 0xb0, 0xc9, 0xe2, 0x28, 0x6a, 0x2e,
	0xd6, 0xda, 0x2c, 0x74, 0x2b, 0x6c, 0x23, 0x7b, 0x7b, 0xe0, 0xdc, 0x4b, 0x9f, 0xa1, 0xaf, 0xd1,
	0xb7, 0xa9, 0xd4, 0x77, 0xa9, 0x6c, 0x8c, 0xc1, 0xb8, 0xa4, 0xa8, 0x87, 0x9e, 0x40, 0xf3, 0xcd,
	0xcc, 0xce, 0xb7, 0x9a, 0x35, 0xbc, 0x08, 0x22, 0x6e, 0x8f, 0x99, 0x60, 0xae, 0x60, 0x63, 0x11,
	0xd2, 0xc9, 0x84, 0xbb, 0x11, 0x9f, 0xfa, 0xad, 0x79, 0x18, 0x88, 0x00, 0x57, 0x82, 0x88, 0x5f,
	0x2b, 0x28, 0x26, 0xb9, 0x81, 0xe7, 0x05, 0x29, 0xae, 0x9c, 0xc5, 0x48, 0x81, 0xae, 0xc8, 0x9b,
	0x6e, 0x81, 0xf3, 0x89, 0xb9, 0x62, 0x39, 0xb9, 0xfc, 0x01, 0x70, 0xd2, 0x49, 0x07, 0xd6, 0x52,
	0x37, 0xe2, 0x53, 0x1f, 0xbf, 0x86, 0xc3, 0x8f, 0x8c, 0x8e, 0x59, 0x28, 0x4b, 0x0d, 0xa9, 0x59,
	0xbf, 0x92, 0x5b, 0xf1, 0x89, 0xad, 0x15, 0xb5, 0x27, 0x98, 0xd7, 0x4d, 0xe6, 0x24, 0xe5, 0x61,
	0x1d, 0x6a, 0x1e, 0xe5, 0xbe, 0x1d, 0x1f, 0x2b, 0x97, 0x12, 0xd1, 0xab, 0xbc, 0x68, 0xc3, 0x3f,
	0xc3, 0x06, 0x94, 0xfb, 0x31, 0x40, 0xaa, 0x5e, 0xfa, 0x0f, 0x3b, 0x80, 0xa3, 0xcf, 0xf3, 0xf9,
	0x8c, 0x79, 0xcc, 0x17, 0x34, 0x5c, 0x2c, 0x1d, 0xcb, 0x8d, 0x72, 0xb3, 0x7e, 0x75, 0xfd, 0x67,
	0xc7, 0xd1, 0xa6, 0x36, 0xb1, 0x3e, 0x8e, 0xb6, 0x21, 0xe5, 0xe7, 0x01, 0xa0, 0xed, 0x08, 0xf8,
	0x01, 0x6a, 0x2e, 0xf5, 0xc7, 0x7c, 0x4c, 0x05, 0x93, 0xa5, 0xe4, 0xbc, 0xb7, 0xfb, 0x6f, 0xd0,
	0x6a, 0xaf, 0xb4, 0xd9, 0x4e, 0x6b, 0x3b, 0xdc, 0x84, 0x8a, 0x43, 0x23, 0x96, 0x5e, 0xcc, 0xe9,
	0xd2, 0xf6, 0x86, 0x46, 0x6c, 0x24, 0xa8, 0xe0, 0x81, 0x4f, 0xc3, 0x05, 0x49, 0x18, 0xf8, 0x0d,
	0xd4, 0xe2, 0x5f, 0x3b, 0xf4, 0x22, 0x26, 0x97, 0x1f, 0xa1, 0x57, 0x63, 0x1a, 0xf1, 0x22, 0x86,
	0x4d, 0xa8, 0x4e, 0x59, 0xe0, 0x31, 0x11, 0x2e, 0xe4, 0x4a, 0x43, 0x6a, 0x1e, 0xed, 0x73, 0x4f,
	0x59, 0x6e, 0x3d, 0x95, 0x92, 0xcc, 0x44, 0xf9, 0x2a, 0xc1, 0x71, 0x61, 0x1d, 0xdc, 0x80, 0xfa,
	0x3c, 0x0c, 0x1c, 0xea, 0xf0, 0x19, 0x17, 0x8b, 0xa4, 0x18, 0x12, 0xd9, 0x84, 0xf0, 0x2d, 0x1c,
	0xb9, 0x33, 0x1a, 0x45, 0x7c, 0xc2, 0xdd, 0x24, 0x67, 0xba, 0xef, 0xcb, 0x65, 0x9c, 0xcd, 0x18,
	0xeb, 0x6b, 0xcb, 0x09, 0xc8, 0x96, 0xc1, 0xe5, 0xf7, 0x12, 0x54, 0x57, 0x09, 0xf1, 0x29, 0x20,
	0x5d, 0x33, 0x07, 0x9a, 0x45, 0x3e, 0xd8, 0x77, 0xc6, 0x7b, 0xc3, 0xbc, 0x37, 0xd0, 0x7f, 0x18,
	0xc3, 0x51, 0x86, 0x9a, 0x56, 0x57, 0x23, 0x48, 0xc2, 0x27, 0xf0, 0x2c, 0xc3, 0xda, 0x3d, 0xd2,
	0xee, 0x6b, 0xa8, 0x84, 0x2f, 0xe0, 0x2c, 0x03, 0x2d, 0xd2, 0x53, 0x0d, 0xbd, 0xaf, 0xd9, 0x96,
	0x39, 0x44, 0x65, 0xac, 0xc0, 0x79, 0x71, 0xd4, 0x89, 0xfd, 0x2b, 0x39, 0xaf, 0xd1, 0xed, 0x9d,
	0x4a, 0x34, 0x74, 0x80, 0x8f, 0xe1, 0x69, 0x06, 0x0e, 0xcd, 0xbe, 0x86, 0x0e, 0xf1, 0x39, 0xe0,
	0x0c, 0x22, 0x5a, 0xdb, 0x4a, 0x4c, 0xd0, 0xff, 0xb9, 0x7c, 0xc3, 0xbe, 0x6a, 0x69, 0xa8, 0x9a,
	0xdb, 0xa4, 0xd3, 0x53, 0x07, 0xa6, 0xd1, 0x41, 0x35, 0xfc, 0x1c, 0x4e, 0x32, 0x54, 0x25, 0xc4,
	0xbc, 0xb7, 0xfb, 0xda, 0x3b, 0x0b, 0x01, 0x96, 0xe1, 0x74, 0x6b, 0x40, 0x7a, 0x7a, 0xd7, 0x42,
	0xf5, 0x9c, 0x91, 0xd9, 0xb6, 0x54, 0xdd, 0x34, 0xd0, 0x13, 0xe5, 0x4b, 0x19, 0x2e, 0x76, 0x3e,
	0x08, 0x3c, 0x2b, 0x16, 0xdd, 0xf8, 0x8b, 0x87, 0xb5, 0x6e, 0x7c, 0xf1, 0xcd, 0xfd, 0xa3, 0xea,
	0x2b, 0xdf, 0x24, 0x50, 0x76, 0xc7, 0xd8, 0xa3, 0xb2, 0x0f, 0x3b, 0x2a, 0x7b, 0x55, 0xac, 0xec,
	0x6f, 0x2e, 0xe0, 0xd1, 0xee, 0xde, 0x94, 0xba, 0x92, 0x73, 0x98, 0x7c, 0x67, 0xaf, 0x7f, 0x05,
	0x00, 0x00, 0xff, 0xff, 0x95, 0x87, 0xce, 0x7b, 0xd1, 0x05, 0x00, 0x00,
}
