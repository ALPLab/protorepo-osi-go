// Code generated by protoc-gen-go. DO NOT EDIT.
// source: osi_environment.proto

package osi3

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Definition of discretized precipitation states according to [1].
// (I = Intensity of precipitation in mm per hour [mm/h])
//
// \par References:
// - [1] PAULAT, Marcus, et al. A gridded dataset of hourly precipitation
// in Germany: Its construction, climatology and application.
// Meteorologische Zeitschrift, 2008, 17. Jg. Nr. 6, S. 719-732.
//
type EnvironmentalConditions_Precipitation int32

const (
	// Intensity of precipitation is unknown (must not be used in ground
	// truth).
	//
	EnvironmentalConditions_PRECIPITATION_UNKNOWN EnvironmentalConditions_Precipitation = 0
	// Other (unspecified but known) intensity of precipitation.
	//
	EnvironmentalConditions_PRECIPITATION_OTHER EnvironmentalConditions_Precipitation = 1
	// No precipitation, when I in [0,0.1[ [mm/h]
	//
	EnvironmentalConditions_PRECIPITATION_NONE EnvironmentalConditions_Precipitation = 2
	// Very light intensity of precipitation, when I in [0.1,0.5[ [mm/h]
	//
	EnvironmentalConditions_PRECIPITATION_VERY_LIGHT EnvironmentalConditions_Precipitation = 3
	// Light intensity of precipitation, when I in [0.5,1.9[ [mm/h]
	//
	EnvironmentalConditions_PRECIPITATION_LIGHT EnvironmentalConditions_Precipitation = 4
	// Moderate intensity of precipitation, when I in [1.9,8.1[ [mm/h]
	//
	EnvironmentalConditions_PRECIPITATION_MODERATE EnvironmentalConditions_Precipitation = 5
	// Heavy intensity of precipitation, when I in [8.1,34[ [mm/h]
	//
	EnvironmentalConditions_PRECIPITATION_HEAVY EnvironmentalConditions_Precipitation = 6
	// Very heavy intensity of precipitation, when I in [34,149[ [mm/h]
	//
	EnvironmentalConditions_PRECIPITATION_VERY_HEAVY EnvironmentalConditions_Precipitation = 7
	// Extreme intensity of precipitation, when I in [149,infinity[ [mm/h]
	//
	EnvironmentalConditions_PRECIPITATION_EXTREME EnvironmentalConditions_Precipitation = 8
)

var EnvironmentalConditions_Precipitation_name = map[int32]string{
	0: "PRECIPITATION_UNKNOWN",
	1: "PRECIPITATION_OTHER",
	2: "PRECIPITATION_NONE",
	3: "PRECIPITATION_VERY_LIGHT",
	4: "PRECIPITATION_LIGHT",
	5: "PRECIPITATION_MODERATE",
	6: "PRECIPITATION_HEAVY",
	7: "PRECIPITATION_VERY_HEAVY",
	8: "PRECIPITATION_EXTREME",
}

var EnvironmentalConditions_Precipitation_value = map[string]int32{
	"PRECIPITATION_UNKNOWN":    0,
	"PRECIPITATION_OTHER":      1,
	"PRECIPITATION_NONE":       2,
	"PRECIPITATION_VERY_LIGHT": 3,
	"PRECIPITATION_LIGHT":      4,
	"PRECIPITATION_MODERATE":   5,
	"PRECIPITATION_HEAVY":      6,
	"PRECIPITATION_VERY_HEAVY": 7,
	"PRECIPITATION_EXTREME":    8,
}

func (x EnvironmentalConditions_Precipitation) String() string {
	return proto.EnumName(EnvironmentalConditions_Precipitation_name, int32(x))
}

func (EnvironmentalConditions_Precipitation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_39a796bea8ba1fa6, []int{0, 0}
}

// Definition of discretized fog states according to [2].
// The bandwidth of thick and dense fog was adjusted to fit the German StVO
// regarding rear fog lights [3].
// (V = Visibility in meters [m])
//
// Visibility is defined as the length of the atmosphere over which a beam
// of light travels before its luminous flux is reduced to 5% of its
// original value (definition used by the Meteorological Office [4]).
// This is approximately equivalent to visibility measured in terms of the
// contrast of a distant object against its background.
//
// \par References:
// - [2] SHEPARD, Frank D. Reduced visibility due to fog on the highway.
// Transportation Research Board, 1996.
// - [3] [StVO 17 chapter
// 3](https://www.stvo.de/strassenverkehrsordnung/101-17-beleuchtung)
// - [4] [Homepage of the Meteorological
// Office](http://www.metoffice.gov.uk/guide/weather/observations-guide/how-we-measure-visibility)
//
type EnvironmentalConditions_Fog int32

const (
	// Visibility is unknown (must not be used in ground truth).
	//
	EnvironmentalConditions_FOG_UNKOWN EnvironmentalConditions_Fog = 0
	// Other (unspecified but known) fog intensity.
	//
	EnvironmentalConditions_FOG_OTHER EnvironmentalConditions_Fog = 1
	// Excellent visibility, when V in [40000,infinity[ [m]
	//
	EnvironmentalConditions_FOG_EXCELLENT_VISIBILITY EnvironmentalConditions_Fog = 2
	// Good visibility, when V in [10000,40000[ [m]
	//
	EnvironmentalConditions_FOG_GOOD_VISIBILITY EnvironmentalConditions_Fog = 3
	// Moderate visibility, when V in [4000,10000[ [m]
	//
	EnvironmentalConditions_FOG_MODERATE_VISIBILITY EnvironmentalConditions_Fog = 4
	// Poor visibility, when V in [2000,4000[ [m]
	//
	EnvironmentalConditions_FOG_POOR_VISIBILITY EnvironmentalConditions_Fog = 5
	// Mist, when V in [1000,2000[ [m]
	//
	EnvironmentalConditions_FOG_MIST EnvironmentalConditions_Fog = 6
	// Fog, when V in [200,1000[ [m]
	//
	EnvironmentalConditions_FOG_LIGHT EnvironmentalConditions_Fog = 7
	// Thick fog, when V in [50,200[ [m]
	//
	EnvironmentalConditions_FOG_THICK EnvironmentalConditions_Fog = 8
	// Dense fog, when V in [0,50[ [m]
	// (allowed to use rear fog light according to [3])
	//
	EnvironmentalConditions_FOG_DENSE EnvironmentalConditions_Fog = 9
)

var EnvironmentalConditions_Fog_name = map[int32]string{
	0: "FOG_UNKOWN",
	1: "FOG_OTHER",
	2: "FOG_EXCELLENT_VISIBILITY",
	3: "FOG_GOOD_VISIBILITY",
	4: "FOG_MODERATE_VISIBILITY",
	5: "FOG_POOR_VISIBILITY",
	6: "FOG_MIST",
	7: "FOG_LIGHT",
	8: "FOG_THICK",
	9: "FOG_DENSE",
}

var EnvironmentalConditions_Fog_value = map[string]int32{
	"FOG_UNKOWN":               0,
	"FOG_OTHER":                1,
	"FOG_EXCELLENT_VISIBILITY": 2,
	"FOG_GOOD_VISIBILITY":      3,
	"FOG_MODERATE_VISIBILITY":  4,
	"FOG_POOR_VISIBILITY":      5,
	"FOG_MIST":                 6,
	"FOG_LIGHT":                7,
	"FOG_THICK":                8,
	"FOG_DENSE":                9,
}

func (x EnvironmentalConditions_Fog) String() string {
	return proto.EnumName(EnvironmentalConditions_Fog_name, int32(x))
}

func (EnvironmentalConditions_Fog) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_39a796bea8ba1fa6, []int{0, 1}
}

// Definition of discretized ambient illumination states:
// Ambient light is any light in the vehicle's environment that is not
// emitted by the vehicle itself. It can include sun/moon light, light from
// other cars, street lights etc.
//
// Lux [lx] is the SI unit of luminance or illumination of an area of exact
// one square meter, which is equal to one lumen per square meter 1 [lx] =
// 1 [lm/m^2] [5].
// The lumen [lm] is the SI derived unit of luminous flux and a measure of
// the total quantity of visible light emitted by a source. The lumen is
// defined in relation to the candela [cd] as 1 [lm] =1 [cd sr] where [sr]
// denotes steradian, the unit of solid angle used in 3D geometry analogous
// to the radian.
//
// Categorization is done based on natural day/night time illuminance levels
// [6] and standards for required lighting levels on roads [6, 7, 8, 9].
//
// \par References:
// - [5] [The NIST Reference on Constants, Units, and
// Uncertainty](https://physics.nist.gov/cuu/Units/units.html)
// - [6] [National Optical Astronomy
// Observatory](https://www.noao.edu/education/QLTkit/ACTIVITY_Documents/Safety/LightLevels_outdoor+indoor.pdf)
// - [7] [Standards for required street lighting in the
// USA](http://www.wsdot.wa.gov/research/reports/fullreports/847.1.pdf)
// - [8] [Canadian IES-RP-8 standards for road lighting - municipality of
// Saint-Gedeon-de-.
// Beauce](http://sslnet.ca/wp-content/uploads/2011/10/LTE-RT-2011-0076-Anglais.pdf)
// - [9] [European standards for road
// lighting](http://courtneystrong.com/wp-content/uploads/2017/07/css-sl1-class-and-quality-of-street-lighting.pdf)
//
type EnvironmentalConditions_AmbientIllumination int32

const (
	// Ambient illumination is unknown (must not be used in ground truth).
	//
	EnvironmentalConditions_AMBIENT_ILLUMINATION_UNKNOWN EnvironmentalConditions_AmbientIllumination = 0
	// Other (unspecified but known) ambient illumination.
	//
	EnvironmentalConditions_AMBIENT_ILLUMINATION_OTHER EnvironmentalConditions_AmbientIllumination = 1
	// Level 1 illumination in ]0.001, 0.01[ [lx]
	// E.g. Night with no artificial light.
	//
	// \note Use \c #AMBIENT_ILLUMINATION_LEVEL1 if illumination is less
	// than 0.001 [lx]
	//
	EnvironmentalConditions_AMBIENT_ILLUMINATION_LEVEL1 EnvironmentalConditions_AmbientIllumination = 2
	// Level 2 illumination in [0.01, 1[ [lx]
	// E.g. Night full moon / Deep twilight.
	//
	EnvironmentalConditions_AMBIENT_ILLUMINATION_LEVEL2 EnvironmentalConditions_AmbientIllumination = 3
	// Level 3 illumination in [1, 3[ [lx]
	// E.g. Deep to average twilight / Minimum lighting on local low
	// pedestrian conflict roads.
	//
	EnvironmentalConditions_AMBIENT_ILLUMINATION_LEVEL3 EnvironmentalConditions_AmbientIllumination = 4
	// Level 4 illumination in [3, 10[ [lx]
	// E.g. Average to full twilight / Minimum lighting on collector roads /
	// Minimum lighting on major and expressway roads with low to average
	// pedestrian conflict.
	//
	EnvironmentalConditions_AMBIENT_ILLUMINATION_LEVEL4 EnvironmentalConditions_AmbientIllumination = 5
	// Level 5 illumination in [10, 20[ [lx]
	// E.g. Minimum lighting on major and expressway roads with high
	// pedestrian conflict.
	//
	EnvironmentalConditions_AMBIENT_ILLUMINATION_LEVEL5 EnvironmentalConditions_AmbientIllumination = 6
	// Level 6 illumination in [20, 400[ [lx]
	// E.g. Roads with more lighting / Very dark overcast day to sunrise or
	// sunset on a clear day.
	//
	EnvironmentalConditions_AMBIENT_ILLUMINATION_LEVEL6 EnvironmentalConditions_AmbientIllumination = 7
	// Level 7 illumination in [400, 1000[ [lx]
	// E.g. Sunrise or sunset on a clear day / Overcast day.
	//
	EnvironmentalConditions_AMBIENT_ILLUMINATION_LEVEL7 EnvironmentalConditions_AmbientIllumination = 8
	// Level 8 illumination in [1000, 10000[ [lx]
	// E.g. Average to full daylight.
	//
	EnvironmentalConditions_AMBIENT_ILLUMINATION_LEVEL8 EnvironmentalConditions_AmbientIllumination = 9
	// Level 9 illumination in [10000, 120000[ [lx]
	// E.g. Full daylight to intense sunlight.
	//
	// \note Use \c #AMBIENT_ILLUMINATION_LEVEL9 if illumination is more
	// than 120000 [lx]
	//
	EnvironmentalConditions_AMBIENT_ILLUMINATION_LEVEL9 EnvironmentalConditions_AmbientIllumination = 10
)

var EnvironmentalConditions_AmbientIllumination_name = map[int32]string{
	0:  "AMBIENT_ILLUMINATION_UNKNOWN",
	1:  "AMBIENT_ILLUMINATION_OTHER",
	2:  "AMBIENT_ILLUMINATION_LEVEL1",
	3:  "AMBIENT_ILLUMINATION_LEVEL2",
	4:  "AMBIENT_ILLUMINATION_LEVEL3",
	5:  "AMBIENT_ILLUMINATION_LEVEL4",
	6:  "AMBIENT_ILLUMINATION_LEVEL5",
	7:  "AMBIENT_ILLUMINATION_LEVEL6",
	8:  "AMBIENT_ILLUMINATION_LEVEL7",
	9:  "AMBIENT_ILLUMINATION_LEVEL8",
	10: "AMBIENT_ILLUMINATION_LEVEL9",
}

var EnvironmentalConditions_AmbientIllumination_value = map[string]int32{
	"AMBIENT_ILLUMINATION_UNKNOWN": 0,
	"AMBIENT_ILLUMINATION_OTHER":   1,
	"AMBIENT_ILLUMINATION_LEVEL1":  2,
	"AMBIENT_ILLUMINATION_LEVEL2":  3,
	"AMBIENT_ILLUMINATION_LEVEL3":  4,
	"AMBIENT_ILLUMINATION_LEVEL4":  5,
	"AMBIENT_ILLUMINATION_LEVEL5":  6,
	"AMBIENT_ILLUMINATION_LEVEL6":  7,
	"AMBIENT_ILLUMINATION_LEVEL7":  8,
	"AMBIENT_ILLUMINATION_LEVEL8":  9,
	"AMBIENT_ILLUMINATION_LEVEL9":  10,
}

func (x EnvironmentalConditions_AmbientIllumination) String() string {
	return proto.EnumName(EnvironmentalConditions_AmbientIllumination_name, int32(x))
}

func (EnvironmentalConditions_AmbientIllumination) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_39a796bea8ba1fa6, []int{0, 2}
}

//
// \brief The conditions of the environment.
//
// Definition of light, weather conditions and other environmental conditions.
//
type EnvironmentalConditions struct {
	// The ambient illumination of the environment.
	//
	AmbientIllumination EnvironmentalConditions_AmbientIllumination `protobuf:"varint,1,opt,name=ambient_illumination,json=ambientIllumination,proto3,enum=osi3.EnvironmentalConditions_AmbientIllumination" json:"ambient_illumination,omitempty"`
	// The time of day.
	//
	TimeOfDay *EnvironmentalConditions_TimeOfDay `protobuf:"bytes,2,opt,name=time_of_day,json=timeOfDay,proto3" json:"time_of_day,omitempty"`
	// Atmospheric pressure in Pascal at z=0.0 in world frame (about 101325
	// [Pa]).
	//
	// Unit: [Pa]
	//
	AtmosphericPressure float64 `protobuf:"fixed64,3,opt,name=atmospheric_pressure,json=atmosphericPressure,proto3" json:"atmospheric_pressure,omitempty"`
	// Temperature in Kelvin at z=0.0 in world frame.
	//
	// Unit: [K]
	//
	Temperature float64 `protobuf:"fixed64,4,opt,name=temperature,proto3" json:"temperature,omitempty"`
	// Relative humidity in at z=0.0 in world frame.
	//
	// Note that physically more relevant measures, like absolute or specific
	// humidity can be easily derived from relative_humidity, given that the
	// temperature and atmospheric_pressure are known.
	//
	// Unit: [%]
	RelativeHumidity float64 `protobuf:"fixed64,5,opt,name=relative_humidity,json=relativeHumidity,proto3" json:"relative_humidity,omitempty"`
	// Description of the precipitation.
	//
	Precipitation EnvironmentalConditions_Precipitation `protobuf:"varint,6,opt,name=precipitation,proto3,enum=osi3.EnvironmentalConditions_Precipitation" json:"precipitation,omitempty"`
	// Description of the fog.
	//
	Fog                  EnvironmentalConditions_Fog `protobuf:"varint,7,opt,name=fog,proto3,enum=osi3.EnvironmentalConditions_Fog" json:"fog,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *EnvironmentalConditions) Reset()         { *m = EnvironmentalConditions{} }
func (m *EnvironmentalConditions) String() string { return proto.CompactTextString(m) }
func (*EnvironmentalConditions) ProtoMessage()    {}
func (*EnvironmentalConditions) Descriptor() ([]byte, []int) {
	return fileDescriptor_39a796bea8ba1fa6, []int{0}
}

func (m *EnvironmentalConditions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnvironmentalConditions.Unmarshal(m, b)
}
func (m *EnvironmentalConditions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnvironmentalConditions.Marshal(b, m, deterministic)
}
func (m *EnvironmentalConditions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnvironmentalConditions.Merge(m, src)
}
func (m *EnvironmentalConditions) XXX_Size() int {
	return xxx_messageInfo_EnvironmentalConditions.Size(m)
}
func (m *EnvironmentalConditions) XXX_DiscardUnknown() {
	xxx_messageInfo_EnvironmentalConditions.DiscardUnknown(m)
}

var xxx_messageInfo_EnvironmentalConditions proto.InternalMessageInfo

func (m *EnvironmentalConditions) GetAmbientIllumination() EnvironmentalConditions_AmbientIllumination {
	if m != nil {
		return m.AmbientIllumination
	}
	return EnvironmentalConditions_AMBIENT_ILLUMINATION_UNKNOWN
}

func (m *EnvironmentalConditions) GetTimeOfDay() *EnvironmentalConditions_TimeOfDay {
	if m != nil {
		return m.TimeOfDay
	}
	return nil
}

func (m *EnvironmentalConditions) GetAtmosphericPressure() float64 {
	if m != nil {
		return m.AtmosphericPressure
	}
	return 0
}

func (m *EnvironmentalConditions) GetTemperature() float64 {
	if m != nil {
		return m.Temperature
	}
	return 0
}

func (m *EnvironmentalConditions) GetRelativeHumidity() float64 {
	if m != nil {
		return m.RelativeHumidity
	}
	return 0
}

func (m *EnvironmentalConditions) GetPrecipitation() EnvironmentalConditions_Precipitation {
	if m != nil {
		return m.Precipitation
	}
	return EnvironmentalConditions_PRECIPITATION_UNKNOWN
}

func (m *EnvironmentalConditions) GetFog() EnvironmentalConditions_Fog {
	if m != nil {
		return m.Fog
	}
	return EnvironmentalConditions_FOG_UNKOWN
}

//
// \brief The time of day at the location of the vehicle.
//
type EnvironmentalConditions_TimeOfDay struct {
	// The number of seconds [s] that have passed since midnight local time.
	// Used for determining the current state of the circadian rhythm of a
	// driver.
	//
	// \note No changes of daylight saving time or time zones are
	// considered.
	//
	SecondsSinceMidnight uint32   `protobuf:"varint,1,opt,name=seconds_since_midnight,json=secondsSinceMidnight,proto3" json:"seconds_since_midnight,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EnvironmentalConditions_TimeOfDay) Reset()         { *m = EnvironmentalConditions_TimeOfDay{} }
func (m *EnvironmentalConditions_TimeOfDay) String() string { return proto.CompactTextString(m) }
func (*EnvironmentalConditions_TimeOfDay) ProtoMessage()    {}
func (*EnvironmentalConditions_TimeOfDay) Descriptor() ([]byte, []int) {
	return fileDescriptor_39a796bea8ba1fa6, []int{0, 0}
}

func (m *EnvironmentalConditions_TimeOfDay) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnvironmentalConditions_TimeOfDay.Unmarshal(m, b)
}
func (m *EnvironmentalConditions_TimeOfDay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnvironmentalConditions_TimeOfDay.Marshal(b, m, deterministic)
}
func (m *EnvironmentalConditions_TimeOfDay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnvironmentalConditions_TimeOfDay.Merge(m, src)
}
func (m *EnvironmentalConditions_TimeOfDay) XXX_Size() int {
	return xxx_messageInfo_EnvironmentalConditions_TimeOfDay.Size(m)
}
func (m *EnvironmentalConditions_TimeOfDay) XXX_DiscardUnknown() {
	xxx_messageInfo_EnvironmentalConditions_TimeOfDay.DiscardUnknown(m)
}

var xxx_messageInfo_EnvironmentalConditions_TimeOfDay proto.InternalMessageInfo

func (m *EnvironmentalConditions_TimeOfDay) GetSecondsSinceMidnight() uint32 {
	if m != nil {
		return m.SecondsSinceMidnight
	}
	return 0
}

func init() {
	proto.RegisterEnum("osi3.EnvironmentalConditions_Precipitation", EnvironmentalConditions_Precipitation_name, EnvironmentalConditions_Precipitation_value)
	proto.RegisterEnum("osi3.EnvironmentalConditions_Fog", EnvironmentalConditions_Fog_name, EnvironmentalConditions_Fog_value)
	proto.RegisterEnum("osi3.EnvironmentalConditions_AmbientIllumination", EnvironmentalConditions_AmbientIllumination_name, EnvironmentalConditions_AmbientIllumination_value)
	proto.RegisterType((*EnvironmentalConditions)(nil), "osi3.EnvironmentalConditions")
	proto.RegisterType((*EnvironmentalConditions_TimeOfDay)(nil), "osi3.EnvironmentalConditions.TimeOfDay")
}

func init() { proto.RegisterFile("osi_environment.proto", fileDescriptor_39a796bea8ba1fa6) }

var fileDescriptor_39a796bea8ba1fa6 = []byte{
	// 623 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x94, 0xdd, 0x6e, 0xda, 0x4a,
	0x10, 0x80, 0x8f, 0x31, 0xbf, 0x93, 0x43, 0xb4, 0x67, 0xc9, 0x8f, 0x4f, 0x12, 0x9d, 0x43, 0xb9,
	0x69, 0xa4, 0x48, 0x48, 0x09, 0xe9, 0xdf, 0x25, 0x81, 0x0d, 0xac, 0x62, 0x6c, 0x6a, 0x1c, 0x9a,
	0x5c, 0x59, 0x0e, 0x6c, 0xc8, 0x4a, 0xd8, 0x8b, 0xec, 0x4d, 0xa4, 0xdc, 0xe5, 0x01, 0xfb, 0x24,
	0x7d, 0x8a, 0xca, 0x06, 0xb7, 0xa6, 0x24, 0xbe, 0x63, 0xe6, 0xfb, 0x66, 0x98, 0x99, 0x15, 0xc0,
	0xae, 0x08, 0xb9, 0xc3, 0xfc, 0x27, 0x1e, 0x08, 0xdf, 0x63, 0xbe, 0x6c, 0x2e, 0x02, 0x21, 0x05,
	0xce, 0x8b, 0x90, 0xb7, 0x1a, 0x3f, 0x00, 0xf6, 0xc9, 0x6f, 0xe6, 0xce, 0x3b, 0xc2, 0x9f, 0x72,
	0xc9, 0x85, 0x1f, 0xe2, 0x29, 0xec, 0xb8, 0xde, 0x1d, 0x67, 0xbe, 0x74, 0xf8, 0x7c, 0xfe, 0xe8,
	0x71, 0xdf, 0x8d, 0x80, 0xa6, 0xd4, 0x95, 0xe3, 0xed, 0xb3, 0xd3, 0x66, 0xd4, 0xa0, 0xf9, 0x46,
	0x71, 0xb3, 0xbd, 0xac, 0xa4, 0xa9, 0x42, 0xab, 0xe6, 0x6e, 0x26, 0x71, 0x0f, 0xb6, 0x24, 0xf7,
	0x98, 0x23, 0xee, 0x9d, 0xa9, 0xfb, 0xac, 0xe5, 0xea, 0xca, 0xf1, 0xd6, 0xd9, 0xfb, 0xec, 0xe6,
	0x36, 0xf7, 0x98, 0x79, 0xdf, 0x75, 0x9f, 0xad, 0x8a, 0x4c, 0x3e, 0xe2, 0x53, 0xd8, 0x71, 0xa5,
	0x27, 0xc2, 0xc5, 0x03, 0x0b, 0xf8, 0xc4, 0x59, 0x04, 0x2c, 0x0c, 0x1f, 0x03, 0xa6, 0xa9, 0x75,
	0xe5, 0x58, 0xb1, 0x6a, 0x29, 0x36, 0x5c, 0x21, 0x5c, 0x87, 0x2d, 0xc9, 0xbc, 0x05, 0x0b, 0x5c,
	0x19, 0x99, 0xf9, 0xd8, 0x4c, 0xa7, 0xf0, 0x09, 0xfc, 0x13, 0xb0, 0xb9, 0x2b, 0xf9, 0x13, 0x73,
	0x1e, 0x1e, 0x3d, 0x3e, 0xe5, 0xf2, 0x59, 0x2b, 0xc4, 0x1e, 0x4a, 0x40, 0x7f, 0x95, 0xc7, 0x5f,
	0xa1, 0xba, 0x08, 0xd8, 0x84, 0x2f, 0xb8, 0x5c, 0x5e, 0xaa, 0x18, 0x5f, 0xea, 0x24, 0x7b, 0x99,
	0x61, 0xba, 0xc4, 0x5a, 0xef, 0x80, 0x5b, 0xa0, 0xde, 0x8b, 0x99, 0x56, 0x8a, 0x1b, 0xbd, 0xcb,
	0x6e, 0x74, 0x29, 0x66, 0x56, 0x64, 0x1f, 0xb4, 0xa1, 0xf2, 0xeb, 0x42, 0xf8, 0x1c, 0xf6, 0x42,
	0x36, 0x11, 0xfe, 0x34, 0x74, 0x42, 0xee, 0x4f, 0x98, 0xe3, 0xf1, 0xa9, 0xcf, 0x67, 0x0f, 0x32,
	0x7e, 0xc7, 0xaa, 0xb5, 0xb3, 0xa2, 0xa3, 0x08, 0x0e, 0x56, 0xac, 0xf1, 0x92, 0x83, 0xea, 0xda,
	0x60, 0xf8, 0x5f, 0xd8, 0x1d, 0x5a, 0xa4, 0x43, 0x87, 0xd4, 0x6e, 0xdb, 0xd4, 0x34, 0x9c, 0x6b,
	0xe3, 0xca, 0x30, 0xbf, 0x19, 0xe8, 0x2f, 0xbc, 0x0f, 0xb5, 0x75, 0x64, 0xda, 0x7d, 0x62, 0x21,
	0x05, 0xef, 0x01, 0x5e, 0x07, 0x86, 0x69, 0x10, 0x94, 0xc3, 0x47, 0xa0, 0xad, 0xe7, 0xc7, 0xc4,
	0xba, 0x75, 0x74, 0xda, 0xeb, 0xdb, 0x48, 0xdd, 0x6c, 0xb7, 0x04, 0x79, 0x7c, 0x00, 0x7b, 0xeb,
	0x60, 0x60, 0x76, 0x89, 0xd5, 0xb6, 0x09, 0x2a, 0x6c, 0x16, 0xf5, 0x49, 0x7b, 0x7c, 0x8b, 0x8a,
	0x6f, 0x7c, 0xd7, 0x92, 0x96, 0x36, 0xb7, 0x22, 0x37, 0xb6, 0x45, 0x06, 0x04, 0x95, 0x1b, 0xdf,
	0x15, 0x50, 0x2f, 0xc5, 0x0c, 0x6f, 0x03, 0x5c, 0x9a, 0xbd, 0x68, 0xdd, 0xe5, 0xb6, 0x55, 0xa8,
	0x44, 0x71, 0xb2, 0xe3, 0x11, 0x68, 0x51, 0x48, 0x6e, 0x3a, 0x44, 0xd7, 0x89, 0x61, 0x3b, 0x63,
	0x3a, 0xa2, 0x17, 0x54, 0xa7, 0xf6, 0x2d, 0xca, 0x45, 0x63, 0x45, 0xb4, 0x67, 0x9a, 0xdd, 0x34,
	0x50, 0xf1, 0x21, 0xec, 0x47, 0x20, 0xd9, 0x20, 0x0d, 0xf3, 0x49, 0xd5, 0xd0, 0x34, 0xad, 0x34,
	0x28, 0xe0, 0xbf, 0xa1, 0x1c, 0x57, 0xd1, 0x91, 0x8d, 0x8a, 0xc9, 0x24, 0xcb, 0xf3, 0x94, 0x92,
	0xd0, 0xee, 0xd3, 0xce, 0x15, 0x2a, 0x27, 0x61, 0x97, 0x18, 0x23, 0x82, 0x2a, 0x8d, 0x17, 0x15,
	0x6a, 0xaf, 0xfc, 0x28, 0x71, 0x1d, 0x8e, 0xda, 0x83, 0x0b, 0x1a, 0x4d, 0x4e, 0x75, 0xfd, 0x7a,
	0x40, 0x8d, 0x3f, 0x9f, 0xf7, 0x3f, 0x38, 0x78, 0xd5, 0x48, 0x2e, 0xf0, 0x3f, 0x1c, 0xbe, 0xca,
	0x75, 0x32, 0x26, 0xfa, 0x29, 0xca, 0x65, 0x0b, 0x67, 0x48, 0xcd, 0x16, 0x5a, 0x28, 0x9f, 0x2d,
	0x9c, 0xa3, 0x42, 0xb6, 0xf0, 0x01, 0x15, 0xb3, 0x85, 0x8f, 0xa8, 0x94, 0x2d, 0x7c, 0x42, 0xe5,
	0x6c, 0xe1, 0x33, 0xaa, 0x64, 0x0b, 0x5f, 0x10, 0x5c, 0xe4, 0xfa, 0xca, 0x5d, 0x31, 0xfe, 0xf7,
	0x6d, 0xfd, 0x0c, 0x00, 0x00, 0xff, 0xff, 0x77, 0x15, 0x3c, 0x1a, 0x96, 0x05, 0x00, 0x00,
}
