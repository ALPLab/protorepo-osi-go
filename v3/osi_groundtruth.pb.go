// Code generated by protoc-gen-go. DO NOT EDIT.
// source: osi_groundtruth.proto

package osi3

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

//
// \brief The ground truth information from the simulation environment.
//
// This ground truth information is supposed to describe the whole simulated
// environment around any simulated vehicle. For each simulated host vehicle
// (there may be one or multiple), define an area around the vehicle which
// is greater than the combined field of views (FOV) of all obstructed sensors
// in the vehicle. The ground truth data is supposed to describe the convex
// hull of all such areas w.r.t. a global simulation coordinate system.
//
// The simulation coordinate system may change during the simulation if and
// only if all coordinates w.r.t. this coordinate system are also changed.
//
// The data has to be sent at a rate defined by the receiving partner. When
// sending, values with default values might be left default in order to improve
// performance.
//
// To provide a complete interface, all fields of all contained messages must be
// properly set unless specifically stated in the field's definition that the
// field may remain unset.
//
// In enums (e.g. types) the unknown (first / default) value is not allowed to
// be used in the ground truth interface.
//
type GroundTruth struct {
	// The interface version used by the sender (i.e. the simulation
	// environment).
	//
	Version *InterfaceVersion `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// The data timestamp of the simulation environment. The zero time point is
	// arbitrary but must be identical for all messages.
	// Recommendation: Zero time point for start point of the simulation.
	//
	// \note Zero time point does not need to coincide with the UNIX epoch.
	//
	// \note For ground truth data this timestamp coincides both with the
	// notional simulation time the data applies to and the time it was sent
	// (there is no inherent latency for ground truth data, as opposed to
	// sensor data).
	//
	Timestamp *Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The ID of the host vehicle object referencing to \c MovingObject .
	//
	// \note This ID has to be filled and is not optional!
	//
	HostVehicleId *Identifier `protobuf:"bytes,3,opt,name=host_vehicle_id,json=hostVehicleId,proto3" json:"host_vehicle_id,omitempty"`
	// The list of stationary objects (excluding traffic signs and traffic
	// lights).
	//
	// \note OSI uses singular instead of plural for repeated field names.
	//
	StationaryObject []*StationaryObject `protobuf:"bytes,4,rep,name=stationary_object,json=stationaryObject,proto3" json:"stationary_object,omitempty"`
	// The list of all other moving objects including all (host) vehicles.
	//
	// \note OSI uses singular instead of plural for repeated field names.
	//
	MovingObject []*MovingObject `protobuf:"bytes,5,rep,name=moving_object,json=movingObject,proto3" json:"moving_object,omitempty"`
	// The list of traffic signs.
	//
	// \note OSI uses singular instead of plural for repeated field names.
	//
	TrafficSign []*TrafficSign `protobuf:"bytes,6,rep,name=traffic_sign,json=trafficSign,proto3" json:"traffic_sign,omitempty"`
	// The list of traffic lights.
	//
	// \note OSI uses singular instead of plural for repeated field names.
	//
	TrafficLight []*TrafficLight `protobuf:"bytes,7,rep,name=traffic_light,json=trafficLight,proto3" json:"traffic_light,omitempty"`
	// The list of road surface markings (lane markings are excluded and
	// defined as \c LaneBoundary).
	//
	// \note OSI uses singular instead of plural for repeated field names.
	//
	RoadMarking []*RoadMarking `protobuf:"bytes,8,rep,name=road_marking,json=roadMarking,proto3" json:"road_marking,omitempty"`
	// The list of lane boundaries.
	//
	// \note OSI uses singular instead of plural for repeated field names.
	//
	LaneBoundary []*LaneBoundary `protobuf:"bytes,9,rep,name=lane_boundary,json=laneBoundary,proto3" json:"lane_boundary,omitempty"`
	// The list of lanes forming a road network.
	//
	// \note OSI uses singular instead of plural for repeated field names.
	//
	Lane []*Lane `protobuf:"bytes,10,rep,name=lane,proto3" json:"lane,omitempty"`
	// The list of passengers in the (host) vehicle(s).
	//
	// \note OSI uses singular instead of plural for repeated field names.
	//
	Occupant []*Occupant `protobuf:"bytes,11,rep,name=occupant,proto3" json:"occupant,omitempty"`
	// Conditions of the environment.
	//
	EnvironmentalConditions *EnvironmentalConditions `protobuf:"bytes,12,opt,name=environmental_conditions,json=environmentalConditions,proto3" json:"environmental_conditions,omitempty"`
	// The ISO country code in 3 digit numeric format according to:
	// ISO Code 3166/1 [1,2].
	// E.g. Germany = 276, USA = 840.
	//
	// Unit: []
	//
	// \par References:
	// - [1] [International Standard ISO 3166-1: Codes for the representation of
	// names of countries and their subdivisions - Part 1: Country codes, third
	// ed., 2013] (https://www.iso.org/obp/ui/)
	// - [2] [Wikipedia ISO 3166/1] (https://en.wikipedia.org/wiki/ISO_3166-1)
	//
	CountryCode uint32 `protobuf:"varint,13,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	// Projection string that allows to transform all coordinates in GroundTruth
	// into a different cartographic projection.
	//
	// The string follows the PROJ.4 project rules for projections [1].
	//
	// \par References:
	// - [1] [Proj.4 Projections] (https://proj4.org/usage/projections.html)
	//
	ProjString           string   `protobuf:"bytes,14,opt,name=proj_string,json=projString,proto3" json:"proj_string,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroundTruth) Reset()         { *m = GroundTruth{} }
func (m *GroundTruth) String() string { return proto.CompactTextString(m) }
func (*GroundTruth) ProtoMessage()    {}
func (*GroundTruth) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5d45039d36b8fad, []int{0}
}

func (m *GroundTruth) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GroundTruth.Unmarshal(m, b)
}
func (m *GroundTruth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GroundTruth.Marshal(b, m, deterministic)
}
func (m *GroundTruth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroundTruth.Merge(m, src)
}
func (m *GroundTruth) XXX_Size() int {
	return xxx_messageInfo_GroundTruth.Size(m)
}
func (m *GroundTruth) XXX_DiscardUnknown() {
	xxx_messageInfo_GroundTruth.DiscardUnknown(m)
}

var xxx_messageInfo_GroundTruth proto.InternalMessageInfo

func (m *GroundTruth) GetVersion() *InterfaceVersion {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *GroundTruth) GetTimestamp() *Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *GroundTruth) GetHostVehicleId() *Identifier {
	if m != nil {
		return m.HostVehicleId
	}
	return nil
}

func (m *GroundTruth) GetStationaryObject() []*StationaryObject {
	if m != nil {
		return m.StationaryObject
	}
	return nil
}

func (m *GroundTruth) GetMovingObject() []*MovingObject {
	if m != nil {
		return m.MovingObject
	}
	return nil
}

func (m *GroundTruth) GetTrafficSign() []*TrafficSign {
	if m != nil {
		return m.TrafficSign
	}
	return nil
}

func (m *GroundTruth) GetTrafficLight() []*TrafficLight {
	if m != nil {
		return m.TrafficLight
	}
	return nil
}

func (m *GroundTruth) GetRoadMarking() []*RoadMarking {
	if m != nil {
		return m.RoadMarking
	}
	return nil
}

func (m *GroundTruth) GetLaneBoundary() []*LaneBoundary {
	if m != nil {
		return m.LaneBoundary
	}
	return nil
}

func (m *GroundTruth) GetLane() []*Lane {
	if m != nil {
		return m.Lane
	}
	return nil
}

func (m *GroundTruth) GetOccupant() []*Occupant {
	if m != nil {
		return m.Occupant
	}
	return nil
}

func (m *GroundTruth) GetEnvironmentalConditions() *EnvironmentalConditions {
	if m != nil {
		return m.EnvironmentalConditions
	}
	return nil
}

func (m *GroundTruth) GetCountryCode() uint32 {
	if m != nil {
		return m.CountryCode
	}
	return 0
}

func (m *GroundTruth) GetProjString() string {
	if m != nil {
		return m.ProjString
	}
	return ""
}

func init() {
	proto.RegisterType((*GroundTruth)(nil), "osi3.GroundTruth")
}

func init() { proto.RegisterFile("osi_groundtruth.proto", fileDescriptor_f5d45039d36b8fad) }

var fileDescriptor_f5d45039d36b8fad = []byte{
	// 498 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x52, 0x5d, 0x6b, 0xdb, 0x30,
	0x14, 0xc5, 0x6d, 0xfa, 0x11, 0xd9, 0x49, 0x13, 0xc1, 0x3a, 0x51, 0xd8, 0x96, 0xed, 0x29, 0x0c,
	0x16, 0xc6, 0x3a, 0xd8, 0x9e, 0x1b, 0xc6, 0x56, 0x68, 0x29, 0x28, 0xa5, 0xec, 0xcd, 0x28, 0xb2,
	0xe2, 0xa8, 0xb3, 0x75, 0x83, 0xa4, 0x04, 0xf2, 0xa7, 0xf7, 0x1b, 0x86, 0x64, 0x39, 0xd6, 0xc6,
	0x1e, 0xef, 0xf9, 0xb8, 0xc7, 0xd7, 0x47, 0xe8, 0x05, 0x18, 0x99, 0x97, 0x1a, 0xb6, 0xaa, 0xb0,
	0x7a, 0x6b, 0xd7, 0xb3, 0x8d, 0x06, 0x0b, 0xb8, 0x07, 0x46, 0x5e, 0x5f, 0x8d, 0x1d, 0xb9, 0x13,
	0xda, 0x48, 0x50, 0x0d, 0x71, 0x35, 0x72, 0x10, 0x87, 0xba, 0x3e, 0x20, 0x7e, 0x83, 0x50, 0x3b,
	0xa9, 0x41, 0xd5, 0x42, 0xd9, 0x18, 0xb6, 0x9a, 0xad, 0x56, 0x92, 0x1b, 0x59, 0xb6, 0xea, 0xcb,
	0x08, 0xae, 0x64, 0xb9, 0xfe, 0x4b, 0xae, 0x81, 0x15, 0x35, 0xd3, 0xbf, 0xa4, 0x2a, 0x03, 0x3c,
	0x74, 0x70, 0xc5, 0x94, 0x88, 0xe3, 0x61, 0xf9, 0x2c, 0x78, 0x6b, 0xc4, 0x1e, 0xe1, 0x7c, 0xbb,
	0x61, 0x6d, 0xf6, 0xbb, 0xdf, 0x27, 0x28, 0xfd, 0xee, 0x6f, 0x7a, 0x74, 0x37, 0xe1, 0x8f, 0xe8,
	0x2c, 0x5c, 0x41, 0x92, 0x49, 0x32, 0x4d, 0x3f, 0x5d, 0xce, 0xdc, 0x7d, 0xb3, 0x5b, 0x65, 0x85,
	0x5e, 0x31, 0x2e, 0x9e, 0x1a, 0x96, 0xb6, 0x32, 0xfc, 0x01, 0xf5, 0xad, 0xac, 0x85, 0xb1, 0xac,
	0xde, 0x90, 0x23, 0xef, 0xb9, 0x68, 0x3c, 0x8f, 0x2d, 0x4c, 0x3b, 0x05, 0xfe, 0x8a, 0x2e, 0xd6,
	0x60, 0x6c, 0xbe, 0x13, 0x6b, 0xc9, 0x2b, 0x91, 0xcb, 0x82, 0x1c, 0x7b, 0xd3, 0x28, 0x04, 0x15,
	0x42, 0x59, 0xb9, 0x92, 0x42, 0xd3, 0x81, 0x13, 0x3e, 0x35, 0xba, 0xdb, 0x02, 0xcf, 0xd1, 0xd8,
	0x58, 0x66, 0x25, 0x28, 0xa6, 0xf7, 0xe1, 0x32, 0xd2, 0x9b, 0x1c, 0x77, 0x1f, 0xb9, 0x38, 0xd0,
	0x0f, 0x9e, 0xa5, 0x23, 0xf3, 0x0f, 0x82, 0xbf, 0xa0, 0x41, 0x0d, 0x3b, 0xa9, 0xca, 0x76, 0xc1,
	0x89, 0x5f, 0x80, 0x9b, 0x05, 0xf7, 0x9e, 0x0a, 0xe6, 0xac, 0x8e, 0x26, 0xfc, 0x19, 0x65, 0xa1,
	0x8b, 0xdc, 0x75, 0x44, 0x4e, 0xbd, 0x6f, 0x1c, 0x2e, 0x6d, 0x98, 0x85, 0x2c, 0x15, 0x4d, 0x6d,
	0x37, 0xb8, 0xb8, 0xd6, 0xe5, 0x2b, 0x24, 0x67, 0x71, 0x5c, 0xb0, 0xdd, 0x39, 0x86, 0xb6, 0xeb,
	0xfd, 0xe4, 0xe2, 0x5c, 0xc5, 0x79, 0xe8, 0x98, 0x9c, 0xc7, 0x71, 0x14, 0x58, 0x71, 0xdf, 0x10,
	0x34, 0xd5, 0xdd, 0xe0, 0xe2, 0xdc, 0x0b, 0xc8, 0x97, 0xae, 0x50, 0xa6, 0xf7, 0xa4, 0x1f, 0xc7,
	0xdd, 0x31, 0x25, 0x6e, 0x02, 0x43, 0xb3, 0x2a, 0x9a, 0xf0, 0x6b, 0xd4, 0x73, 0x33, 0x41, 0x5e,
	0x8f, 0x3a, 0x3d, 0xf5, 0x38, 0x7e, 0x8f, 0xce, 0xdb, 0x87, 0x43, 0x52, 0xaf, 0x19, 0x36, 0x9a,
	0x87, 0x80, 0xd2, 0x03, 0x8f, 0x7f, 0x22, 0x12, 0xbd, 0x71, 0x56, 0xe5, 0x1c, 0x54, 0x21, 0x5d,
	0x0d, 0x86, 0x64, 0xbe, 0xea, 0x57, 0x8d, 0xf7, 0x5b, 0xac, 0x9a, 0x1f, 0x44, 0xf4, 0xa5, 0xf8,
	0x3f, 0x81, 0xdf, 0xa2, 0x8c, 0xc3, 0x56, 0x59, 0xbd, 0xcf, 0x39, 0x14, 0x82, 0x0c, 0x26, 0xc9,
	0x74, 0x40, 0xd3, 0x80, 0xcd, 0xa1, 0x10, 0xf8, 0x0d, 0x4a, 0x37, 0x1a, 0x9e, 0x73, 0x63, 0xb5,
	0xfb, 0x6d, 0xc3, 0x49, 0x32, 0xed, 0x53, 0xe4, 0xa0, 0x85, 0x47, 0x6e, 0x8e, 0x7e, 0x24, 0xcb,
	0x53, 0xff, 0xf6, 0xaf, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x31, 0xe7, 0xf2, 0xc5, 0xd2, 0x03,
	0x00, 0x00,
}
