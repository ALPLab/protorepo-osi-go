// Code generated by protoc-gen-go. DO NOT EDIT.
// source: osi_object.proto

package osi3

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Definition of object types.
//
type StationaryObject_Classification_Type int32

const (
	// Type of the object is unknown (must not be used in ground truth).
	//
	StationaryObject_Classification_TYPE_UNKNOWN StationaryObject_Classification_Type = 0
	// Other (unspecified but known) type of object.
	//
	StationaryObject_Classification_TYPE_OTHER StationaryObject_Classification_Type = 1
	// Object is a bridge.
	//
	StationaryObject_Classification_TYPE_BRIDGE StationaryObject_Classification_Type = 2
	// Object is a building.
	//
	StationaryObject_Classification_TYPE_BUILDING StationaryObject_Classification_Type = 3
	// Object is a pole (e.g. from a traffic light).
	//
	StationaryObject_Classification_TYPE_POLE StationaryObject_Classification_Type = 4
	// Object is a pylon.
	//
	StationaryObject_Classification_TYPE_PYLON StationaryObject_Classification_Type = 5
	// Object is a delineator (e.g. at a construction site).
	//
	StationaryObject_Classification_TYPE_DELINEATOR StationaryObject_Classification_Type = 6
	// Object is a tree.
	//
	StationaryObject_Classification_TYPE_TREE StationaryObject_Classification_Type = 7
	// Object is a barrier.
	//
	StationaryObject_Classification_TYPE_BARRIER StationaryObject_Classification_Type = 8
	// Object is vegetation.
	//
	StationaryObject_Classification_TYPE_VEGETATION StationaryObject_Classification_Type = 9
	// Object is a curbstone.
	//
	StationaryObject_Classification_TYPE_CURBSTONE StationaryObject_Classification_Type = 10
	// Object is a wall.
	//
	StationaryObject_Classification_TYPE_WALL StationaryObject_Classification_Type = 11
	// Landmarks corresponding to vertical structures in the
	// environment.
	//
	StationaryObject_Classification_TYPE_VERTICAL_STRUCTURE StationaryObject_Classification_Type = 12
	// Landmarks corresponding to rectangular structures in the
	// environment, like walls.
	//
	StationaryObject_Classification_TYPE_RECTANGULAR_STRUCTURE StationaryObject_Classification_Type = 13
	// Landmarks corresponding to overhead structures in the
	// environment, like sign bridges.
	//
	StationaryObject_Classification_TYPE_OVERHEAD_STRUCTURE StationaryObject_Classification_Type = 14
	// Landmarks corresponding to light sources or reflective structures
	// in the environment, like street lights or reflective poles on the
	// road boarder.
	//
	StationaryObject_Classification_TYPE_REFLECTIVE_STRUCTURE StationaryObject_Classification_Type = 15
	// Landmarks corresponding to construction site elements in the
	// environment, like cones or beacons.
	//
	StationaryObject_Classification_TYPE_CONSTRUCTION_SITE_ELEMENT StationaryObject_Classification_Type = 16
)

var StationaryObject_Classification_Type_name = map[int32]string{
	0:  "TYPE_UNKNOWN",
	1:  "TYPE_OTHER",
	2:  "TYPE_BRIDGE",
	3:  "TYPE_BUILDING",
	4:  "TYPE_POLE",
	5:  "TYPE_PYLON",
	6:  "TYPE_DELINEATOR",
	7:  "TYPE_TREE",
	8:  "TYPE_BARRIER",
	9:  "TYPE_VEGETATION",
	10: "TYPE_CURBSTONE",
	11: "TYPE_WALL",
	12: "TYPE_VERTICAL_STRUCTURE",
	13: "TYPE_RECTANGULAR_STRUCTURE",
	14: "TYPE_OVERHEAD_STRUCTURE",
	15: "TYPE_REFLECTIVE_STRUCTURE",
	16: "TYPE_CONSTRUCTION_SITE_ELEMENT",
}

var StationaryObject_Classification_Type_value = map[string]int32{
	"TYPE_UNKNOWN":                   0,
	"TYPE_OTHER":                     1,
	"TYPE_BRIDGE":                    2,
	"TYPE_BUILDING":                  3,
	"TYPE_POLE":                      4,
	"TYPE_PYLON":                     5,
	"TYPE_DELINEATOR":                6,
	"TYPE_TREE":                      7,
	"TYPE_BARRIER":                   8,
	"TYPE_VEGETATION":                9,
	"TYPE_CURBSTONE":                 10,
	"TYPE_WALL":                      11,
	"TYPE_VERTICAL_STRUCTURE":        12,
	"TYPE_RECTANGULAR_STRUCTURE":     13,
	"TYPE_OVERHEAD_STRUCTURE":        14,
	"TYPE_REFLECTIVE_STRUCTURE":      15,
	"TYPE_CONSTRUCTION_SITE_ELEMENT": 16,
}

func (x StationaryObject_Classification_Type) String() string {
	return proto.EnumName(StationaryObject_Classification_Type_name, int32(x))
}

func (StationaryObject_Classification_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e210da66c4c2777e, []int{0, 0, 0}
}

// Definition of material types.
//
type StationaryObject_Classification_Material int32

const (
	// Type of the material is unknown (must not be used in ground
	// truth).
	//
	StationaryObject_Classification_MATERIAL_UNKNOWN StationaryObject_Classification_Material = 0
	// Other (unspecified but known) type of material.
	//
	StationaryObject_Classification_MATERIAL_OTHER StationaryObject_Classification_Material = 1
	// Wooden structure.
	//
	StationaryObject_Classification_MATERIAL_WOOD StationaryObject_Classification_Material = 2
	// Plastic structure.
	//
	StationaryObject_Classification_MATERIAL_PLASTIC StationaryObject_Classification_Material = 3
	// Concrete structure.
	//
	StationaryObject_Classification_MATERIAL_CONCRETE StationaryObject_Classification_Material = 4
	// Metal structure.
	//
	StationaryObject_Classification_MATERIAL_METAL StationaryObject_Classification_Material = 5
	// Natural stone structure.
	//
	StationaryObject_Classification_MATERIAL_STONE StationaryObject_Classification_Material = 6
	// Glas structure.
	//
	StationaryObject_Classification_MATERIAL_GLAS StationaryObject_Classification_Material = 7
	// Mud structure.
	//
	StationaryObject_Classification_MATERIAL_MUD StationaryObject_Classification_Material = 8
)

var StationaryObject_Classification_Material_name = map[int32]string{
	0: "MATERIAL_UNKNOWN",
	1: "MATERIAL_OTHER",
	2: "MATERIAL_WOOD",
	3: "MATERIAL_PLASTIC",
	4: "MATERIAL_CONCRETE",
	5: "MATERIAL_METAL",
	6: "MATERIAL_STONE",
	7: "MATERIAL_GLAS",
	8: "MATERIAL_MUD",
}

var StationaryObject_Classification_Material_value = map[string]int32{
	"MATERIAL_UNKNOWN":  0,
	"MATERIAL_OTHER":    1,
	"MATERIAL_WOOD":     2,
	"MATERIAL_PLASTIC":  3,
	"MATERIAL_CONCRETE": 4,
	"MATERIAL_METAL":    5,
	"MATERIAL_STONE":    6,
	"MATERIAL_GLAS":     7,
	"MATERIAL_MUD":      8,
}

func (x StationaryObject_Classification_Material) String() string {
	return proto.EnumName(StationaryObject_Classification_Material_name, int32(x))
}

func (StationaryObject_Classification_Material) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e210da66c4c2777e, []int{0, 0, 1}
}

// Definition of material density types.
//
type StationaryObject_Classification_Density int32

const (
	// Type of the material density is unknown (must not be used in
	// ground truth).
	//
	StationaryObject_Classification_DENSITY_UNKNOWN StationaryObject_Classification_Density = 0
	// Other (unspecified but known) type of material density.
	//
	StationaryObject_Classification_DENSITY_OTHER StationaryObject_Classification_Density = 1
	// No perforation - solid;
	//
	StationaryObject_Classification_DENSITY_SOLID StationaryObject_Classification_Density = 2
	// Perforation max. ]0; 100] [mm]
	//
	StationaryObject_Classification_DENSITY_SMALL_MESH StationaryObject_Classification_Density = 3
	// Perforation max. ]100; 500] [mm]
	//
	StationaryObject_Classification_DENSITY_MEDIAN_MESH StationaryObject_Classification_Density = 4
	// Perforation max. ]500; 5000] [mm]
	//
	StationaryObject_Classification_DENSITY_LARGE_MESH StationaryObject_Classification_Density = 5
	// Perforation max. ]5000; infinity] [mm]
	//
	StationaryObject_Classification_DENSITY_OPEN StationaryObject_Classification_Density = 6
)

var StationaryObject_Classification_Density_name = map[int32]string{
	0: "DENSITY_UNKNOWN",
	1: "DENSITY_OTHER",
	2: "DENSITY_SOLID",
	3: "DENSITY_SMALL_MESH",
	4: "DENSITY_MEDIAN_MESH",
	5: "DENSITY_LARGE_MESH",
	6: "DENSITY_OPEN",
}

var StationaryObject_Classification_Density_value = map[string]int32{
	"DENSITY_UNKNOWN":     0,
	"DENSITY_OTHER":       1,
	"DENSITY_SOLID":       2,
	"DENSITY_SMALL_MESH":  3,
	"DENSITY_MEDIAN_MESH": 4,
	"DENSITY_LARGE_MESH":  5,
	"DENSITY_OPEN":        6,
}

func (x StationaryObject_Classification_Density) String() string {
	return proto.EnumName(StationaryObject_Classification_Density_name, int32(x))
}

func (StationaryObject_Classification_Density) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e210da66c4c2777e, []int{0, 0, 2}
}

// Definition of colors for structures.
//
type StationaryObject_Classification_Color int32

const (
	// Color is unknown (must not be used in ground truth).
	//
	StationaryObject_Classification_COLOR_UNKNOWN StationaryObject_Classification_Color = 0
	// Other (unspecified but known) color.
	//
	StationaryObject_Classification_COLOR_OTHER StationaryObject_Classification_Color = 1
	// Yellow.
	//
	StationaryObject_Classification_COLOR_YELLOW StationaryObject_Classification_Color = 2
	// Green.
	//
	StationaryObject_Classification_COLOR_GREEN StationaryObject_Classification_Color = 3
	// Blue.
	//
	StationaryObject_Classification_COLOR_BLUE StationaryObject_Classification_Color = 4
	// Violet.
	//
	StationaryObject_Classification_COLOR_VIOLET StationaryObject_Classification_Color = 5
	// Red.
	//
	StationaryObject_Classification_COLOR_RED StationaryObject_Classification_Color = 6
	// Orange.
	//
	StationaryObject_Classification_COLOR_ORANGE StationaryObject_Classification_Color = 7
	// Black.
	//
	StationaryObject_Classification_COLOR_BLACK StationaryObject_Classification_Color = 8
	// GREY.
	//
	StationaryObject_Classification_COLOR_GREY StationaryObject_Classification_Color = 9
	// White.
	//
	StationaryObject_Classification_COLOR_WHITE StationaryObject_Classification_Color = 10
)

var StationaryObject_Classification_Color_name = map[int32]string{
	0:  "COLOR_UNKNOWN",
	1:  "COLOR_OTHER",
	2:  "COLOR_YELLOW",
	3:  "COLOR_GREEN",
	4:  "COLOR_BLUE",
	5:  "COLOR_VIOLET",
	6:  "COLOR_RED",
	7:  "COLOR_ORANGE",
	8:  "COLOR_BLACK",
	9:  "COLOR_GREY",
	10: "COLOR_WHITE",
}

var StationaryObject_Classification_Color_value = map[string]int32{
	"COLOR_UNKNOWN": 0,
	"COLOR_OTHER":   1,
	"COLOR_YELLOW":  2,
	"COLOR_GREEN":   3,
	"COLOR_BLUE":    4,
	"COLOR_VIOLET":  5,
	"COLOR_RED":     6,
	"COLOR_ORANGE":  7,
	"COLOR_BLACK":   8,
	"COLOR_GREY":    9,
	"COLOR_WHITE":   10,
}

func (x StationaryObject_Classification_Color) String() string {
	return proto.EnumName(StationaryObject_Classification_Color_name, int32(x))
}

func (StationaryObject_Classification_Color) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e210da66c4c2777e, []int{0, 0, 3}
}

// Definition of object types.
//
type MovingObject_Type int32

const (
	// Type of the object is unknown (must not be used in ground truth).
	//
	MovingObject_TYPE_UNKNOWN MovingObject_Type = 0
	// Other (unspecified but known) type of moving object.
	//
	MovingObject_TYPE_OTHER MovingObject_Type = 1
	// Object is a vehicle.
	//
	MovingObject_TYPE_VEHICLE MovingObject_Type = 2
	// Object is a pedestrian.
	//
	MovingObject_TYPE_PEDESTRIAN MovingObject_Type = 3
	// Object is an animal.
	//
	MovingObject_TYPE_ANIMAL MovingObject_Type = 4
)

var MovingObject_Type_name = map[int32]string{
	0: "TYPE_UNKNOWN",
	1: "TYPE_OTHER",
	2: "TYPE_VEHICLE",
	3: "TYPE_PEDESTRIAN",
	4: "TYPE_ANIMAL",
}

var MovingObject_Type_value = map[string]int32{
	"TYPE_UNKNOWN":    0,
	"TYPE_OTHER":      1,
	"TYPE_VEHICLE":    2,
	"TYPE_PEDESTRIAN": 3,
	"TYPE_ANIMAL":     4,
}

func (x MovingObject_Type) String() string {
	return proto.EnumName(MovingObject_Type_name, int32(x))
}

func (MovingObject_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e210da66c4c2777e, []int{1, 0}
}

// Definition of vehicle types.
//
type MovingObject_VehicleClassification_Type int32

const (
	// Type of vehicle is unknown (must not be used in ground truth).
	//
	MovingObject_VehicleClassification_TYPE_UNKNOWN MovingObject_VehicleClassification_Type = 0
	// Other (unspecified but known) type of vehicle.
	//
	MovingObject_VehicleClassification_TYPE_OTHER MovingObject_VehicleClassification_Type = 1
	// Vehicle is a small car.
	//
	// Definition: Hatchback car with maximum length 4 m.
	//
	MovingObject_VehicleClassification_TYPE_SMALL_CAR MovingObject_VehicleClassification_Type = 2
	// Vehicle is a compact car.
	//
	// Definition: Hatchback car with length between 4 and 4.5 m.
	//
	MovingObject_VehicleClassification_TYPE_COMPACT_CAR MovingObject_VehicleClassification_Type = 3
	// Vehicle is a medium car.
	//
	// Definition: Hatchback or sedan with lenght between 4.5 and 5 m.
	//
	MovingObject_VehicleClassification_TYPE_MEDIUM_CAR MovingObject_VehicleClassification_Type = 4
	// Vehicle is a luxury  car.
	//
	// Definition: Sedan or coupe that is longer then 5 m.
	//
	MovingObject_VehicleClassification_TYPE_LUXURY_CAR MovingObject_VehicleClassification_Type = 5
	// Vehicle is a delivery van.
	//
	// Definition: A delivery van.
	//
	MovingObject_VehicleClassification_TYPE_DELIVERY_VAN MovingObject_VehicleClassification_Type = 6
	// Vehicle is a heavy truck.
	//
	MovingObject_VehicleClassification_TYPE_HEAVY_TRUCK MovingObject_VehicleClassification_Type = 7
	// Vehicle is a truck with semitrailer.
	//
	MovingObject_VehicleClassification_TYPE_SEMITRAILER MovingObject_VehicleClassification_Type = 8
	// Vehicle is a trailer (possibly attached to another vehicle).
	//
	MovingObject_VehicleClassification_TYPE_TRAILER MovingObject_VehicleClassification_Type = 9
	// Vehicle is a motorbike or moped.
	//
	MovingObject_VehicleClassification_TYPE_MOTORBIKE MovingObject_VehicleClassification_Type = 10
	// Vehicle is a bicycle (without motor and specific lights).
	//
	MovingObject_VehicleClassification_TYPE_BICYCLE MovingObject_VehicleClassification_Type = 11
	// Vehicle is a bus.
	//
	MovingObject_VehicleClassification_TYPE_BUS MovingObject_VehicleClassification_Type = 12
	// Vehicle is a tram.
	//
	MovingObject_VehicleClassification_TYPE_TRAM MovingObject_VehicleClassification_Type = 13
	// Vehicle is a train.
	//
	MovingObject_VehicleClassification_TYPE_TRAIN MovingObject_VehicleClassification_Type = 14
	// Vehicle is a wheelchair.
	//
	MovingObject_VehicleClassification_TYPE_WHEELCHAIR MovingObject_VehicleClassification_Type = 15
)

var MovingObject_VehicleClassification_Type_name = map[int32]string{
	0:  "TYPE_UNKNOWN",
	1:  "TYPE_OTHER",
	2:  "TYPE_SMALL_CAR",
	3:  "TYPE_COMPACT_CAR",
	4:  "TYPE_MEDIUM_CAR",
	5:  "TYPE_LUXURY_CAR",
	6:  "TYPE_DELIVERY_VAN",
	7:  "TYPE_HEAVY_TRUCK",
	8:  "TYPE_SEMITRAILER",
	9:  "TYPE_TRAILER",
	10: "TYPE_MOTORBIKE",
	11: "TYPE_BICYCLE",
	12: "TYPE_BUS",
	13: "TYPE_TRAM",
	14: "TYPE_TRAIN",
	15: "TYPE_WHEELCHAIR",
}

var MovingObject_VehicleClassification_Type_value = map[string]int32{
	"TYPE_UNKNOWN":      0,
	"TYPE_OTHER":        1,
	"TYPE_SMALL_CAR":    2,
	"TYPE_COMPACT_CAR":  3,
	"TYPE_MEDIUM_CAR":   4,
	"TYPE_LUXURY_CAR":   5,
	"TYPE_DELIVERY_VAN": 6,
	"TYPE_HEAVY_TRUCK":  7,
	"TYPE_SEMITRAILER":  8,
	"TYPE_TRAILER":      9,
	"TYPE_MOTORBIKE":    10,
	"TYPE_BICYCLE":      11,
	"TYPE_BUS":          12,
	"TYPE_TRAM":         13,
	"TYPE_TRAIN":        14,
	"TYPE_WHEELCHAIR":   15,
}

func (x MovingObject_VehicleClassification_Type) String() string {
	return proto.EnumName(MovingObject_VehicleClassification_Type_name, int32(x))
}

func (MovingObject_VehicleClassification_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e210da66c4c2777e, []int{1, 1, 0}
}

// Definition of indicator states.
//
type MovingObject_VehicleClassification_LightState_IndicatorState int32

const (
	// Indicator state is unknown (must not be used in ground
	// truth).
	//
	MovingObject_VehicleClassification_LightState_INDICATOR_STATE_UNKNOWN MovingObject_VehicleClassification_LightState_IndicatorState = 0
	// Other (unspecified but known) state of indicator.
	//
	MovingObject_VehicleClassification_LightState_INDICATOR_STATE_OTHER MovingObject_VehicleClassification_LightState_IndicatorState = 1
	// Indicators are off.
	//
	MovingObject_VehicleClassification_LightState_INDICATOR_STATE_OFF MovingObject_VehicleClassification_LightState_IndicatorState = 2
	// Left indicator is on.
	//
	MovingObject_VehicleClassification_LightState_INDICATOR_STATE_LEFT MovingObject_VehicleClassification_LightState_IndicatorState = 3
	// Right indicator is on.
	//
	MovingObject_VehicleClassification_LightState_INDICATOR_STATE_RIGHT MovingObject_VehicleClassification_LightState_IndicatorState = 4
	// Hazard/warning light, i.e. both indicators, are on.
	//
	MovingObject_VehicleClassification_LightState_INDICATOR_STATE_WARNING MovingObject_VehicleClassification_LightState_IndicatorState = 5
)

var MovingObject_VehicleClassification_LightState_IndicatorState_name = map[int32]string{
	0: "INDICATOR_STATE_UNKNOWN",
	1: "INDICATOR_STATE_OTHER",
	2: "INDICATOR_STATE_OFF",
	3: "INDICATOR_STATE_LEFT",
	4: "INDICATOR_STATE_RIGHT",
	5: "INDICATOR_STATE_WARNING",
}

var MovingObject_VehicleClassification_LightState_IndicatorState_value = map[string]int32{
	"INDICATOR_STATE_UNKNOWN": 0,
	"INDICATOR_STATE_OTHER":   1,
	"INDICATOR_STATE_OFF":     2,
	"INDICATOR_STATE_LEFT":    3,
	"INDICATOR_STATE_RIGHT":   4,
	"INDICATOR_STATE_WARNING": 5,
}

func (x MovingObject_VehicleClassification_LightState_IndicatorState) String() string {
	return proto.EnumName(MovingObject_VehicleClassification_LightState_IndicatorState_name, int32(x))
}

func (MovingObject_VehicleClassification_LightState_IndicatorState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e210da66c4c2777e, []int{1, 1, 0, 0}
}

// Definition of generic light states for light that may be on or
// off.
//
type MovingObject_VehicleClassification_LightState_GenericLightState int32

const (
	// Light state is unknown (must not be used in ground truth).
	//
	MovingObject_VehicleClassification_LightState_GENERIC_LIGHT_STATE_UNKNOWN MovingObject_VehicleClassification_LightState_GenericLightState = 0
	// Other (unspecified but known) state of light.
	//
	MovingObject_VehicleClassification_LightState_GENERIC_LIGHT_STATE_OTHER MovingObject_VehicleClassification_LightState_GenericLightState = 1
	// Light is off.
	//
	MovingObject_VehicleClassification_LightState_GENERIC_LIGHT_STATE_OFF MovingObject_VehicleClassification_LightState_GenericLightState = 2
	// Light is on.
	//
	MovingObject_VehicleClassification_LightState_GENERIC_LIGHT_STATE_ON MovingObject_VehicleClassification_LightState_GenericLightState = 3
)

var MovingObject_VehicleClassification_LightState_GenericLightState_name = map[int32]string{
	0: "GENERIC_LIGHT_STATE_UNKNOWN",
	1: "GENERIC_LIGHT_STATE_OTHER",
	2: "GENERIC_LIGHT_STATE_OFF",
	3: "GENERIC_LIGHT_STATE_ON",
}

var MovingObject_VehicleClassification_LightState_GenericLightState_value = map[string]int32{
	"GENERIC_LIGHT_STATE_UNKNOWN": 0,
	"GENERIC_LIGHT_STATE_OTHER":   1,
	"GENERIC_LIGHT_STATE_OFF":     2,
	"GENERIC_LIGHT_STATE_ON":      3,
}

func (x MovingObject_VehicleClassification_LightState_GenericLightState) String() string {
	return proto.EnumName(MovingObject_VehicleClassification_LightState_GenericLightState_name, int32(x))
}

func (MovingObject_VehicleClassification_LightState_GenericLightState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e210da66c4c2777e, []int{1, 1, 0, 1}
}

// Definition of brake light states.
//
type MovingObject_VehicleClassification_LightState_BrakeLightState int32

const (
	// Brake light state is unknown (must not be used in ground
	// truth).
	//
	MovingObject_VehicleClassification_LightState_BRAKE_LIGHT_STATE_UNKNOWN MovingObject_VehicleClassification_LightState_BrakeLightState = 0
	// Other (unspecified but known) state of brake light.
	//
	MovingObject_VehicleClassification_LightState_BRAKE_LIGHT_STATE_OTHER MovingObject_VehicleClassification_LightState_BrakeLightState = 1
	// Brake lights are off.
	//
	MovingObject_VehicleClassification_LightState_BRAKE_LIGHT_STATE_OFF MovingObject_VehicleClassification_LightState_BrakeLightState = 2
	// Brake lights are on with normal intensity.
	//
	MovingObject_VehicleClassification_LightState_BRAKE_LIGHT_STATE_NORMAL MovingObject_VehicleClassification_LightState_BrakeLightState = 3
	// Brake lights are on with extra bright intensity (indicating
	// stronger braking).
	MovingObject_VehicleClassification_LightState_BRAKE_LIGHT_STATE_STRONG MovingObject_VehicleClassification_LightState_BrakeLightState = 4
)

var MovingObject_VehicleClassification_LightState_BrakeLightState_name = map[int32]string{
	0: "BRAKE_LIGHT_STATE_UNKNOWN",
	1: "BRAKE_LIGHT_STATE_OTHER",
	2: "BRAKE_LIGHT_STATE_OFF",
	3: "BRAKE_LIGHT_STATE_NORMAL",
	4: "BRAKE_LIGHT_STATE_STRONG",
}

var MovingObject_VehicleClassification_LightState_BrakeLightState_value = map[string]int32{
	"BRAKE_LIGHT_STATE_UNKNOWN": 0,
	"BRAKE_LIGHT_STATE_OTHER":   1,
	"BRAKE_LIGHT_STATE_OFF":     2,
	"BRAKE_LIGHT_STATE_NORMAL":  3,
	"BRAKE_LIGHT_STATE_STRONG":  4,
}

func (x MovingObject_VehicleClassification_LightState_BrakeLightState) String() string {
	return proto.EnumName(MovingObject_VehicleClassification_LightState_BrakeLightState_name, int32(x))
}

func (MovingObject_VehicleClassification_LightState_BrakeLightState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e210da66c4c2777e, []int{1, 1, 0, 2}
}

//
// \brief A simulated object that is neither a moving object (vehicle or
// \c MovingObject e.g. pedestrian, animal, or vehicle) nor a traffic related
// object (\c TrafficLight, \c TrafficSign).
//
// \image html OSI_StatObject.jpg
//
// \c StationaryObject excludes traffic lights, traffic signs and road marking
//
type StationaryObject struct {
	// The ID of the object.
	//
	Id *Identifier `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The base parameters of the vehicle.
	//
	Base *BaseStationary `protobuf:"bytes,2,opt,name=base,proto3" json:"base,omitempty"`
	// The classification of the stationary object.
	//
	Classification       *StationaryObject_Classification `protobuf:"bytes,3,opt,name=classification,proto3" json:"classification,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *StationaryObject) Reset()         { *m = StationaryObject{} }
func (m *StationaryObject) String() string { return proto.CompactTextString(m) }
func (*StationaryObject) ProtoMessage()    {}
func (*StationaryObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_e210da66c4c2777e, []int{0}
}

func (m *StationaryObject) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StationaryObject.Unmarshal(m, b)
}
func (m *StationaryObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StationaryObject.Marshal(b, m, deterministic)
}
func (m *StationaryObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StationaryObject.Merge(m, src)
}
func (m *StationaryObject) XXX_Size() int {
	return xxx_messageInfo_StationaryObject.Size(m)
}
func (m *StationaryObject) XXX_DiscardUnknown() {
	xxx_messageInfo_StationaryObject.DiscardUnknown(m)
}

var xxx_messageInfo_StationaryObject proto.InternalMessageInfo

func (m *StationaryObject) GetId() *Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *StationaryObject) GetBase() *BaseStationary {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *StationaryObject) GetClassification() *StationaryObject_Classification {
	if m != nil {
		return m.Classification
	}
	return nil
}

//
// \brief Classification data for a stationary object.
//
type StationaryObject_Classification struct {
	// The type of the object.
	//
	Type StationaryObject_Classification_Type `protobuf:"varint,1,opt,name=type,proto3,enum=osi3.StationaryObject_Classification_Type" json:"type,omitempty"`
	// The dominating material of the structure.
	//
	Material StationaryObject_Classification_Material `protobuf:"varint,2,opt,name=material,proto3,enum=osi3.StationaryObject_Classification_Material" json:"material,omitempty"`
	// The dominating density of the material of the structure.
	//
	Density StationaryObject_Classification_Density `protobuf:"varint,3,opt,name=density,proto3,enum=osi3.StationaryObject_Classification_Density" json:"density,omitempty"`
	// The dominating color of the material of the structure.
	//
	Color                StationaryObject_Classification_Color `protobuf:"varint,4,opt,name=color,proto3,enum=osi3.StationaryObject_Classification_Color" json:"color,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *StationaryObject_Classification) Reset()         { *m = StationaryObject_Classification{} }
func (m *StationaryObject_Classification) String() string { return proto.CompactTextString(m) }
func (*StationaryObject_Classification) ProtoMessage()    {}
func (*StationaryObject_Classification) Descriptor() ([]byte, []int) {
	return fileDescriptor_e210da66c4c2777e, []int{0, 0}
}

func (m *StationaryObject_Classification) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StationaryObject_Classification.Unmarshal(m, b)
}
func (m *StationaryObject_Classification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StationaryObject_Classification.Marshal(b, m, deterministic)
}
func (m *StationaryObject_Classification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StationaryObject_Classification.Merge(m, src)
}
func (m *StationaryObject_Classification) XXX_Size() int {
	return xxx_messageInfo_StationaryObject_Classification.Size(m)
}
func (m *StationaryObject_Classification) XXX_DiscardUnknown() {
	xxx_messageInfo_StationaryObject_Classification.DiscardUnknown(m)
}

var xxx_messageInfo_StationaryObject_Classification proto.InternalMessageInfo

func (m *StationaryObject_Classification) GetType() StationaryObject_Classification_Type {
	if m != nil {
		return m.Type
	}
	return StationaryObject_Classification_TYPE_UNKNOWN
}

func (m *StationaryObject_Classification) GetMaterial() StationaryObject_Classification_Material {
	if m != nil {
		return m.Material
	}
	return StationaryObject_Classification_MATERIAL_UNKNOWN
}

func (m *StationaryObject_Classification) GetDensity() StationaryObject_Classification_Density {
	if m != nil {
		return m.Density
	}
	return StationaryObject_Classification_DENSITY_UNKNOWN
}

func (m *StationaryObject_Classification) GetColor() StationaryObject_Classification_Color {
	if m != nil {
		return m.Color
	}
	return StationaryObject_Classification_COLOR_UNKNOWN
}

//
// \brief A simulated object that is either a vehicle or another
// moving object (animal, pedestrian, etc), but not a stationary
// object (\c TrafficLight, \c TrafficSign, or \c StationaryObject).
//
// \note The field \c MovingObject::vehicle_extension has to be
// filled if the \c MovingObject::Type is a vehicle.
//
type MovingObject struct {
	// The ID of the object.
	//
	Id *Identifier `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The base parameters of the vehicle.
	//
	// \note The bounding box does NOT includes mirrors for vehicles.
	//
	Base *BaseMoving `protobuf:"bytes,2,opt,name=base,proto3" json:"base,omitempty"`
	// The type of the object.
	//
	Type MovingObject_Type `protobuf:"varint,3,opt,name=type,proto3,enum=osi3.MovingObject_Type" json:"type,omitempty"`
	// The IDs of the lanes that this object is assigned to.
	//
	// \note Might be multiple if the object is switching lanes or moving from
	// one lane into another following lane.
	//
	// \note OSI uses singular instead of plural for repeated field names.
	//
	AssignedLaneId []*Identifier `protobuf:"bytes,4,rep,name=assigned_lane_id,json=assignedLaneId,proto3" json:"assigned_lane_id,omitempty"`
	// Specific information about the vehicle.
	//
	// \note This field is mandatory if the \c #type is
	// #TYPE_VEHICLE .
	//
	VehicleAttributes *MovingObject_VehicleAttributes `protobuf:"bytes,5,opt,name=vehicle_attributes,json=vehicleAttributes,proto3" json:"vehicle_attributes,omitempty"`
	// Specific information about the classification of the vehicle.
	//
	//
	// \note This field is mandatory if the \c #type is
	// #TYPE_VEHICLE .
	//
	VehicleClassification *MovingObject_VehicleClassification `protobuf:"bytes,6,opt,name=vehicle_classification,json=vehicleClassification,proto3" json:"vehicle_classification,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                            `json:"-"`
	XXX_unrecognized      []byte                              `json:"-"`
	XXX_sizecache         int32                               `json:"-"`
}

func (m *MovingObject) Reset()         { *m = MovingObject{} }
func (m *MovingObject) String() string { return proto.CompactTextString(m) }
func (*MovingObject) ProtoMessage()    {}
func (*MovingObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_e210da66c4c2777e, []int{1}
}

func (m *MovingObject) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MovingObject.Unmarshal(m, b)
}
func (m *MovingObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MovingObject.Marshal(b, m, deterministic)
}
func (m *MovingObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MovingObject.Merge(m, src)
}
func (m *MovingObject) XXX_Size() int {
	return xxx_messageInfo_MovingObject.Size(m)
}
func (m *MovingObject) XXX_DiscardUnknown() {
	xxx_messageInfo_MovingObject.DiscardUnknown(m)
}

var xxx_messageInfo_MovingObject proto.InternalMessageInfo

func (m *MovingObject) GetId() *Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *MovingObject) GetBase() *BaseMoving {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *MovingObject) GetType() MovingObject_Type {
	if m != nil {
		return m.Type
	}
	return MovingObject_TYPE_UNKNOWN
}

func (m *MovingObject) GetAssignedLaneId() []*Identifier {
	if m != nil {
		return m.AssignedLaneId
	}
	return nil
}

func (m *MovingObject) GetVehicleAttributes() *MovingObject_VehicleAttributes {
	if m != nil {
		return m.VehicleAttributes
	}
	return nil
}

func (m *MovingObject) GetVehicleClassification() *MovingObject_VehicleClassification {
	if m != nil {
		return m.VehicleClassification
	}
	return nil
}

//
// \brief The vehicle attributes for \c MovingObject (host or other).
//
// This is an extension to the \c MovingObject with additional attributes,
// such as type and lights. The origin of the rear (front) axis coordinate
// system in world coordinates is calculated as:
// \c MovingObject::base . \c BaseMoving::position + R * \c
// MovingObject::VehicleAttributes::bbcenter_to_rear (front) for the host
// vehicle (R rotates from vehicle to world frame, i.e. inverse orientation
// of \c MovingObject::base . \c BaseMoving::orientation).
//
// For all vehicles, including host vehicles, the position given in
//  \c MovingObject::base . \c BaseMoving::position points to the center of
//  the vehicle's bounding box.
//
// The vehicle object coordinates are defined as x-axis is the direction
// from rear to front of the vehicle, y-axis corresponds to rear axle and
// z-axis points to vehicle ceiling [1]. The coordinate system is
// right-handed. Therefore the positive y-axis points to the left of the
// vehicle.
//
// \par References:
// - [1] DIN ISO 8855:2013-11
//
type MovingObject_VehicleAttributes struct {
	// The ID of the driver of the (host) vehicle.
	//
	// \note Field need not be set if host_vehicle is set to false or use
	// value for non valid id.
	//
	DriverId *Identifier `protobuf:"bytes,1,opt,name=driver_id,json=driverId,proto3" json:"driver_id,omitempty"`
	// Median radius of the wheels measured from a center of the wheel
	// including tire.
	//
	// Unit: [m]
	//
	RadiusWheel float64 `protobuf:"fixed64,2,opt,name=radius_wheel,json=radiusWheel,proto3" json:"radius_wheel,omitempty"`
	// Number of independent wheels.
	//
	// Unit: []
	//
	NumberWheels uint32 `protobuf:"varint,3,opt,name=number_wheels,json=numberWheels,proto3" json:"number_wheels,omitempty"`
	// The vector pointing from the bounding box center point (\c
	// MovingObject::base . \c BaseMoving::position) to the middle (in x, y
	// and z) of the rear axle under neutral load conditions. In object
	// coordinates.
	//
	BbcenterToRear *Vector3D `protobuf:"bytes,4,opt,name=bbcenter_to_rear,json=bbcenterToRear,proto3" json:"bbcenter_to_rear,omitempty"`
	// The vector pointing from the bounding box center point (\c
	// MovingObject::base . \c BaseMoving::position) to the middle (in x, y
	// and z) of the front axle under neutral load conditions. In object
	// coordinates.
	//
	BbcenterToFront *Vector3D `protobuf:"bytes,5,opt,name=bbcenter_to_front,json=bbcenterToFront,proto3" json:"bbcenter_to_front,omitempty"`
	// Static minimal distance in [m] of under-body plane to ground
	// surface plane (i.e. disregarding driving dynamic effects or road
	// surface effects) under neutral load conditions. Can be useful to
	// approximate the clear area under a vehicle that a sensor can see
	// through.
	//
	GroundClearance      float64  `protobuf:"fixed64,6,opt,name=ground_clearance,json=groundClearance,proto3" json:"ground_clearance,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MovingObject_VehicleAttributes) Reset()         { *m = MovingObject_VehicleAttributes{} }
func (m *MovingObject_VehicleAttributes) String() string { return proto.CompactTextString(m) }
func (*MovingObject_VehicleAttributes) ProtoMessage()    {}
func (*MovingObject_VehicleAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_e210da66c4c2777e, []int{1, 0}
}

func (m *MovingObject_VehicleAttributes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MovingObject_VehicleAttributes.Unmarshal(m, b)
}
func (m *MovingObject_VehicleAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MovingObject_VehicleAttributes.Marshal(b, m, deterministic)
}
func (m *MovingObject_VehicleAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MovingObject_VehicleAttributes.Merge(m, src)
}
func (m *MovingObject_VehicleAttributes) XXX_Size() int {
	return xxx_messageInfo_MovingObject_VehicleAttributes.Size(m)
}
func (m *MovingObject_VehicleAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_MovingObject_VehicleAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_MovingObject_VehicleAttributes proto.InternalMessageInfo

func (m *MovingObject_VehicleAttributes) GetDriverId() *Identifier {
	if m != nil {
		return m.DriverId
	}
	return nil
}

func (m *MovingObject_VehicleAttributes) GetRadiusWheel() float64 {
	if m != nil {
		return m.RadiusWheel
	}
	return 0
}

func (m *MovingObject_VehicleAttributes) GetNumberWheels() uint32 {
	if m != nil {
		return m.NumberWheels
	}
	return 0
}

func (m *MovingObject_VehicleAttributes) GetBbcenterToRear() *Vector3D {
	if m != nil {
		return m.BbcenterToRear
	}
	return nil
}

func (m *MovingObject_VehicleAttributes) GetBbcenterToFront() *Vector3D {
	if m != nil {
		return m.BbcenterToFront
	}
	return nil
}

func (m *MovingObject_VehicleAttributes) GetGroundClearance() float64 {
	if m != nil {
		return m.GroundClearance
	}
	return 0
}

//
// \brief Information for the classification of vehicles regarding
// \c MovingObject (host or other).
//
type MovingObject_VehicleClassification struct {
	// The type of the vehicle.
	//
	Type MovingObject_VehicleClassification_Type `protobuf:"varint,1,opt,name=type,proto3,enum=osi3.MovingObject_VehicleClassification_Type" json:"type,omitempty"`
	// The light state of the vehicle.
	//
	LightState *MovingObject_VehicleClassification_LightState `protobuf:"bytes,2,opt,name=light_state,json=lightState,proto3" json:"light_state,omitempty"`
	// Flag defining whether the vehicle has an attached trailer.
	//
	HasTrailer bool `protobuf:"varint,3,opt,name=has_trailer,json=hasTrailer,proto3" json:"has_trailer,omitempty"`
	// Id of the attached trailer.
	//
	// \note Field need not be set if has_Trailer is set to false or use
	// value for non valid id.
	//
	TrailerId            *Identifier `protobuf:"bytes,4,opt,name=trailer_id,json=trailerId,proto3" json:"trailer_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *MovingObject_VehicleClassification) Reset()         { *m = MovingObject_VehicleClassification{} }
func (m *MovingObject_VehicleClassification) String() string { return proto.CompactTextString(m) }
func (*MovingObject_VehicleClassification) ProtoMessage()    {}
func (*MovingObject_VehicleClassification) Descriptor() ([]byte, []int) {
	return fileDescriptor_e210da66c4c2777e, []int{1, 1}
}

func (m *MovingObject_VehicleClassification) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MovingObject_VehicleClassification.Unmarshal(m, b)
}
func (m *MovingObject_VehicleClassification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MovingObject_VehicleClassification.Marshal(b, m, deterministic)
}
func (m *MovingObject_VehicleClassification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MovingObject_VehicleClassification.Merge(m, src)
}
func (m *MovingObject_VehicleClassification) XXX_Size() int {
	return xxx_messageInfo_MovingObject_VehicleClassification.Size(m)
}
func (m *MovingObject_VehicleClassification) XXX_DiscardUnknown() {
	xxx_messageInfo_MovingObject_VehicleClassification.DiscardUnknown(m)
}

var xxx_messageInfo_MovingObject_VehicleClassification proto.InternalMessageInfo

func (m *MovingObject_VehicleClassification) GetType() MovingObject_VehicleClassification_Type {
	if m != nil {
		return m.Type
	}
	return MovingObject_VehicleClassification_TYPE_UNKNOWN
}

func (m *MovingObject_VehicleClassification) GetLightState() *MovingObject_VehicleClassification_LightState {
	if m != nil {
		return m.LightState
	}
	return nil
}

func (m *MovingObject_VehicleClassification) GetHasTrailer() bool {
	if m != nil {
		return m.HasTrailer
	}
	return false
}

func (m *MovingObject_VehicleClassification) GetTrailerId() *Identifier {
	if m != nil {
		return m.TrailerId
	}
	return nil
}

//
// \brief The state of the lights of a vehicle.
//
type MovingObject_VehicleClassification_LightState struct {
	// State of the object's indicators.
	//
	IndicatorState MovingObject_VehicleClassification_LightState_IndicatorState `protobuf:"varint,1,opt,name=indicator_state,json=indicatorState,proto3,enum=osi3.MovingObject_VehicleClassification_LightState_IndicatorState" json:"indicator_state,omitempty"`
	// State of the front fog light.
	//
	FrontFogLight MovingObject_VehicleClassification_LightState_GenericLightState `protobuf:"varint,2,opt,name=front_fog_light,json=frontFogLight,proto3,enum=osi3.MovingObject_VehicleClassification_LightState_GenericLightState" json:"front_fog_light,omitempty"`
	// State of the rear fog light.
	//
	RearFogLight MovingObject_VehicleClassification_LightState_GenericLightState `protobuf:"varint,3,opt,name=rear_fog_light,json=rearFogLight,proto3,enum=osi3.MovingObject_VehicleClassification_LightState_GenericLightState" json:"rear_fog_light,omitempty"`
	// State of the head lights.
	//
	HeadLight MovingObject_VehicleClassification_LightState_GenericLightState `protobuf:"varint,4,opt,name=head_light,json=headLight,proto3,enum=osi3.MovingObject_VehicleClassification_LightState_GenericLightState" json:"head_light,omitempty"`
	// State of the high beam.
	//
	HighBeam MovingObject_VehicleClassification_LightState_GenericLightState `protobuf:"varint,5,opt,name=high_beam,json=highBeam,proto3,enum=osi3.MovingObject_VehicleClassification_LightState_GenericLightState" json:"high_beam,omitempty"`
	// State of the reversing light.
	//
	ReversingLight MovingObject_VehicleClassification_LightState_GenericLightState `protobuf:"varint,6,opt,name=reversing_light,json=reversingLight,proto3,enum=osi3.MovingObject_VehicleClassification_LightState_GenericLightState" json:"reversing_light,omitempty"`
	// State of the brake lights.
	//
	BrakeLightState MovingObject_VehicleClassification_LightState_BrakeLightState `protobuf:"varint,7,opt,name=brake_light_state,json=brakeLightState,proto3,enum=osi3.MovingObject_VehicleClassification_LightState_BrakeLightState" json:"brake_light_state,omitempty"`
	// State of the (rear) license plate illumination
	//
	LicensePlateIlluminationRear MovingObject_VehicleClassification_LightState_GenericLightState `protobuf:"varint,8,opt,name=license_plate_illumination_rear,json=licensePlateIlluminationRear,proto3,enum=osi3.MovingObject_VehicleClassification_LightState_GenericLightState" json:"license_plate_illumination_rear,omitempty"`
	XXX_NoUnkeyedLiteral         struct{}                                                        `json:"-"`
	XXX_unrecognized             []byte                                                          `json:"-"`
	XXX_sizecache                int32                                                           `json:"-"`
}

func (m *MovingObject_VehicleClassification_LightState) Reset() {
	*m = MovingObject_VehicleClassification_LightState{}
}
func (m *MovingObject_VehicleClassification_LightState) String() string {
	return proto.CompactTextString(m)
}
func (*MovingObject_VehicleClassification_LightState) ProtoMessage() {}
func (*MovingObject_VehicleClassification_LightState) Descriptor() ([]byte, []int) {
	return fileDescriptor_e210da66c4c2777e, []int{1, 1, 0}
}

func (m *MovingObject_VehicleClassification_LightState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MovingObject_VehicleClassification_LightState.Unmarshal(m, b)
}
func (m *MovingObject_VehicleClassification_LightState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MovingObject_VehicleClassification_LightState.Marshal(b, m, deterministic)
}
func (m *MovingObject_VehicleClassification_LightState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MovingObject_VehicleClassification_LightState.Merge(m, src)
}
func (m *MovingObject_VehicleClassification_LightState) XXX_Size() int {
	return xxx_messageInfo_MovingObject_VehicleClassification_LightState.Size(m)
}
func (m *MovingObject_VehicleClassification_LightState) XXX_DiscardUnknown() {
	xxx_messageInfo_MovingObject_VehicleClassification_LightState.DiscardUnknown(m)
}

var xxx_messageInfo_MovingObject_VehicleClassification_LightState proto.InternalMessageInfo

func (m *MovingObject_VehicleClassification_LightState) GetIndicatorState() MovingObject_VehicleClassification_LightState_IndicatorState {
	if m != nil {
		return m.IndicatorState
	}
	return MovingObject_VehicleClassification_LightState_INDICATOR_STATE_UNKNOWN
}

func (m *MovingObject_VehicleClassification_LightState) GetFrontFogLight() MovingObject_VehicleClassification_LightState_GenericLightState {
	if m != nil {
		return m.FrontFogLight
	}
	return MovingObject_VehicleClassification_LightState_GENERIC_LIGHT_STATE_UNKNOWN
}

func (m *MovingObject_VehicleClassification_LightState) GetRearFogLight() MovingObject_VehicleClassification_LightState_GenericLightState {
	if m != nil {
		return m.RearFogLight
	}
	return MovingObject_VehicleClassification_LightState_GENERIC_LIGHT_STATE_UNKNOWN
}

func (m *MovingObject_VehicleClassification_LightState) GetHeadLight() MovingObject_VehicleClassification_LightState_GenericLightState {
	if m != nil {
		return m.HeadLight
	}
	return MovingObject_VehicleClassification_LightState_GENERIC_LIGHT_STATE_UNKNOWN
}

func (m *MovingObject_VehicleClassification_LightState) GetHighBeam() MovingObject_VehicleClassification_LightState_GenericLightState {
	if m != nil {
		return m.HighBeam
	}
	return MovingObject_VehicleClassification_LightState_GENERIC_LIGHT_STATE_UNKNOWN
}

func (m *MovingObject_VehicleClassification_LightState) GetReversingLight() MovingObject_VehicleClassification_LightState_GenericLightState {
	if m != nil {
		return m.ReversingLight
	}
	return MovingObject_VehicleClassification_LightState_GENERIC_LIGHT_STATE_UNKNOWN
}

func (m *MovingObject_VehicleClassification_LightState) GetBrakeLightState() MovingObject_VehicleClassification_LightState_BrakeLightState {
	if m != nil {
		return m.BrakeLightState
	}
	return MovingObject_VehicleClassification_LightState_BRAKE_LIGHT_STATE_UNKNOWN
}

func (m *MovingObject_VehicleClassification_LightState) GetLicensePlateIlluminationRear() MovingObject_VehicleClassification_LightState_GenericLightState {
	if m != nil {
		return m.LicensePlateIlluminationRear
	}
	return MovingObject_VehicleClassification_LightState_GENERIC_LIGHT_STATE_UNKNOWN
}

func init() {
	proto.RegisterEnum("osi3.StationaryObject_Classification_Type", StationaryObject_Classification_Type_name, StationaryObject_Classification_Type_value)
	proto.RegisterEnum("osi3.StationaryObject_Classification_Material", StationaryObject_Classification_Material_name, StationaryObject_Classification_Material_value)
	proto.RegisterEnum("osi3.StationaryObject_Classification_Density", StationaryObject_Classification_Density_name, StationaryObject_Classification_Density_value)
	proto.RegisterEnum("osi3.StationaryObject_Classification_Color", StationaryObject_Classification_Color_name, StationaryObject_Classification_Color_value)
	proto.RegisterEnum("osi3.MovingObject_Type", MovingObject_Type_name, MovingObject_Type_value)
	proto.RegisterEnum("osi3.MovingObject_VehicleClassification_Type", MovingObject_VehicleClassification_Type_name, MovingObject_VehicleClassification_Type_value)
	proto.RegisterEnum("osi3.MovingObject_VehicleClassification_LightState_IndicatorState", MovingObject_VehicleClassification_LightState_IndicatorState_name, MovingObject_VehicleClassification_LightState_IndicatorState_value)
	proto.RegisterEnum("osi3.MovingObject_VehicleClassification_LightState_GenericLightState", MovingObject_VehicleClassification_LightState_GenericLightState_name, MovingObject_VehicleClassification_LightState_GenericLightState_value)
	proto.RegisterEnum("osi3.MovingObject_VehicleClassification_LightState_BrakeLightState", MovingObject_VehicleClassification_LightState_BrakeLightState_name, MovingObject_VehicleClassification_LightState_BrakeLightState_value)
	proto.RegisterType((*StationaryObject)(nil), "osi3.StationaryObject")
	proto.RegisterType((*StationaryObject_Classification)(nil), "osi3.StationaryObject.Classification")
	proto.RegisterType((*MovingObject)(nil), "osi3.MovingObject")
	proto.RegisterType((*MovingObject_VehicleAttributes)(nil), "osi3.MovingObject.VehicleAttributes")
	proto.RegisterType((*MovingObject_VehicleClassification)(nil), "osi3.MovingObject.VehicleClassification")
	proto.RegisterType((*MovingObject_VehicleClassification_LightState)(nil), "osi3.MovingObject.VehicleClassification.LightState")
}

func init() { proto.RegisterFile("osi_object.proto", fileDescriptor_e210da66c4c2777e) }

var fileDescriptor_e210da66c4c2777e = []byte{
	// 1607 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0x4d, 0x6f, 0xdb, 0xca,
	0x15, 0xad, 0xbe, 0x6c, 0xf9, 0xea, 0x6b, 0x34, 0x89, 0x63, 0xc7, 0x79, 0xef, 0x25, 0x55, 0x5f,
	0x81, 0xb4, 0x0f, 0x71, 0x01, 0x67, 0x53, 0xbc, 0x45, 0x01, 0x8a, 0x1a, 0x4b, 0x53, 0x53, 0xa4,
	0x31, 0x1a, 0xc9, 0xd5, 0x8a, 0xa5, 0xa4, 0x89, 0xcd, 0x46, 0x26, 0x03, 0x8a, 0x76, 0xe1, 0xff,
	0xf0, 0xfe, 0x43, 0x37, 0xdd, 0x75, 0xd9, 0x55, 0x81, 0x6e, 0x8a, 0x76, 0xdb, 0xbf, 0xd3, 0x4d,
	0x51, 0xa0, 0x98, 0x19, 0x91, 0xa2, 0x64, 0xe5, 0x41, 0x08, 0xbc, 0xb3, 0xce, 0xbd, 0xe7, 0x9c,
	0x7b, 0x67, 0x86, 0xf3, 0x61, 0x40, 0xe1, 0xc2, 0x77, 0xc3, 0xc9, 0x1f, 0xc4, 0x34, 0x3e, 0xfd,
	0x14, 0x85, 0x71, 0x88, 0x8b, 0xe1, 0xc2, 0x7f, 0x7f, 0xa2, 0xf0, 0x69, 0x78, 0x7b, 0x1b, 0x06,
	0x1a, 0x6f, 0xfd, 0x0f, 0x00, 0x0d, 0x62, 0x2f, 0xf6, 0xc3, 0xc0, 0x8b, 0x1e, 0x1c, 0x45, 0xc1,
	0x6f, 0x20, 0xef, 0xcf, 0x8e, 0x73, 0x6f, 0x72, 0x6f, 0x2b, 0x67, 0xe8, 0x54, 0x32, 0x4f, 0xe9,
	0x4c, 0x04, 0xb1, 0xff, 0xc1, 0x17, 0x11, 0xcb, 0xfb, 0x33, 0xfc, 0x16, 0x8a, 0x13, 0x6f, 0x21,
	0x8e, 0xf3, 0x2a, 0xe7, 0xb9, 0xce, 0x69, 0x7b, 0x0b, 0xb1, 0xd2, 0x62, 0x2a, 0x03, 0xf7, 0xa1,
	0x3e, 0x9d, 0x7b, 0x8b, 0x85, 0xff, 0xc1, 0x9f, 0xaa, 0xd0, 0x71, 0x41, 0x71, 0x7e, 0xae, 0x39,
	0x9b, 0xde, 0xa7, 0xe6, 0x5a, 0x32, 0xdb, 0x20, 0x9f, 0xfc, 0xfb, 0x00, 0xea, 0xeb, 0x29, 0xf8,
	0x37, 0x50, 0x8c, 0x1f, 0x3e, 0x09, 0x55, 0x6f, 0xfd, 0xec, 0x97, 0x3b, 0xe9, 0x9e, 0xf2, 0x87,
	0x4f, 0x82, 0x29, 0x1e, 0xfe, 0x2d, 0x94, 0x6f, 0xbd, 0x58, 0x44, 0xbe, 0x37, 0x57, 0xfd, 0xd4,
	0xcf, 0x4e, 0x77, 0xd3, 0xe8, 0x2f, 0x59, 0x2c, 0xe5, 0xe3, 0x2e, 0xec, 0xcf, 0x44, 0xb0, 0xf0,
	0xe3, 0x07, 0xd5, 0x66, 0xfd, 0xec, 0xdd, 0x6e, 0x52, 0x1d, 0x4d, 0x62, 0x09, 0x1b, 0x1b, 0x50,
	0x9a, 0x86, 0xf3, 0x30, 0x3a, 0x2e, 0x2a, 0x99, 0xef, 0x76, 0x93, 0x31, 0x25, 0x85, 0x69, 0x66,
	0xeb, 0x3f, 0x79, 0x28, 0xca, 0x36, 0x31, 0x82, 0x2a, 0x1f, 0x5f, 0x12, 0x77, 0x68, 0x5f, 0xd8,
	0xce, 0x95, 0x8d, 0x7e, 0x82, 0xeb, 0x00, 0x0a, 0x71, 0x78, 0x8f, 0x30, 0x94, 0xc3, 0x0d, 0xa8,
	0xa8, 0xdf, 0x6d, 0x46, 0x3b, 0x5d, 0x82, 0xf2, 0xb8, 0x09, 0x35, 0x0d, 0x0c, 0xa9, 0xd5, 0xa1,
	0x76, 0x17, 0x15, 0x70, 0x0d, 0x0e, 0x14, 0x74, 0xe9, 0x58, 0x04, 0x15, 0x53, 0x89, 0xcb, 0xb1,
	0xe5, 0xd8, 0xa8, 0x84, 0x9f, 0x41, 0x43, 0xfd, 0xee, 0x10, 0x8b, 0xda, 0xc4, 0xe0, 0x0e, 0x43,
	0x7b, 0x29, 0x87, 0x33, 0x42, 0xd0, 0x7e, 0x5a, 0x48, 0xdb, 0x60, 0x8c, 0x12, 0x86, 0xca, 0x29,
	0x6b, 0x44, 0xba, 0x84, 0x1b, 0x9c, 0x3a, 0x36, 0x3a, 0xc0, 0x18, 0xea, 0x0a, 0x34, 0x87, 0xac,
	0x3d, 0xe0, 0x8e, 0x4d, 0x10, 0xa4, 0x4a, 0x57, 0x86, 0x65, 0xa1, 0x0a, 0x7e, 0x05, 0x47, 0x4b,
	0x1e, 0xe3, 0xd4, 0x34, 0x2c, 0x77, 0xc0, 0xd9, 0xd0, 0xe4, 0x43, 0x46, 0x50, 0x15, 0x7f, 0x03,
	0x27, 0x2a, 0xc8, 0x88, 0xc9, 0x0d, 0xbb, 0x3b, 0xb4, 0x0c, 0x96, 0x89, 0xd7, 0x52, 0xb2, 0x33,
	0x22, 0xac, 0x47, 0x8c, 0x4e, 0x26, 0x58, 0xc7, 0x5f, 0xc3, 0xcb, 0x25, 0xf9, 0xdc, 0x22, 0x26,
	0xa7, 0x23, 0x92, 0x09, 0x37, 0x70, 0x0b, 0xbe, 0xd1, 0xb5, 0x39, 0xb6, 0x86, 0xa9, 0x63, 0xbb,
	0x03, 0xca, 0x89, 0x4b, 0x2c, 0xd2, 0x27, 0x36, 0x47, 0xa8, 0xf5, 0x8f, 0x1c, 0x94, 0x93, 0xb5,
	0x81, 0x9f, 0x03, 0xea, 0x1b, 0x9c, 0x30, 0x6a, 0x58, 0x99, 0x09, 0xc0, 0x50, 0x4f, 0xd1, 0x64,
	0x12, 0x9a, 0x50, 0x4b, 0xb1, 0x2b, 0xc7, 0xe9, 0xa0, 0xfc, 0x1a, 0xf9, 0xd2, 0x32, 0x06, 0x9c,
	0x9a, 0xa8, 0x80, 0x0f, 0xa1, 0x99, 0xa2, 0xa6, 0x63, 0x9b, 0x8c, 0x70, 0x39, 0x23, 0x59, 0xcd,
	0x3e, 0xe1, 0x86, 0x85, 0x4a, 0x6b, 0x98, 0x1e, 0xca, 0xbd, 0x35, 0x9f, 0xae, 0x65, 0x0c, 0xf4,
	0xc4, 0xac, 0xa8, 0xc3, 0x0e, 0x2a, 0xb7, 0xfe, 0x94, 0x83, 0xfd, 0xe5, 0xa2, 0x94, 0x93, 0xd4,
	0x21, 0xf6, 0x80, 0xf2, 0x71, 0xa6, 0x83, 0x26, 0xd4, 0x12, 0x30, 0xd3, 0x40, 0x02, 0x0d, 0x1c,
	0x8b, 0xca, 0x06, 0x5e, 0x00, 0x4e, 0xa1, 0xbe, 0x61, 0xc9, 0xc2, 0x06, 0x3d, 0x54, 0xc0, 0x47,
	0xf0, 0x2c, 0xc1, 0xfb, 0xa4, 0x43, 0x0d, 0x5b, 0x07, 0x8a, 0x59, 0x82, 0x65, 0xb0, 0x2e, 0xd1,
	0x78, 0x49, 0x56, 0x98, 0xda, 0x5d, 0x12, 0x1b, 0xed, 0xb5, 0xfe, 0x99, 0x83, 0x92, 0x5a, 0xef,
	0xd2, 0xd7, 0x74, 0x2c, 0x87, 0x65, 0xaa, 0x6b, 0x40, 0x45, 0x43, 0x49, 0x6d, 0x08, 0xaa, 0x1a,
	0x18, 0x13, 0xcb, 0x72, 0xae, 0x50, 0x7e, 0x95, 0xd2, 0x65, 0x84, 0xd8, 0xa8, 0x20, 0x57, 0xb4,
	0x06, 0xda, 0xd6, 0x50, 0x8e, 0x67, 0x4a, 0x19, 0x51, 0xc7, 0x22, 0x1c, 0x95, 0xe4, 0x22, 0xd4,
	0x08, 0x23, 0x1d, 0xb4, 0xb7, 0x4a, 0x70, 0x98, 0x61, 0x77, 0xe5, 0x02, 0x4f, 0x35, 0xdb, 0x96,
	0x61, 0x5e, 0xa0, 0xf2, 0x4a, 0xb3, 0xcb, 0xc8, 0x18, 0x1d, 0xac, 0x12, 0xae, 0x7a, 0x94, 0x13,
	0x04, 0xad, 0x7f, 0x1d, 0x42, 0xb5, 0x1f, 0xde, 0xfb, 0xc1, 0xf5, 0xce, 0x7b, 0xef, 0xb7, 0x6b,
	0x7b, 0x2f, 0x5a, 0xed, 0xbd, 0x5a, 0x67, 0xb9, 0xef, 0x7e, 0xb7, 0xdc, 0x15, 0xf5, 0x36, 0x74,
	0xa4, 0xb3, 0xb2, 0x4e, 0xd9, 0x2d, 0xf0, 0x7b, 0x40, 0x72, 0x1f, 0xb9, 0x0e, 0xc4, 0xcc, 0x9d,
	0x7b, 0x81, 0x70, 0xfd, 0xd9, 0x71, 0xf1, 0x4d, 0x61, 0x6b, 0x09, 0xf5, 0x24, 0xd3, 0xf2, 0x02,
	0x41, 0x67, 0x78, 0x00, 0xf8, 0x5e, 0xdc, 0xf8, 0xd3, 0xb9, 0x70, 0xbd, 0x38, 0x8e, 0xfc, 0xc9,
	0x5d, 0x2c, 0x16, 0xc7, 0x25, 0x55, 0xdc, 0xb7, 0x5b, 0x6c, 0x47, 0x3a, 0xd9, 0x48, 0x73, 0x59,
	0xf3, 0x7e, 0x13, 0xc2, 0x2e, 0xbc, 0x48, 0x44, 0x37, 0x4e, 0x8f, 0x3d, 0x25, 0xfc, 0xf6, 0xf3,
	0xc2, 0x1b, 0x07, 0xc8, 0xe1, 0xfd, 0x36, 0xf8, 0xe4, 0x2f, 0x79, 0x68, 0x3e, 0xaa, 0x04, 0xbf,
	0x83, 0x83, 0x59, 0xe4, 0xdf, 0x8b, 0xc8, 0xfd, 0x91, 0x39, 0x28, 0xeb, 0x14, 0x3a, 0xc3, 0x3f,
	0x85, 0x6a, 0xe4, 0xcd, 0xfc, 0xbb, 0x85, 0xfb, 0xc7, 0x1b, 0x21, 0xf4, 0xe9, 0x91, 0x63, 0x15,
	0x8d, 0x5d, 0x49, 0x08, 0xff, 0x0c, 0x6a, 0xc1, 0xdd, 0xed, 0x44, 0x44, 0x3a, 0x65, 0xa1, 0xe6,
	0xa3, 0xc6, 0xaa, 0x1a, 0x54, 0x39, 0x0b, 0xfc, 0x6b, 0x40, 0x93, 0xc9, 0x54, 0x04, 0xb1, 0x88,
	0xdc, 0x38, 0x74, 0x23, 0xe1, 0xe9, 0x7d, 0xbf, 0x72, 0x56, 0xd7, 0xee, 0x23, 0x31, 0x8d, 0xc3,
	0xe8, 0xfd, 0x8c, 0xd5, 0x93, 0x3c, 0x1e, 0x32, 0xe1, 0x45, 0xf8, 0x7b, 0x68, 0x66, 0x99, 0x1f,
	0xa2, 0x30, 0x88, 0x97, 0x63, 0xbf, 0x49, 0x6d, 0xac, 0xa8, 0xe7, 0x32, 0x0d, 0xff, 0x02, 0xd0,
	0x75, 0x14, 0xde, 0x05, 0x33, 0x77, 0x3a, 0x17, 0x5e, 0xe4, 0x05, 0x53, 0xa1, 0x46, 0x37, 0xc7,
	0x1a, 0x1a, 0x37, 0x13, 0xf8, 0xe4, 0xef, 0x0d, 0x38, 0xdc, 0x3a, 0xbc, 0xd8, 0x58, 0x3b, 0x7c,
	0xdf, 0xed, 0x3a, 0x2d, 0xd9, 0xc5, 0xc7, 0xa1, 0x32, 0xf7, 0xaf, 0x6f, 0x62, 0x77, 0x11, 0x7b,
	0x71, 0xb2, 0xac, 0xdf, 0xef, 0xac, 0x64, 0x49, 0xae, 0x3c, 0x18, 0x05, 0x83, 0x79, 0xfa, 0x37,
	0x7e, 0x0d, 0x95, 0x1b, 0x6f, 0xe1, 0xc6, 0x91, 0xe7, 0xcf, 0x45, 0xa4, 0x86, 0xbd, 0xcc, 0xe0,
	0xc6, 0x5b, 0x70, 0x8d, 0xe0, 0x5f, 0x01, 0x2c, 0x83, 0x7a, 0xb5, 0x6f, 0x9f, 0xec, 0x83, 0x65,
	0x0e, 0x9d, 0x9d, 0xfc, 0x17, 0x00, 0x56, 0x66, 0xf8, 0x23, 0x34, 0xfc, 0x60, 0x26, 0xab, 0x08,
	0xa3, 0x65, 0xe9, 0x7a, 0x10, 0xda, 0x5f, 0x50, 0xfa, 0x29, 0x4d, 0xa4, 0x74, 0x27, 0x75, 0x7f,
	0xed, 0x37, 0xbe, 0x85, 0x86, 0x9a, 0x5b, 0xf7, 0x43, 0x78, 0xed, 0xaa, 0x2e, 0x97, 0x57, 0x15,
	0xf2, 0x25, 0x66, 0x5d, 0x11, 0x88, 0xc8, 0x9f, 0x66, 0x46, 0xae, 0xa6, 0xd4, 0xcf, 0xc3, 0x6b,
	0x85, 0xe1, 0x8f, 0x50, 0x97, 0x8b, 0x30, 0xe3, 0x56, 0x78, 0x4a, 0xb7, 0xaa, 0x14, 0x4f, 0xcd,
	0x66, 0x00, 0x37, 0xc2, 0x9b, 0x2d, 0x8d, 0x8a, 0x4f, 0x69, 0x74, 0x20, 0x85, 0xb5, 0xcb, 0x04,
	0x0e, 0x6e, 0xfc, 0xeb, 0x1b, 0x77, 0x22, 0xbc, 0x5b, 0xf5, 0x85, 0x3c, 0x99, 0x49, 0x59, 0xea,
	0xb6, 0x85, 0x77, 0x8b, 0x03, 0x68, 0x44, 0xe2, 0x5e, 0x44, 0x0b, 0x3f, 0x48, 0xc6, 0x6d, 0xef,
	0x29, 0x9d, 0xea, 0xa9, 0xba, 0xee, 0x29, 0x84, 0xe6, 0x24, 0xf2, 0x3e, 0x0a, 0x37, 0xfb, 0xfd,
	0xec, 0x2b, 0x47, 0xf3, 0x4b, 0x1c, 0xdb, 0x52, 0x2c, 0xe3, 0xd7, 0x98, 0xac, 0x03, 0xf8, 0x87,
	0x1c, 0xbc, 0x9e, 0xfb, 0x53, 0x11, 0x2c, 0x84, 0xfb, 0x69, 0xee, 0xc5, 0xc2, 0xf5, 0xe7, 0xf3,
	0xbb, 0x5b, 0x3f, 0x50, 0x52, 0x7a, 0xe3, 0x2a, 0x3f, 0x65, 0xc7, 0x5f, 0x2d, 0xdd, 0x2e, 0xa5,
	0x19, 0xcd, 0x78, 0xc9, 0xdd, 0xaf, 0xf5, 0xd7, 0x1c, 0xd4, 0xd7, 0x3f, 0x1c, 0x79, 0xb7, 0xa3,
	0x76, 0x87, 0x9a, 0xf2, 0x02, 0xea, 0x0e, 0xb8, 0xc1, 0xb3, 0xd7, 0xde, 0x97, 0x70, 0xb8, 0x19,
	0x4c, 0xee, 0x07, 0x47, 0xf0, 0xec, 0x51, 0xe8, 0xfc, 0x1c, 0xe5, 0xf1, 0x31, 0x3c, 0xdf, 0x0c,
	0x58, 0xe4, 0x9c, 0xa3, 0xc2, 0x36, 0x35, 0x46, 0xbb, 0x3d, 0x8e, 0x8a, 0xdb, 0xaa, 0xb8, 0x32,
	0x98, 0x2d, 0x2f, 0xd2, 0xa5, 0xd6, 0x0f, 0x39, 0x68, 0x3e, 0xea, 0x14, 0xbf, 0x86, 0x57, 0x5d,
	0x62, 0x13, 0x46, 0x4d, 0xd7, 0x92, 0x2a, 0x8f, 0x8a, 0xff, 0x1a, 0x5e, 0x6e, 0x4b, 0x48, 0x1a,
	0x78, 0x05, 0x47, 0x5b, 0xc3, 0xaa, 0x89, 0x13, 0x78, 0xb1, 0x35, 0x68, 0xa3, 0x42, 0xeb, 0xcf,
	0x39, 0x68, 0x6c, 0x4c, 0xbc, 0xf4, 0x6a, 0x33, 0xe3, 0x82, 0x7c, 0xa6, 0x94, 0x57, 0x70, 0xf4,
	0x38, 0x9c, 0x14, 0xf2, 0x12, 0x0e, 0xb7, 0x04, 0x55, 0x19, 0x5f, 0xc1, 0xf1, 0xe3, 0x90, 0xed,
	0xb0, 0xbe, 0x61, 0xa1, 0xc2, 0xf6, 0xe8, 0x80, 0x33, 0xc7, 0xee, 0xa2, 0x62, 0xeb, 0x6f, 0xbb,
	0xbf, 0x66, 0x92, 0xf7, 0x83, 0xbe, 0x71, 0x9a, 0x06, 0xd3, 0x37, 0xe9, 0xe5, 0xbd, 0xbd, 0x7f,
	0x69, 0x98, 0x5c, 0xa1, 0x85, 0xf4, 0xf9, 0x21, 0xef, 0xa0, 0xc3, 0xbe, 0x02, 0x8b, 0x29, 0x68,
	0x0d, 0x7f, 0x37, 0x64, 0x63, 0x05, 0x96, 0xe4, 0x9d, 0x3b, 0x7d, 0xde, 0x8c, 0x08, 0x1b, 0xbb,
	0x23, 0xc3, 0x46, 0x7b, 0xa9, 0x6c, 0x8f, 0x18, 0xa3, 0xb1, 0x2b, 0x1f, 0x04, 0x17, 0x68, 0x3f,
	0x45, 0x07, 0xa4, 0x4f, 0x39, 0x33, 0xa8, 0xa5, 0xde, 0x3a, 0x49, 0xe1, 0x09, 0xb2, 0x7a, 0xe8,
	0xf4, 0x1d, 0xee, 0xb0, 0x36, 0xbd, 0x90, 0x0f, 0x9d, 0xf4, 0x8d, 0x44, 0xcd, 0xb1, 0x69, 0x11,
	0x54, 0xc1, 0x55, 0x28, 0x2f, 0xdf, 0x62, 0x03, 0x54, 0xcd, 0x3c, 0xa9, 0x8c, 0x3e, 0xaa, 0xa5,
	0xbd, 0x4b, 0x51, 0x1b, 0xd5, 0xd3, 0xe2, 0xaf, 0x7a, 0x84, 0x58, 0x66, 0xcf, 0xa0, 0x0c, 0x35,
	0x5a, 0xbf, 0xdf, 0x79, 0xe8, 0x92, 0x8c, 0x11, 0xe9, 0x51, 0xe9, 0x9e, 0x4f, 0x05, 0x2f, 0x49,
	0x87, 0x0c, 0x38, 0xa3, 0x86, 0xbc, 0x2a, 0x27, 0xef, 0x45, 0xc3, 0xa6, 0x72, 0xee, 0x8a, 0xed,
	0x7c, 0x2f, 0x37, 0xd9, 0x53, 0xff, 0x51, 0x78, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0d,
	0xa4, 0x2d, 0xa8, 0x7d, 0x10, 0x00, 0x00,
}
