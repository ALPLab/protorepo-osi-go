// Code generated by protoc-gen-go. DO NOT EDIT.
// source: osi_trafficsign.proto

package osi3

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Unit for values on traffic sign
//
type TrafficSignValue_Unit int32

const (
	// Unit of the sign's value is unknown (must not be used in ground
	// truth).
	//
	TrafficSignValue_UNIT_UNKNOWN TrafficSignValue_Unit = 0
	// Other (unspecified but known) unit of the sign's value.
	//
	TrafficSignValue_UNIT_OTHER TrafficSignValue_Unit = 1
	// Value without
	// unit.
	//
	// Unit: []
	//
	TrafficSignValue_UNIT_NO_UNIT TrafficSignValue_Unit = 2
	// Velocity.
	// Kilometers per hour.
	//
	// Unit: [km/h]
	//
	TrafficSignValue_UNIT_KILOMETER_PER_HOUR TrafficSignValue_Unit = 3
	// Velocity .
	// Miles per hour.
	//
	// Unit: [mph]
	//
	TrafficSignValue_UNIT_MILE_PER_HOUR TrafficSignValue_Unit = 4
	// Length.
	// Meter.
	//
	// Unit: [m]
	//
	TrafficSignValue_UNIT_METER TrafficSignValue_Unit = 5
	// Length.
	// Kilometer.
	//
	// Unit: [km]
	//
	TrafficSignValue_UNIT_KILOMETER TrafficSignValue_Unit = 6
	// Length.
	// Feet.
	//
	// Unit: [ft]
	//
	TrafficSignValue_UNIT_FEET TrafficSignValue_Unit = 7
	// Length.
	// Mile.
	//
	// Unit: [mile]
	//
	TrafficSignValue_UNIT_MILE TrafficSignValue_Unit = 8
	// Weight.
	// Ton.
	//
	// Unit: [t]
	//
	TrafficSignValue_UNIT_METRIC_TON TrafficSignValue_Unit = 9
	// Weight.
	// Long ton UK 1,016.047 [kg].
	//
	// Unit: [tn. l.]
	//
	TrafficSignValue_UNIT_LONG_TON TrafficSignValue_Unit = 10
	// Weight.
	// Short ton USA 907.1847 [kg].
	//
	// Unit: [tn. sh.]
	//
	TrafficSignValue_UNIT_SHORT_TON TrafficSignValue_Unit = 11
	// Time of day.
	// Hour since midnight.
	//
	// Unit: [min]
	//
	TrafficSignValue_UNIT_MINUTES TrafficSignValue_Unit = 12
	// Day of the week.
	// Days since Monday. Monday = 0; Tuesday = 1; ...
	//
	// Unit: []
	//
	TrafficSignValue_UNIT_DAY TrafficSignValue_Unit = 13
	// Percentage.
	// Value.
	//
	// Unit: [%]
	//
	TrafficSignValue_UNIT_PERCENTAGE TrafficSignValue_Unit = 14
)

var TrafficSignValue_Unit_name = map[int32]string{
	0:  "UNIT_UNKNOWN",
	1:  "UNIT_OTHER",
	2:  "UNIT_NO_UNIT",
	3:  "UNIT_KILOMETER_PER_HOUR",
	4:  "UNIT_MILE_PER_HOUR",
	5:  "UNIT_METER",
	6:  "UNIT_KILOMETER",
	7:  "UNIT_FEET",
	8:  "UNIT_MILE",
	9:  "UNIT_METRIC_TON",
	10: "UNIT_LONG_TON",
	11: "UNIT_SHORT_TON",
	12: "UNIT_MINUTES",
	13: "UNIT_DAY",
	14: "UNIT_PERCENTAGE",
}

var TrafficSignValue_Unit_value = map[string]int32{
	"UNIT_UNKNOWN":            0,
	"UNIT_OTHER":              1,
	"UNIT_NO_UNIT":            2,
	"UNIT_KILOMETER_PER_HOUR": 3,
	"UNIT_MILE_PER_HOUR":      4,
	"UNIT_METER":              5,
	"UNIT_KILOMETER":          6,
	"UNIT_FEET":               7,
	"UNIT_MILE":               8,
	"UNIT_METRIC_TON":         9,
	"UNIT_LONG_TON":           10,
	"UNIT_SHORT_TON":          11,
	"UNIT_MINUTES":            12,
	"UNIT_DAY":                13,
	"UNIT_PERCENTAGE":         14,
}

func (x TrafficSignValue_Unit) String() string {
	return proto.EnumName(TrafficSignValue_Unit_name, int32(x))
}

func (TrafficSignValue_Unit) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2a8b9d9156670650, []int{0, 0}
}

// Definition of the variability of a traffic sign.
//
type TrafficSign_Variability int32

const (
	// Variability type of sign is unknown (must not be used in ground
	// truth).
	//
	TrafficSign_VARIABILITY_UNKNOWN TrafficSign_Variability = 0
	// Other (unspecified but known) variability.
	//
	TrafficSign_VARIABILITY_OTHER TrafficSign_Variability = 1
	// Fixed sign, i.e. always present.
	//
	TrafficSign_VARIABILITY_FIXED TrafficSign_Variability = 2
	// Temporary or variable sign, e.g. on a sign bridge.
	//
	TrafficSign_VARIABILITY_VARIABLE TrafficSign_Variability = 3
)

var TrafficSign_Variability_name = map[int32]string{
	0: "VARIABILITY_UNKNOWN",
	1: "VARIABILITY_OTHER",
	2: "VARIABILITY_FIXED",
	3: "VARIABILITY_VARIABLE",
}

var TrafficSign_Variability_value = map[string]int32{
	"VARIABILITY_UNKNOWN":  0,
	"VARIABILITY_OTHER":    1,
	"VARIABILITY_FIXED":    2,
	"VARIABILITY_VARIABLE": 3,
}

func (x TrafficSign_Variability) String() string {
	return proto.EnumName(TrafficSign_Variability_name, int32(x))
}

func (TrafficSign_Variability) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2a8b9d9156670650, []int{1, 0}
}

// Definition of traffic sign types.
// Numbers are given according to German StVO.
//
// For an overview see:
// \arg
// https://www.dvr.de/publikationen/downloads/verkehrszeichen.html
// (Images) \arg
// https://www.gesetze-im-internet.de/stvo_2013/anlage_1.html
// (Allgemeine und Besondere Gefahrenzeichen) \arg
// https://www.gesetze-im-internet.de/stvo_2013/anlage_2.html
// (Vorschriftzeichen) \arg
// https://www.gesetze-im-internet.de/stvo_2013/anlage_3.html
// (Richtzeichen) \arg
// https://www.gesetze-im-internet.de/stvo_2013/anlage_4.html
// (Verkehrseinrichtungen) \arg https://traffic-rules.com/
//
type TrafficSign_MainSign_Classification_Type int32

const (
	// Type of traffic sign is unknown (must not be used in ground
	// truth).
	//
	TrafficSign_MainSign_Classification_TYPE_UNKNOWN TrafficSign_MainSign_Classification_Type = 0
	// Other (unspecified but known) type of traffic sign.
	//
	TrafficSign_MainSign_Classification_TYPE_OTHER TrafficSign_MainSign_Classification_Type = 1
	// Danger sign
	// (StVO 101).
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/101.png
	//
	TrafficSign_MainSign_Classification_TYPE_DANGER_SPOT TrafficSign_MainSign_Classification_Type = 2
	// "Right before left" rule at the next intersection
	// (StVO 102).
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/102.png
	//
	TrafficSign_MainSign_Classification_TYPE_RIGHT_BEFORE_LEFT_NEXT_INTERSECTION TrafficSign_MainSign_Classification_Type = 3
	// Warning sign for a left turn
	// (StVO 103.1). Right: \c #TYPE_TURN_RIGHT
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/103-10.png
	//
	TrafficSign_MainSign_Classification_TYPE_TURN_LEFT TrafficSign_MainSign_Classification_Type = 4
	// Warning sign for a right turn
	// (StVO 103.2). Left: \c #TYPE_TURN_LEFT
	//
	// See e.g.:
	//
	TrafficSign_MainSign_Classification_TYPE_TURN_RIGHT TrafficSign_MainSign_Classification_Type = 5
	// Warning sign for a double turn (first left turn)
	// (StVO 105.1). Right: \c #TYPE_DOUBLE_TURN_RIGHT
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/105-10.png
	//
	TrafficSign_MainSign_Classification_TYPE_DOUBLE_TURN_LEFT TrafficSign_MainSign_Classification_Type = 6
	// Warning sign for a double turn (first right turn)
	// (StVO 105.2). Left: \c #TYPE_DOUBLE_TURN_LEFT
	//
	// See e.g.:
	//
	TrafficSign_MainSign_Classification_TYPE_DOUBLE_TURN_RIGHT TrafficSign_MainSign_Classification_Type = 7
	// Steep hill downwards (StVO 108) \c TrafficSignValue::value
	// and \c TrafficSignValue::value_unit .
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/108-10.png
	//
	TrafficSign_MainSign_Classification_TYPE_HILL_DOWNWARDS TrafficSign_MainSign_Classification_Type = 8
	// Steep hill upwards (StVO 110) \c TrafficSignValue::value and
	// \c TrafficSignValue::value_unit .
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/110-12.png
	//
	TrafficSign_MainSign_Classification_TYPE_HILL_UPWARDS TrafficSign_MainSign_Classification_Type = 9
	// Warning for road narrowing
	// (StVO 120).
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/120.png
	//
	TrafficSign_MainSign_Classification_TYPE_WARNING_ROAD_NARROWING TrafficSign_MainSign_Classification_Type = 10
	// Warning for road narrowing on the left
	// (StVO 121.2).
	//
	// See e.g.:
	//
	TrafficSign_MainSign_Classification_TYPE_WARNING_ROAD_NARROWING_LEFT TrafficSign_MainSign_Classification_Type = 11
	// Warning for road narrowing on the right
	// (StVO 121.1).
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/121-10.png
	//
	TrafficSign_MainSign_Classification_TYPE_WARNING_ROAD_NARROWING_RIGHT TrafficSign_MainSign_Classification_Type = 12
	// Road works sign
	// (StVO 123)
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/123.png
	//
	TrafficSign_MainSign_Classification_TYPE_ROAD_WORKS TrafficSign_MainSign_Classification_Type = 13
	// Warning for two-way-traffic (after one-way lane)
	// (StVO 125).
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/125.png
	//
	TrafficSign_MainSign_Classification_TYPE_WARNING_TWO_WAY_TRAFFIC TrafficSign_MainSign_Classification_Type = 14
	// Traffic light ahead sign
	// (StVO 131).
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/131.png
	//
	TrafficSign_MainSign_Classification_TYPE_ATTENTION_TRAFFIC_LIGHT TrafficSign_MainSign_Classification_Type = 15
	// Give way sign
	// (StVO 205).
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/205.png
	//
	// As symbolic road marking
	// \c RoadMarking::Classification::TYPE_SYMBOLIC_TRAFFIC_SIGN
	// (StVO 341)
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/341.png
	//
	TrafficSign_MainSign_Classification_TYPE_GIVE_WAY TrafficSign_MainSign_Classification_Type = 16
	// Stop sign
	// (StVO 206).
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/206.png
	//
	// As symbolic road marking
	// \c RoadMarking::Classification::TYPE_SYMBOLIC_TRAFFIC_SIGN
	// (StVO 294)
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/294.png
	//
	TrafficSign_MainSign_Classification_TYPE_STOP TrafficSign_MainSign_Classification_Type = 17
	// Priority must be given to vehicles from the opposite
	// direction (StVO 208). Or: \c
	// #TYPE_PRIORITY_OVER_OPPOSITE_DIRECTION
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/208.png
	//
	TrafficSign_MainSign_Classification_TYPE_PRIORITY_TO_OPPOSITE_DIRECTION TrafficSign_MainSign_Classification_Type = 18
	// Priority must be given to vehicles from the opposite
	// direction (StVO 208 Upside down). Or: \c
	// #TYPE_PRIORITY_TO_OPPOSITE_DIRECTION
	//
	// See e.g.:
	//
	TrafficSign_MainSign_Classification_TYPE_PRIORITY_TO_OPPOSITE_DIRECTION_UPSIDE_DOWN TrafficSign_MainSign_Classification_Type = 19
	// Prescribed left turn
	// (StVO 209.1). Right: \c #TYPE_PRESCRIBED_RIGHT_TURN
	//
	// See e.g.:
	//
	// As symbolic road marking
	// \c RoadMarking::Classification::TYPE_SYMBOLIC_TRAFFIC_SIGN
	// (StVO 297)
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/297.png
	//
	TrafficSign_MainSign_Classification_TYPE_PRESCRIBED_LEFT_TURN TrafficSign_MainSign_Classification_Type = 20
	// Prescribed right turn
	// (StVO 209.2). Left: \c #TYPE_PRESCRIBED_LEFT_TURN
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/209.png
	//
	// As symbolic road marking
	// \c RoadMarking::Classification::TYPE_SYMBOLIC_TRAFFIC_SIGN
	// (StVO 297)
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/297.png
	//
	TrafficSign_MainSign_Classification_TYPE_PRESCRIBED_RIGHT_TURN TrafficSign_MainSign_Classification_Type = 21
	// Prescribed driving straight ahead
	// (StVO 209.3).
	//
	// See e.g.:
	//
	// As symbolic road marking
	// \c RoadMarking::Classification::TYPE_SYMBOLIC_TRAFFIC_SIGN
	// (StVO 297)
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/297.png
	//
	TrafficSign_MainSign_Classification_TYPE_PRESCRIBED_STRAIGHT_AHEAD TrafficSign_MainSign_Classification_Type = 22
	// Prescribed left way
	// (StVO 211.1). Right: \c #TYPE_PRESCRIBED_RIGHT_WAY
	//
	// See e.g.:
	//
	TrafficSign_MainSign_Classification_TYPE_PRESCRIBED_LEFT_WAY TrafficSign_MainSign_Classification_Type = 23
	// Prescribed right way
	// (StVO 211.2). Left: \c #TYPE_PRESCRIBED_LEFT_WAY
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/211.png
	//
	TrafficSign_MainSign_Classification_TYPE_PRESCRIBED_RIGHT_WAY TrafficSign_MainSign_Classification_Type = 24
	// Prescribed left turn and driving straight ahead
	// (StVO 214.1). Right: \c
	// #TYPE_PRESCRIBED_RIGHT_TURN_AND_STRAIGHT_AHEAD
	//
	// See e.g.:
	//
	// As symbolic road marking
	// \c RoadMarking::Classification::TYPE_SYMBOLIC_TRAFFIC_SIGN
	// (StVO 297)
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/297.png
	//
	TrafficSign_MainSign_Classification_TYPE_PRESCRIBED_LEFT_TURN_AND_STRAIGHT_AHEAD TrafficSign_MainSign_Classification_Type = 25
	// Prescribed right turn and driving straight ahead
	// (StVO 214.2). Left: \c
	// #TYPE_PRESCRIBED_LEFT_TURN_AND_RIGHT_TURN
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/214.png
	//
	// As symbolic road marking
	// \c RoadMarking::Classification::TYPE_SYMBOLIC_TRAFFIC_SIGN
	// (StVO 297)
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/297.png
	//
	TrafficSign_MainSign_Classification_TYPE_PRESCRIBED_RIGHT_TURN_AND_STRAIGHT_AHEAD TrafficSign_MainSign_Classification_Type = 26
	// Prescribed left and right turn
	// (StVO 214.3).
	//
	// See e.g.:
	//
	// As symbolic road marking
	// \c RoadMarking::Classification::TYPE_SYMBOLIC_TRAFFIC_SIGN
	// (StVO 297)
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/297.png
	//
	TrafficSign_MainSign_Classification_TYPE_PRESCRIBED_LEFT_TURN_AND_RIGHT_TURN TrafficSign_MainSign_Classification_Type = 27
	// Prescribed left turn, right turn and driving straight ahead
	// (required for logical signs as road marking).
	//
	// See e.g.:
	//
	// As symbolic road marking
	// \c RoadMarking::Classification::TYPE_SYMBOLIC_TRAFFIC_SIGN
	// (StVO 297)
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/297.png
	//
	TrafficSign_MainSign_Classification_TYPE_PRESCRIBED_LEFT_TURN_RIGHT_TURN_AND_STRAIGHT_AHEAD TrafficSign_MainSign_Classification_Type = 28
	// Roundabout
	// (StVO 215).
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/215.png
	//
	TrafficSign_MainSign_Classification_TYPE_ROUNDABOUT TrafficSign_MainSign_Classification_Type = 29
	// One-way road to the left
	// (StVO 220.1). Right: \c #TYPE_ONEWAY_RIGHT
	//
	// See e.g.:
	//
	TrafficSign_MainSign_Classification_TYPE_ONEWAY_LEFT TrafficSign_MainSign_Classification_Type = 30
	// One-way road to the right
	// (StVO 220.2). Left: \c #TYPE_ONEWAY_LEFT
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/220-20.png
	//
	TrafficSign_MainSign_Classification_TYPE_ONEWAY_RIGHT TrafficSign_MainSign_Classification_Type = 31
	// Drive past on the left side
	// (StVO 222.1). Right: \c #TYPE_PASS_RIGHT
	//
	// See e.g.:
	//
	TrafficSign_MainSign_Classification_TYPE_PASS_LEFT TrafficSign_MainSign_Classification_Type = 32
	// Drive past on the right side
	// (StVO 222.2). Left: \c #TYPE_PASS_LEFT
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/222.png
	//
	TrafficSign_MainSign_Classification_TYPE_PASS_RIGHT TrafficSign_MainSign_Classification_Type = 33
	// Lane for buses
	// (StVO 245).
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/245.png
	//
	TrafficSign_MainSign_Classification_TYPE_BUS_LANE TrafficSign_MainSign_Classification_Type = 34
	// Bus only lane begin ().
	// End: \c #TYPE_BUS_LANE_END
	//
	TrafficSign_MainSign_Classification_TYPE_BUS_LANE_BEGIN TrafficSign_MainSign_Classification_Type = 35
	// Bus only lane end ().
	// Begin: \c #TYPE_BUS_LANE_BEGIN
	//
	TrafficSign_MainSign_Classification_TYPE_BUS_LANE_END TrafficSign_MainSign_Classification_Type = 36
	// Entry prohibited for all vehicle types
	// (StVO 250).
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/250.png
	//
	TrafficSign_MainSign_Classification_TYPE_PROHIBITED_FOR_ALL TrafficSign_MainSign_Classification_Type = 37
	// Entry prohibited for all motor vehicles
	// (StVO 251).
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/251.png
	//
	TrafficSign_MainSign_Classification_TYPE_PROHIBITED_FOR_MOTOR_VEHICLES TrafficSign_MainSign_Classification_Type = 38
	// Entry prohibited for trucks
	// (StVO 253).
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/253.png
	//
	TrafficSign_MainSign_Classification_TYPE_PROHIBITED_FOR_TRUCKS TrafficSign_MainSign_Classification_Type = 39
	// Entry prohibited for bicycles
	// (StVO 254).
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/254.png
	//
	TrafficSign_MainSign_Classification_TYPE_PROHIBITED_FOR_BICYCLES TrafficSign_MainSign_Classification_Type = 40
	// Entry prohibited for motor bikes
	// (StVO 255).
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/255.png
	//
	TrafficSign_MainSign_Classification_TYPE_PROHIBITED_FOR_MOTOR_AND_BIKES TrafficSign_MainSign_Classification_Type = 41
	// Entry prohibited for pedestrians
	// (StVO 259).
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/259.png
	//
	TrafficSign_MainSign_Classification_TYPE_PROHIBITED_FOR_PEDESTRIANS TrafficSign_MainSign_Classification_Type = 42
	// Entry prohibited for all motor vehicles and bikes
	// (StVO 260).
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/260.png
	//
	TrafficSign_MainSign_Classification_TYPE_PROHIBITED_FOR_MOTOR_VEHICLES_BIKES TrafficSign_MainSign_Classification_Type = 43
	// Entry not allowed
	// (StVO 267).
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/267.png
	//
	TrafficSign_MainSign_Classification_TYPE_DO_NOT_ENTER TrafficSign_MainSign_Classification_Type = 44
	// Start of area without traffic to reduce harmful air pollution
	// (StVO 270.1). End: \c #TYPE_ENVIRONMENTAL_ZONE_END
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/270.1.png
	//
	TrafficSign_MainSign_Classification_TYPE_ENVIRONMENTAL_ZONE_BEGIN TrafficSign_MainSign_Classification_Type = 45
	// End of area without traffic to reduce harmful air pollution
	// (StVO 270.2). Begin: \c #TYPE_ENVIRONMENTAL_ZONE_BEGIN
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/270.2.png
	//
	TrafficSign_MainSign_Classification_TYPE_ENVIRONMENTAL_ZONE_END TrafficSign_MainSign_Classification_Type = 46
	// No U turn left
	// (StVO 272). Right: \c #TYPE_NO_U_TURN_RIGHT
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/272.png
	//
	TrafficSign_MainSign_Classification_TYPE_NO_U_TURN_LEFT TrafficSign_MainSign_Classification_Type = 47
	// No U turn right ().
	// Left: \c #TYPE_NO_U_TURN_LEFT
	//
	TrafficSign_MainSign_Classification_TYPE_NO_U_TURN_RIGHT TrafficSign_MainSign_Classification_Type = 48
	// Prescribed U turn left ().
	// Right: \c #TYPE_PRESCRIBED_U_TURN_RIGHT
	//
	TrafficSign_MainSign_Classification_TYPE_PRESCRIBED_U_TURN_LEFT TrafficSign_MainSign_Classification_Type = 49
	// Prescribed U turn right ().
	// Left: \c #TYPE_PRESCRIBED_U_TURN_LEFT
	//
	TrafficSign_MainSign_Classification_TYPE_PRESCRIBED_U_TURN_RIGHT TrafficSign_MainSign_Classification_Type = 50
	// Minimum safety distance for trucks (StVO 273).
	// \c TrafficSignValue::value and \c
	// TrafficSignValue::value_unit .
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/273.png
	//
	TrafficSign_MainSign_Classification_TYPE_MINIMUM_DISTANCE_FOR_TRUCKS TrafficSign_MainSign_Classification_Type = 51
	// Start of speed limit (StVO 274) \c TrafficSignValue::value
	// and \c TrafficSignValue::value_unit . End: \c
	// #TYPE_SPEED_LIMIT_END
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/274-60.png
	//
	TrafficSign_MainSign_Classification_TYPE_SPEED_LIMIT_BEGIN TrafficSign_MainSign_Classification_Type = 52
	// Start of zone with speed limit (StVO 274.1) \c
	// TrafficSignValue::value and \c TrafficSignValue::value_unit .
	// End: \c #TYPE_SPEED_LIMIT_ZONE_END
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/274.1.png
	//
	TrafficSign_MainSign_Classification_TYPE_SPEED_LIMIT_ZONE_BEGIN TrafficSign_MainSign_Classification_Type = 53
	// End of zone with speed limit (StVO 274.2) \c
	// TrafficSignValue::value and \c TrafficSignValue::value_unit .
	// Begin: \c #TYPE_SPEED_LIMIT_ZONE_BEGIN
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/274.2.png
	//
	TrafficSign_MainSign_Classification_TYPE_SPEED_LIMIT_ZONE_END TrafficSign_MainSign_Classification_Type = 54
	// Start of mandatory minimum speed (StVO 275) \c
	// TrafficSignValue::value and \c TrafficSignValue::value_unit .
	// End: \c #TYPE_MINIMUM_SPEED_END
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/275.png
	//
	TrafficSign_MainSign_Classification_TYPE_MINIMUM_SPEED_BEGIN TrafficSign_MainSign_Classification_Type = 55
	// Start of overtaking ban
	// (StVO 276). End: \c #TYPE_OVERTAKING_BAN_END
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/276.png
	//
	TrafficSign_MainSign_Classification_TYPE_OVERTAKING_BAN_BEGIN TrafficSign_MainSign_Classification_Type = 56
	// Start of overtaking ban for trucks
	// (StVO 277). End: \c #TYPE_OVERTAKING_BAN_FOR_TRUCKS_END
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/277.png
	//
	TrafficSign_MainSign_Classification_TYPE_OVERTAKING_BAN_FOR_TRUCKS_BEGIN TrafficSign_MainSign_Classification_Type = 57
	// End of speed limit (StVO 278) \c TrafficSignValue::value and
	// \c TrafficSignValue::value_unit . Begin: \c
	// #TYPE_SPEED_LIMIT_BEGIN
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/278-60.png
	//
	TrafficSign_MainSign_Classification_TYPE_SPEED_LIMIT_END TrafficSign_MainSign_Classification_Type = 58
	// End of mandatory minimum speed (StVO 279) \c
	// TrafficSignValue::value and \c TrafficSignValue::value_unit .
	// Begin: \c #TYPE_MINIMUM_SPEED_BEGIN
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/279.png
	//
	TrafficSign_MainSign_Classification_TYPE_MINIMUM_SPEED_END TrafficSign_MainSign_Classification_Type = 59
	// End of overtaking ban
	// (StVO 280). Begin: \c #TYPE_OVERTAKING_BAN_BEGIN
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/280.png
	//
	TrafficSign_MainSign_Classification_TYPE_OVERTAKING_BAN_END TrafficSign_MainSign_Classification_Type = 60
	// End of overtaking ban for trucks
	// (StVO 281). Begin: \c #TYPE_OVERTAKING_BAN_FOR_TRUCKS_BEGIN
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/281.png
	//
	TrafficSign_MainSign_Classification_TYPE_OVERTAKING_BAN_FOR_TRUCKS_END TrafficSign_MainSign_Classification_Type = 61
	// End of all speed and overtaking restrictions
	// (StVO 282).
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/282.png
	//
	TrafficSign_MainSign_Classification_TYPE_ALL_RESTRICTIONS_END TrafficSign_MainSign_Classification_Type = 62
	// No stopping sign
	// (StVO 283).
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/283.png
	//
	// As symbolic road marking
	// \c RoadMarking::Classification::TYPE_SYMBOLIC_TRAFFIC_SIGN
	// (StVO 299)
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/299.png
	TrafficSign_MainSign_Classification_TYPE_NO_STOPPING TrafficSign_MainSign_Classification_Type = 63
	// No parking sign
	// (StVO 286).
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/286.png
	//
	// As symbolic road marking
	// \c RoadMarking::Classification::TYPE_SYMBOLIC_TRAFFIC_SIGN
	// (StVO 299)
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/299.png
	//
	TrafficSign_MainSign_Classification_TYPE_NO_PARKING TrafficSign_MainSign_Classification_Type = 64
	// Begin of no parking zone
	// (StVO 290.1). End: \c #TYPE_NO_PARKING_ZONE_END
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/290.1.png
	//
	TrafficSign_MainSign_Classification_TYPE_NO_PARKING_ZONE_BEGIN TrafficSign_MainSign_Classification_Type = 65
	// End of no parking zone
	// (StVO 290.2). Begin: \c #TYPE_NO_PARKING_ZONE_BEGIN
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/290.2.png
	//
	TrafficSign_MainSign_Classification_TYPE_NO_PARKING_ZONE_END TrafficSign_MainSign_Classification_Type = 66
	// Right of way at the next intersection
	// (StVO 301).
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/301.png
	//
	TrafficSign_MainSign_Classification_TYPE_RIGHT_OF_WAY_NEXT_INTERSECTION TrafficSign_MainSign_Classification_Type = 67
	// Begin of priority road with right of way
	// (StVO 306). End: \c #TYPE_RIGHT_OF_WAY_END
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/306.png
	//
	TrafficSign_MainSign_Classification_TYPE_RIGHT_OF_WAY_BEGIN TrafficSign_MainSign_Classification_Type = 68
	// End of priority road with right of way
	// (StVO 307). Begin: \c #TYPE_RIGHT_OF_WAY_BEGIN
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/307.png
	//
	TrafficSign_MainSign_Classification_TYPE_RIGHT_OF_WAY_END TrafficSign_MainSign_Classification_Type = 69
	// Traffic has priority over vehicles from the opposite
	// direction (StVO 308). Or: \c
	// #TYPE_PRIORITY_TO_OPPOSITE_DIRECTION
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/308.png
	//
	TrafficSign_MainSign_Classification_TYPE_PRIORITY_OVER_OPPOSITE_DIRECTION TrafficSign_MainSign_Classification_Type = 70
	// Traffic has priority over vehicles from the opposite
	// direction (StVO 308 Upside down). Or: \c
	// #TYPE_PRIORITY_OVER_OPPOSITE_DIRECTION
	//
	// See e.g.:
	//
	TrafficSign_MainSign_Classification_TYPE_PRIORITY_OVER_OPPOSITE_DIRECTION_UPSIDE_DOWN TrafficSign_MainSign_Classification_Type = 71
	// Town entrance
	// (StVO 310). End: \c #TYPE_TOWN_END
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/310.png
	//
	TrafficSign_MainSign_Classification_TYPE_TOWN_BEGIN TrafficSign_MainSign_Classification_Type = 72
	// Town exit
	// (StVO 311). Begin: \c #TYPE_TOWN_BEGIN
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/311.png
	//
	TrafficSign_MainSign_Classification_TYPE_TOWN_END TrafficSign_MainSign_Classification_Type = 73
	// Parking space
	// (StVO 314).
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/314.png
	//
	TrafficSign_MainSign_Classification_TYPE_CAR_PARKING TrafficSign_MainSign_Classification_Type = 74
	// Begin of parking zone
	// (StVO 314.1). End: \c #TYPE_CAR_PARKING_ZONE_END
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/314.1.png
	//
	TrafficSign_MainSign_Classification_TYPE_CAR_PARKING_ZONE_BEGIN TrafficSign_MainSign_Classification_Type = 75
	// End of parking zone
	// (StVO 314.2). Begin: \c #TYPE_CAR_PARKING_ZONE_BEGIN
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/314.2.png
	//
	TrafficSign_MainSign_Classification_TYPE_CAR_PARKING_ZONE_END TrafficSign_MainSign_Classification_Type = 76
	// Start of area with calmed / reduced traffic
	// (verkehrsberuhigter Bereich - StVO 325.1).
	// End: \c #TYPE_TRAFFIC_CALMED_DISTRICT_END
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/325.1.png
	//
	TrafficSign_MainSign_Classification_TYPE_TRAFFIC_CALMED_DISTRICT_BEGIN TrafficSign_MainSign_Classification_Type = 77
	// End of area with calmed / reduced traffic
	// (verkehrsberuhigter Bereich - StVO 325.2).
	// Begin: \c #TYPE_TRAFFIC_CALMED_DISTRICT_BEGIN
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/325.2.png
	//
	TrafficSign_MainSign_Classification_TYPE_TRAFFIC_CALMED_DISTRICT_END TrafficSign_MainSign_Classification_Type = 78
	// Tunnel ahead
	// (StVO 327).
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/327.png
	//
	TrafficSign_MainSign_Classification_TYPE_TUNNEL TrafficSign_MainSign_Classification_Type = 79
	// Emergency stopping place left
	// (). Right: \c #TYPE_EMERGENCY_STOPPING_RIGHT
	//
	// See e.g.:
	//
	TrafficSign_MainSign_Classification_TYPE_EMERGENCY_STOPPING_LEFT TrafficSign_MainSign_Classification_Type = 80
	// Emergency stopping place right
	// (StVO 328). Left: \c #TYPE_EMERGENCY_STOPPING_LEFT
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/328.png
	//
	TrafficSign_MainSign_Classification_TYPE_EMERGENCY_STOPPING_RIGHT TrafficSign_MainSign_Classification_Type = 81
	// Begin of highway
	// (StVO 330.1). End: \c #TYPE_HIGHWAY_END
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/330.1.png
	//
	TrafficSign_MainSign_Classification_TYPE_HIGHWAY_BEGIN TrafficSign_MainSign_Classification_Type = 82
	// End of highway
	// (StVO 330.2). Begin: \c #TYPE_HIGHWAY_BEGIN
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/330.2.png
	//
	TrafficSign_MainSign_Classification_TYPE_HIGHWAY_END TrafficSign_MainSign_Classification_Type = 83
	// Begin of expressway for motor vehicles
	// (StVO 331.1). End: \c #TYPE_EXPRESSWAY_END
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/331.1.png
	//
	TrafficSign_MainSign_Classification_TYPE_EXPRESSWAY_BEGIN TrafficSign_MainSign_Classification_Type = 84
	// End of expressways for motor vehicles
	// (StVO 331.2). Begin: \c #TYPE_EXPRESSWAY_BEGIN
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/331.2.png
	//
	TrafficSign_MainSign_Classification_TYPE_EXPRESSWAY_END TrafficSign_MainSign_Classification_Type = 85
	// Highway exit sign
	// (StVO 333).
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/333.png
	//
	TrafficSign_MainSign_Classification_TYPE_HIGHWAY_EXIT TrafficSign_MainSign_Classification_Type = 86
	// Pedestrian crossing
	// (StVO 350) - crosswalk.
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/350-10.png
	//
	// As symbolic road marking
	// \c RoadMarking::Classification::TYPE_SYMBOLIC_TRAFFIC_SIGN
	// (StVO 293)
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/293.png
	//
	TrafficSign_MainSign_Classification_TYPE_PEDESTRIAN_CROSSING_INFO TrafficSign_MainSign_Classification_Type = 87
	// Pole indicating highways exit in e.g. 100m (StVO 450,
	// StVO 451, StVO 452).
	// \c TrafficSignValue::value and \c
	// TrafficSignValue::value_unit .
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/450-51.png
	//
	TrafficSign_MainSign_Classification_TYPE_POLE_EXIT TrafficSign_MainSign_Classification_Type = 88
	// End of left lane
	// (StVO 531.2x).
	//
	// See e.g.:
	//
	// As symbolic road marking
	// \c RoadMarking::Classification::TYPE_SYMBOLIC_TRAFFIC_SIGN
	// (StVO 297.1-21)
	//
	// See e.g.:
	//
	// \note No speed limitation
	//
	TrafficSign_MainSign_Classification_TYPE_ANNOUNCE_LEFT_LANE_END TrafficSign_MainSign_Classification_Type = 89
	// End of right lane
	// (StVO 531.1x).
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/531-10.png
	//
	// As symbolic road marking
	// \c RoadMarking::Classification::TYPE_SYMBOLIC_TRAFFIC_SIGN
	// (StVO 297.1-21)
	//
	// See e.g.:
	//
	// \note No speed limitation
	//
	TrafficSign_MainSign_Classification_TYPE_ANNOUNCE_RIGHT_LANE_END TrafficSign_MainSign_Classification_Type = 90
	// Pole for warning and guiding purposes
	// (red/white stripes - StVO 605).
	//
	// See e.g.: https://www.dvr.de/bilder/stvo/gt/605-10.png
	//
	TrafficSign_MainSign_Classification_TYPE_POLE_WARNING TrafficSign_MainSign_Classification_Type = 91
	// Green arrow sign at a traffic light
	// (StVO 720).
	//
	// See e.g.:
	//
	TrafficSign_MainSign_Classification_TYPE_TRAFFIC_LIGHT_GREEN_ARROW TrafficSign_MainSign_Classification_Type = 92
)

var TrafficSign_MainSign_Classification_Type_name = map[int32]string{
	0:  "TYPE_UNKNOWN",
	1:  "TYPE_OTHER",
	2:  "TYPE_DANGER_SPOT",
	3:  "TYPE_RIGHT_BEFORE_LEFT_NEXT_INTERSECTION",
	4:  "TYPE_TURN_LEFT",
	5:  "TYPE_TURN_RIGHT",
	6:  "TYPE_DOUBLE_TURN_LEFT",
	7:  "TYPE_DOUBLE_TURN_RIGHT",
	8:  "TYPE_HILL_DOWNWARDS",
	9:  "TYPE_HILL_UPWARDS",
	10: "TYPE_WARNING_ROAD_NARROWING",
	11: "TYPE_WARNING_ROAD_NARROWING_LEFT",
	12: "TYPE_WARNING_ROAD_NARROWING_RIGHT",
	13: "TYPE_ROAD_WORKS",
	14: "TYPE_WARNING_TWO_WAY_TRAFFIC",
	15: "TYPE_ATTENTION_TRAFFIC_LIGHT",
	16: "TYPE_GIVE_WAY",
	17: "TYPE_STOP",
	18: "TYPE_PRIORITY_TO_OPPOSITE_DIRECTION",
	19: "TYPE_PRIORITY_TO_OPPOSITE_DIRECTION_UPSIDE_DOWN",
	20: "TYPE_PRESCRIBED_LEFT_TURN",
	21: "TYPE_PRESCRIBED_RIGHT_TURN",
	22: "TYPE_PRESCRIBED_STRAIGHT_AHEAD",
	23: "TYPE_PRESCRIBED_LEFT_WAY",
	24: "TYPE_PRESCRIBED_RIGHT_WAY",
	25: "TYPE_PRESCRIBED_LEFT_TURN_AND_STRAIGHT_AHEAD",
	26: "TYPE_PRESCRIBED_RIGHT_TURN_AND_STRAIGHT_AHEAD",
	27: "TYPE_PRESCRIBED_LEFT_TURN_AND_RIGHT_TURN",
	28: "TYPE_PRESCRIBED_LEFT_TURN_RIGHT_TURN_AND_STRAIGHT_AHEAD",
	29: "TYPE_ROUNDABOUT",
	30: "TYPE_ONEWAY_LEFT",
	31: "TYPE_ONEWAY_RIGHT",
	32: "TYPE_PASS_LEFT",
	33: "TYPE_PASS_RIGHT",
	34: "TYPE_BUS_LANE",
	35: "TYPE_BUS_LANE_BEGIN",
	36: "TYPE_BUS_LANE_END",
	37: "TYPE_PROHIBITED_FOR_ALL",
	38: "TYPE_PROHIBITED_FOR_MOTOR_VEHICLES",
	39: "TYPE_PROHIBITED_FOR_TRUCKS",
	40: "TYPE_PROHIBITED_FOR_BICYCLES",
	41: "TYPE_PROHIBITED_FOR_MOTOR_AND_BIKES",
	42: "TYPE_PROHIBITED_FOR_PEDESTRIANS",
	43: "TYPE_PROHIBITED_FOR_MOTOR_VEHICLES_BIKES",
	44: "TYPE_DO_NOT_ENTER",
	45: "TYPE_ENVIRONMENTAL_ZONE_BEGIN",
	46: "TYPE_ENVIRONMENTAL_ZONE_END",
	47: "TYPE_NO_U_TURN_LEFT",
	48: "TYPE_NO_U_TURN_RIGHT",
	49: "TYPE_PRESCRIBED_U_TURN_LEFT",
	50: "TYPE_PRESCRIBED_U_TURN_RIGHT",
	51: "TYPE_MINIMUM_DISTANCE_FOR_TRUCKS",
	52: "TYPE_SPEED_LIMIT_BEGIN",
	53: "TYPE_SPEED_LIMIT_ZONE_BEGIN",
	54: "TYPE_SPEED_LIMIT_ZONE_END",
	55: "TYPE_MINIMUM_SPEED_BEGIN",
	56: "TYPE_OVERTAKING_BAN_BEGIN",
	57: "TYPE_OVERTAKING_BAN_FOR_TRUCKS_BEGIN",
	58: "TYPE_SPEED_LIMIT_END",
	59: "TYPE_MINIMUM_SPEED_END",
	60: "TYPE_OVERTAKING_BAN_END",
	61: "TYPE_OVERTAKING_BAN_FOR_TRUCKS_END",
	62: "TYPE_ALL_RESTRICTIONS_END",
	63: "TYPE_NO_STOPPING",
	64: "TYPE_NO_PARKING",
	65: "TYPE_NO_PARKING_ZONE_BEGIN",
	66: "TYPE_NO_PARKING_ZONE_END",
	67: "TYPE_RIGHT_OF_WAY_NEXT_INTERSECTION",
	68: "TYPE_RIGHT_OF_WAY_BEGIN",
	69: "TYPE_RIGHT_OF_WAY_END",
	70: "TYPE_PRIORITY_OVER_OPPOSITE_DIRECTION",
	71: "TYPE_PRIORITY_OVER_OPPOSITE_DIRECTION_UPSIDE_DOWN",
	72: "TYPE_TOWN_BEGIN",
	73: "TYPE_TOWN_END",
	74: "TYPE_CAR_PARKING",
	75: "TYPE_CAR_PARKING_ZONE_BEGIN",
	76: "TYPE_CAR_PARKING_ZONE_END",
	77: "TYPE_TRAFFIC_CALMED_DISTRICT_BEGIN",
	78: "TYPE_TRAFFIC_CALMED_DISTRICT_END",
	79: "TYPE_TUNNEL",
	80: "TYPE_EMERGENCY_STOPPING_LEFT",
	81: "TYPE_EMERGENCY_STOPPING_RIGHT",
	82: "TYPE_HIGHWAY_BEGIN",
	83: "TYPE_HIGHWAY_END",
	84: "TYPE_EXPRESSWAY_BEGIN",
	85: "TYPE_EXPRESSWAY_END",
	86: "TYPE_HIGHWAY_EXIT",
	87: "TYPE_PEDESTRIAN_CROSSING_INFO",
	88: "TYPE_POLE_EXIT",
	89: "TYPE_ANNOUNCE_LEFT_LANE_END",
	90: "TYPE_ANNOUNCE_RIGHT_LANE_END",
	91: "TYPE_POLE_WARNING",
	92: "TYPE_TRAFFIC_LIGHT_GREEN_ARROW",
}

var TrafficSign_MainSign_Classification_Type_value = map[string]int32{
	"TYPE_UNKNOWN":     0,
	"TYPE_OTHER":       1,
	"TYPE_DANGER_SPOT": 2,
	"TYPE_RIGHT_BEFORE_LEFT_NEXT_INTERSECTION": 3,
	"TYPE_TURN_LEFT":                                          4,
	"TYPE_TURN_RIGHT":                                         5,
	"TYPE_DOUBLE_TURN_LEFT":                                   6,
	"TYPE_DOUBLE_TURN_RIGHT":                                  7,
	"TYPE_HILL_DOWNWARDS":                                     8,
	"TYPE_HILL_UPWARDS":                                       9,
	"TYPE_WARNING_ROAD_NARROWING":                             10,
	"TYPE_WARNING_ROAD_NARROWING_LEFT":                        11,
	"TYPE_WARNING_ROAD_NARROWING_RIGHT":                       12,
	"TYPE_ROAD_WORKS":                                         13,
	"TYPE_WARNING_TWO_WAY_TRAFFIC":                            14,
	"TYPE_ATTENTION_TRAFFIC_LIGHT":                            15,
	"TYPE_GIVE_WAY":                                           16,
	"TYPE_STOP":                                               17,
	"TYPE_PRIORITY_TO_OPPOSITE_DIRECTION":                     18,
	"TYPE_PRIORITY_TO_OPPOSITE_DIRECTION_UPSIDE_DOWN":         19,
	"TYPE_PRESCRIBED_LEFT_TURN":                               20,
	"TYPE_PRESCRIBED_RIGHT_TURN":                              21,
	"TYPE_PRESCRIBED_STRAIGHT_AHEAD":                          22,
	"TYPE_PRESCRIBED_LEFT_WAY":                                23,
	"TYPE_PRESCRIBED_RIGHT_WAY":                               24,
	"TYPE_PRESCRIBED_LEFT_TURN_AND_STRAIGHT_AHEAD":            25,
	"TYPE_PRESCRIBED_RIGHT_TURN_AND_STRAIGHT_AHEAD":           26,
	"TYPE_PRESCRIBED_LEFT_TURN_AND_RIGHT_TURN":                27,
	"TYPE_PRESCRIBED_LEFT_TURN_RIGHT_TURN_AND_STRAIGHT_AHEAD": 28,
	"TYPE_ROUNDABOUT":                                         29,
	"TYPE_ONEWAY_LEFT":                                        30,
	"TYPE_ONEWAY_RIGHT":                                       31,
	"TYPE_PASS_LEFT":                                          32,
	"TYPE_PASS_RIGHT":                                         33,
	"TYPE_BUS_LANE":                                           34,
	"TYPE_BUS_LANE_BEGIN":                                     35,
	"TYPE_BUS_LANE_END":                                       36,
	"TYPE_PROHIBITED_FOR_ALL":                                 37,
	"TYPE_PROHIBITED_FOR_MOTOR_VEHICLES":                      38,
	"TYPE_PROHIBITED_FOR_TRUCKS":                              39,
	"TYPE_PROHIBITED_FOR_BICYCLES":                            40,
	"TYPE_PROHIBITED_FOR_MOTOR_AND_BIKES":                     41,
	"TYPE_PROHIBITED_FOR_PEDESTRIANS":                         42,
	"TYPE_PROHIBITED_FOR_MOTOR_VEHICLES_BIKES":                43,
	"TYPE_DO_NOT_ENTER":                                       44,
	"TYPE_ENVIRONMENTAL_ZONE_BEGIN":                           45,
	"TYPE_ENVIRONMENTAL_ZONE_END":                             46,
	"TYPE_NO_U_TURN_LEFT":                                     47,
	"TYPE_NO_U_TURN_RIGHT":                                    48,
	"TYPE_PRESCRIBED_U_TURN_LEFT":                             49,
	"TYPE_PRESCRIBED_U_TURN_RIGHT":                            50,
	"TYPE_MINIMUM_DISTANCE_FOR_TRUCKS":                        51,
	"TYPE_SPEED_LIMIT_BEGIN":                                  52,
	"TYPE_SPEED_LIMIT_ZONE_BEGIN":                             53,
	"TYPE_SPEED_LIMIT_ZONE_END":                               54,
	"TYPE_MINIMUM_SPEED_BEGIN":                                55,
	"TYPE_OVERTAKING_BAN_BEGIN":                               56,
	"TYPE_OVERTAKING_BAN_FOR_TRUCKS_BEGIN":                    57,
	"TYPE_SPEED_LIMIT_END":                                    58,
	"TYPE_MINIMUM_SPEED_END":                                  59,
	"TYPE_OVERTAKING_BAN_END":                                 60,
	"TYPE_OVERTAKING_BAN_FOR_TRUCKS_END":                      61,
	"TYPE_ALL_RESTRICTIONS_END":                               62,
	"TYPE_NO_STOPPING":                                        63,
	"TYPE_NO_PARKING":                                         64,
	"TYPE_NO_PARKING_ZONE_BEGIN":                              65,
	"TYPE_NO_PARKING_ZONE_END":                                66,
	"TYPE_RIGHT_OF_WAY_NEXT_INTERSECTION":                     67,
	"TYPE_RIGHT_OF_WAY_BEGIN":                                 68,
	"TYPE_RIGHT_OF_WAY_END":                                   69,
	"TYPE_PRIORITY_OVER_OPPOSITE_DIRECTION":                   70,
	"TYPE_PRIORITY_OVER_OPPOSITE_DIRECTION_UPSIDE_DOWN":       71,
	"TYPE_TOWN_BEGIN":                                         72,
	"TYPE_TOWN_END":                                           73,
	"TYPE_CAR_PARKING":                                        74,
	"TYPE_CAR_PARKING_ZONE_BEGIN":                             75,
	"TYPE_CAR_PARKING_ZONE_END":                               76,
	"TYPE_TRAFFIC_CALMED_DISTRICT_BEGIN":                      77,
	"TYPE_TRAFFIC_CALMED_DISTRICT_END":                        78,
	"TYPE_TUNNEL":                                             79,
	"TYPE_EMERGENCY_STOPPING_LEFT":                            80,
	"TYPE_EMERGENCY_STOPPING_RIGHT":                           81,
	"TYPE_HIGHWAY_BEGIN":                                      82,
	"TYPE_HIGHWAY_END":                                        83,
	"TYPE_EXPRESSWAY_BEGIN":                                   84,
	"TYPE_EXPRESSWAY_END":                                     85,
	"TYPE_HIGHWAY_EXIT":                                       86,
	"TYPE_PEDESTRIAN_CROSSING_INFO":                           87,
	"TYPE_POLE_EXIT":                                          88,
	"TYPE_ANNOUNCE_LEFT_LANE_END":                             89,
	"TYPE_ANNOUNCE_RIGHT_LANE_END":                            90,
	"TYPE_POLE_WARNING":                                       91,
	"TYPE_TRAFFIC_LIGHT_GREEN_ARROW":                          92,
}

func (x TrafficSign_MainSign_Classification_Type) String() string {
	return proto.EnumName(TrafficSign_MainSign_Classification_Type_name, int32(x))
}

func (TrafficSign_MainSign_Classification_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2a8b9d9156670650, []int{1, 0, 0, 0}
}

// Definition of the direction of the traffic sign's scope.
// Signs marked with additional arrows. (E.g. No parking sign (StVO
// 286) to the left.)
//
type TrafficSign_MainSign_Classification_DirectionScope int32

const (
	// Direction of the sign's scope is unknown (must not be used in
	// ground truth).
	//
	TrafficSign_MainSign_Classification_DIRECTION_SCOPE_UNKNOWN TrafficSign_MainSign_Classification_DirectionScope = 0
	// Other (unspecified but known) direction of the sign's scope.
	//
	TrafficSign_MainSign_Classification_DIRECTION_SCOPE_OTHER TrafficSign_MainSign_Classification_DirectionScope = 1
	// Direction of the sign's scope is not specified.
	//
	TrafficSign_MainSign_Classification_DIRECTION_SCOPE_NO_DIRECTION TrafficSign_MainSign_Classification_DirectionScope = 2
	// Direction of the sign's scope for its viewer is left.
	//
	TrafficSign_MainSign_Classification_DIRECTION_SCOPE_LEFT TrafficSign_MainSign_Classification_DirectionScope = 3
	// Direction of the sign's scope for its viewer is right.
	//
	TrafficSign_MainSign_Classification_DIRECTION_SCOPE_RIGHT TrafficSign_MainSign_Classification_DirectionScope = 4
	// Direction of the sign's scope for its viewer is to both
	// sides.
	//
	TrafficSign_MainSign_Classification_DIRECTION_SCOPE_LEFT_RIGHT TrafficSign_MainSign_Classification_DirectionScope = 5
)

var TrafficSign_MainSign_Classification_DirectionScope_name = map[int32]string{
	0: "DIRECTION_SCOPE_UNKNOWN",
	1: "DIRECTION_SCOPE_OTHER",
	2: "DIRECTION_SCOPE_NO_DIRECTION",
	3: "DIRECTION_SCOPE_LEFT",
	4: "DIRECTION_SCOPE_RIGHT",
	5: "DIRECTION_SCOPE_LEFT_RIGHT",
}

var TrafficSign_MainSign_Classification_DirectionScope_value = map[string]int32{
	"DIRECTION_SCOPE_UNKNOWN":      0,
	"DIRECTION_SCOPE_OTHER":        1,
	"DIRECTION_SCOPE_NO_DIRECTION": 2,
	"DIRECTION_SCOPE_LEFT":         3,
	"DIRECTION_SCOPE_RIGHT":        4,
	"DIRECTION_SCOPE_LEFT_RIGHT":   5,
}

func (x TrafficSign_MainSign_Classification_DirectionScope) String() string {
	return proto.EnumName(TrafficSign_MainSign_Classification_DirectionScope_name, int32(x))
}

func (TrafficSign_MainSign_Classification_DirectionScope) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2a8b9d9156670650, []int{1, 0, 0, 1}
}

// Definition of supplementary sign types.
// See \c TrafficSign::Type for further information.
//
type TrafficSign_SupplementarySign_Classification_Type int32

const (
	// Type of supplementary sign is unknown (must not be used in
	// ground truth).
	//
	TrafficSign_SupplementarySign_Classification_TYPE_UNKNOWN TrafficSign_SupplementarySign_Classification_Type = 0
	// Other (unspecified but known) type of supplementary sign.
	//
	TrafficSign_SupplementarySign_Classification_TYPE_OTHER TrafficSign_SupplementarySign_Classification_Type = 1
	// There is no supplementary sign (must not be used in ground
	// truth).
	//
	TrafficSign_SupplementarySign_Classification_TYPE_NO_SIGN TrafficSign_SupplementarySign_Classification_Type = 2
	// Traffic sign is valid for a certain distance (given by \c
	// TrafficSignValue::value in e.g. meter - \c
	// TrafficSignValue::value_unit).
	//
	TrafficSign_SupplementarySign_Classification_TYPE_VALID_FOR_DISTANCE TrafficSign_SupplementarySign_Classification_Type = 3
	// Distance to the start of validity of the traffic sign (given
	// by \c TrafficSignValue::value in e.g. meter - \c
	// TrafficSignValue::value_unit).
	//
	TrafficSign_SupplementarySign_Classification_TYPE_VALID_IN_DISTANCE TrafficSign_SupplementarySign_Classification_Type = 4
	// Time range for validity of traffic sign (starting from first
	// \c TrafficSignValue::value and ending with second \c
	// TrafficSignValue::value, both defining e.g. time of day in
	// minutes since midnight - first \c
	// TrafficSignValue::value_unit and second \c
	// TrafficSignValue::value_unit). Day of the week starting from
	// third \c TrafficSignValue::value and ending with fourth \c
	// TrafficSignValue::value with third \c
	// TrafficSignValue::value_unit and fourth \c
	// TrafficSignValue::value_unit).
	//
	TrafficSign_SupplementarySign_Classification_TYPE_TIME_RANGE TrafficSign_SupplementarySign_Classification_Type = 5
	// Restriction of the validity of the traffic sign depending on
	// the vehicle's weight (more than \c TrafficSignValue::value
	// e.g. in kilogram - \c TrafficSignValue::value_unit).
	//
	TrafficSign_SupplementarySign_Classification_TYPE_WEIGHT TrafficSign_SupplementarySign_Classification_Type = 6
	// Restriction of the validity of the traffic sign to wet /
	// rainy conditions.
	//
	TrafficSign_SupplementarySign_Classification_TYPE_RAIN TrafficSign_SupplementarySign_Classification_Type = 7
	// Restriction of the validity of the traffic sign to foggy
	// conditions.
	//
	TrafficSign_SupplementarySign_Classification_TYPE_FOG TrafficSign_SupplementarySign_Classification_Type = 8
	// Restriction of the validity of the traffic sign to snowy /
	// icy conditions.
	//
	TrafficSign_SupplementarySign_Classification_TYPE_SNOW TrafficSign_SupplementarySign_Classification_Type = 9
	// Combined restriction of the validity of the traffic sign to
	// rainy or snowy conditions denoted by a single supplementary
	// sign (instead of two signs of \c #TYPE_RAIN and \c #TYPE_SNOW
	// respectively).
	//
	TrafficSign_SupplementarySign_Classification_TYPE_SNOW_RAIN TrafficSign_SupplementarySign_Classification_Type = 10
	// Direction, left-pointing.
	//
	TrafficSign_SupplementarySign_Classification_TYPE_LEFT_ARROW TrafficSign_SupplementarySign_Classification_Type = 11
	// Direction, right-pointing.
	//
	TrafficSign_SupplementarySign_Classification_TYPE_RIGHT_ARROW TrafficSign_SupplementarySign_Classification_Type = 12
	// Direction of potential danger, left-pointing.
	//
	TrafficSign_SupplementarySign_Classification_TYPE_LEFT_BEND_ARROW TrafficSign_SupplementarySign_Classification_Type = 13
	// Direction of potential danger, right-pointing.
	//
	TrafficSign_SupplementarySign_Classification_TYPE_RIGHT_BEND_ARROW TrafficSign_SupplementarySign_Classification_Type = 14
	// Valid for heavy trucks.
	//
	TrafficSign_SupplementarySign_Classification_TYPE_TRUCK TrafficSign_SupplementarySign_Classification_Type = 15
	// Passing, only tractors allowed.
	//
	TrafficSign_SupplementarySign_Classification_TYPE_TRACTORS_MAY_BE_PASSED TrafficSign_SupplementarySign_Classification_Type = 16
	// Hazardous.
	//
	TrafficSign_SupplementarySign_Classification_TYPE_HAZARDOUS TrafficSign_SupplementarySign_Classification_Type = 17
	// Valid for vehicle with trailers.
	//
	TrafficSign_SupplementarySign_Classification_TYPE_TRAILER TrafficSign_SupplementarySign_Classification_Type = 18
	// Valid at night.
	//
	TrafficSign_SupplementarySign_Classification_TYPE_NIGHT TrafficSign_SupplementarySign_Classification_Type = 19
	// Zone.
	//
	TrafficSign_SupplementarySign_Classification_TYPE_ZONE TrafficSign_SupplementarySign_Classification_Type = 20
	// Stop 4 way.
	//
	TrafficSign_SupplementarySign_Classification_TYPE_STOP_4_WAY TrafficSign_SupplementarySign_Classification_Type = 21
	// Valid for motorcycles.
	//
	TrafficSign_SupplementarySign_Classification_TYPE_MOTORCYCLE TrafficSign_SupplementarySign_Classification_Type = 22
	// Only motorcycles allowed.
	//
	TrafficSign_SupplementarySign_Classification_TYPE_MOTORCYCLE_ALLOWED TrafficSign_SupplementarySign_Classification_Type = 23
	// Valid for cars.
	//
	TrafficSign_SupplementarySign_Classification_TYPE_CAR TrafficSign_SupplementarySign_Classification_Type = 24
	// Ends in e.g. .. meter (given by \c TrafficSignValue::value in
	// e.g. meter - \c TrafficSignValue::value_unit).
	//
	TrafficSign_SupplementarySign_Classification_TYPE_STOP_IN TrafficSign_SupplementarySign_Classification_Type = 25
)

var TrafficSign_SupplementarySign_Classification_Type_name = map[int32]string{
	0:  "TYPE_UNKNOWN",
	1:  "TYPE_OTHER",
	2:  "TYPE_NO_SIGN",
	3:  "TYPE_VALID_FOR_DISTANCE",
	4:  "TYPE_VALID_IN_DISTANCE",
	5:  "TYPE_TIME_RANGE",
	6:  "TYPE_WEIGHT",
	7:  "TYPE_RAIN",
	8:  "TYPE_FOG",
	9:  "TYPE_SNOW",
	10: "TYPE_SNOW_RAIN",
	11: "TYPE_LEFT_ARROW",
	12: "TYPE_RIGHT_ARROW",
	13: "TYPE_LEFT_BEND_ARROW",
	14: "TYPE_RIGHT_BEND_ARROW",
	15: "TYPE_TRUCK",
	16: "TYPE_TRACTORS_MAY_BE_PASSED",
	17: "TYPE_HAZARDOUS",
	18: "TYPE_TRAILER",
	19: "TYPE_NIGHT",
	20: "TYPE_ZONE",
	21: "TYPE_STOP_4_WAY",
	22: "TYPE_MOTORCYCLE",
	23: "TYPE_MOTORCYCLE_ALLOWED",
	24: "TYPE_CAR",
	25: "TYPE_STOP_IN",
}

var TrafficSign_SupplementarySign_Classification_Type_value = map[string]int32{
	"TYPE_UNKNOWN":                0,
	"TYPE_OTHER":                  1,
	"TYPE_NO_SIGN":                2,
	"TYPE_VALID_FOR_DISTANCE":     3,
	"TYPE_VALID_IN_DISTANCE":      4,
	"TYPE_TIME_RANGE":             5,
	"TYPE_WEIGHT":                 6,
	"TYPE_RAIN":                   7,
	"TYPE_FOG":                    8,
	"TYPE_SNOW":                   9,
	"TYPE_SNOW_RAIN":              10,
	"TYPE_LEFT_ARROW":             11,
	"TYPE_RIGHT_ARROW":            12,
	"TYPE_LEFT_BEND_ARROW":        13,
	"TYPE_RIGHT_BEND_ARROW":       14,
	"TYPE_TRUCK":                  15,
	"TYPE_TRACTORS_MAY_BE_PASSED": 16,
	"TYPE_HAZARDOUS":              17,
	"TYPE_TRAILER":                18,
	"TYPE_NIGHT":                  19,
	"TYPE_ZONE":                   20,
	"TYPE_STOP_4_WAY":             21,
	"TYPE_MOTORCYCLE":             22,
	"TYPE_MOTORCYCLE_ALLOWED":     23,
	"TYPE_CAR":                    24,
	"TYPE_STOP_IN":                25,
}

func (x TrafficSign_SupplementarySign_Classification_Type) String() string {
	return proto.EnumName(TrafficSign_SupplementarySign_Classification_Type_name, int32(x))
}

func (TrafficSign_SupplementarySign_Classification_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2a8b9d9156670650, []int{1, 1, 0, 0}
}

//
// \brief Additional value associated with a traffic sign or road marking
// and its unit.
//
type TrafficSignValue struct {
	// Additional value associated with a traffic sign or road marking,
	// e.g. value of a speed limit.
	//
	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	// Unit for additional value.
	//
	ValueUnit            TrafficSignValue_Unit `protobuf:"varint,2,opt,name=value_unit,json=valueUnit,proto3,enum=osi3.TrafficSignValue_Unit" json:"value_unit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *TrafficSignValue) Reset()         { *m = TrafficSignValue{} }
func (m *TrafficSignValue) String() string { return proto.CompactTextString(m) }
func (*TrafficSignValue) ProtoMessage()    {}
func (*TrafficSignValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a8b9d9156670650, []int{0}
}

func (m *TrafficSignValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrafficSignValue.Unmarshal(m, b)
}
func (m *TrafficSignValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrafficSignValue.Marshal(b, m, deterministic)
}
func (m *TrafficSignValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficSignValue.Merge(m, src)
}
func (m *TrafficSignValue) XXX_Size() int {
	return xxx_messageInfo_TrafficSignValue.Size(m)
}
func (m *TrafficSignValue) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficSignValue.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficSignValue proto.InternalMessageInfo

func (m *TrafficSignValue) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *TrafficSignValue) GetValueUnit() TrafficSignValue_Unit {
	if m != nil {
		return m.ValueUnit
	}
	return TrafficSignValue_UNIT_UNKNOWN
}

//
// \brief A traffic sign.
//
// \image html OSI_TrafficSigns.jpg
//
// All coordinates and orientations are relative to the global ground truth
// coordinate system.
//
type TrafficSign struct {
	// The ID of the traffic sign.
	//
	Id *Identifier `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Main sign, e.g. speed limit 30 [km/h]
	//
	MainSign *TrafficSign_MainSign `protobuf:"bytes,2,opt,name=main_sign,json=mainSign,proto3" json:"main_sign,omitempty"`
	// Additional supplementary signs, e.g. time limits, modifying the traffic
	// sign.
	//
	// \note OSI uses singular instead of plural for repeated field names.
	//
	SupplementarySign    []*TrafficSign_SupplementarySign `protobuf:"bytes,3,rep,name=supplementary_sign,json=supplementarySign,proto3" json:"supplementary_sign,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *TrafficSign) Reset()         { *m = TrafficSign{} }
func (m *TrafficSign) String() string { return proto.CompactTextString(m) }
func (*TrafficSign) ProtoMessage()    {}
func (*TrafficSign) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a8b9d9156670650, []int{1}
}

func (m *TrafficSign) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrafficSign.Unmarshal(m, b)
}
func (m *TrafficSign) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrafficSign.Marshal(b, m, deterministic)
}
func (m *TrafficSign) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficSign.Merge(m, src)
}
func (m *TrafficSign) XXX_Size() int {
	return xxx_messageInfo_TrafficSign.Size(m)
}
func (m *TrafficSign) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficSign.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficSign proto.InternalMessageInfo

func (m *TrafficSign) GetId() *Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *TrafficSign) GetMainSign() *TrafficSign_MainSign {
	if m != nil {
		return m.MainSign
	}
	return nil
}

func (m *TrafficSign) GetSupplementarySign() []*TrafficSign_SupplementarySign {
	if m != nil {
		return m.SupplementarySign
	}
	return nil
}

//
// \brief Main sign of the traffic sign.
//
// \image html OSI_MainTrafficSign.jpg
//
type TrafficSign_MainSign struct {
	// The base parameters of the traffic sign.
	//
	// The orientation of the bounding box \c #base
	// ( \c BaseStationary::orientation ) is defined as follows:
	// The z-axis of the given \c BaseStationary::orientation is the vector
	// from the bottom to the top of the traffic sign's 2D image plate.
	// (Normally it is equal to the ground truth z-axis.)
	// The x-axis of the given \c BaseStationary::orientation is view
	// normal of the traffic sign's image.
	// This x-axis points from the traffic sign's image in the direction
	// from where a 'viewer' could see the traffic sign image.
	//
	Base *BaseStationary `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	// The classification of the traffic sign.
	//
	Classification       *TrafficSign_MainSign_Classification `protobuf:"bytes,2,opt,name=classification,proto3" json:"classification,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *TrafficSign_MainSign) Reset()         { *m = TrafficSign_MainSign{} }
func (m *TrafficSign_MainSign) String() string { return proto.CompactTextString(m) }
func (*TrafficSign_MainSign) ProtoMessage()    {}
func (*TrafficSign_MainSign) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a8b9d9156670650, []int{1, 0}
}

func (m *TrafficSign_MainSign) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrafficSign_MainSign.Unmarshal(m, b)
}
func (m *TrafficSign_MainSign) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrafficSign_MainSign.Marshal(b, m, deterministic)
}
func (m *TrafficSign_MainSign) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficSign_MainSign.Merge(m, src)
}
func (m *TrafficSign_MainSign) XXX_Size() int {
	return xxx_messageInfo_TrafficSign_MainSign.Size(m)
}
func (m *TrafficSign_MainSign) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficSign_MainSign.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficSign_MainSign proto.InternalMessageInfo

func (m *TrafficSign_MainSign) GetBase() *BaseStationary {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *TrafficSign_MainSign) GetClassification() *TrafficSign_MainSign_Classification {
	if m != nil {
		return m.Classification
	}
	return nil
}

//
// \brief \c Classification data for a traffic sign.
//
type TrafficSign_MainSign_Classification struct {
	// The traffic sign is not stationary, for example a temporary
	// traffic sign in a street construction.
	//
	Variability TrafficSign_Variability `protobuf:"varint,1,opt,name=variability,proto3,enum=osi3.TrafficSign_Variability" json:"variability,omitempty"`
	// The type of the traffic sign.
	//
	Type TrafficSign_MainSign_Classification_Type `protobuf:"varint,2,opt,name=type,proto3,enum=osi3.TrafficSign_MainSign_Classification_Type" json:"type,omitempty"`
	// Additional value associated with the traffic sign, e.g. value of
	// the speed limit.
	//
	// \note Field need not be set if traffic sign type does not require
	// it.
	//
	Value *TrafficSignValue `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// Some traffic signs have an additional arrow symbol as an
	// additional constraint for their scope (e.g. no parking to the
	// right). The arrow direction is given relative to the sign's 2D
	// image plane, i.e. as a viewer standing right in front of the sign
	// and looking straight towards it would interpret the arrow.
	//
	// The definition for left and right is according to the following
	// temporarily constructed right-handed local coordinate system:
	// Set z-axis to match the z-axis of the ground truth coordinate
	// system. Set x-axis to the view normal of the traffic sign's image
	// (\c #base \c BaseStationary::orientation x-axis).
	// Right: direction of the local coordinate system's positive
	// y-axis. Left: opposite direction of the local coordinate system's
	// y-axis i.e. negative y-axis',
	//
	// \note If a traffic sign image is on the ground (there is no
	// definition for right or left). Normally, this is a road marking
	// and not a traffic sign. Actual traffic signs lying on the ground
	// might have been intentionally unmounted and, hence, not be in
	// effect.
	//
	DirectionScope TrafficSign_MainSign_Classification_DirectionScope `protobuf:"varint,4,opt,name=direction_scope,json=directionScope,proto3,enum=osi3.TrafficSign_MainSign_Classification_DirectionScope" json:"direction_scope,omitempty"`
	// The IDs of the lanes that the sign is assigned to.
	// May be multiple if the sign is valid for multiple lanes.
	//
	// \note OSI uses singular instead of plural for repeated field
	// names.
	//
	AssignedLaneId       []*Identifier `protobuf:"bytes,5,rep,name=assigned_lane_id,json=assignedLaneId,proto3" json:"assigned_lane_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TrafficSign_MainSign_Classification) Reset()         { *m = TrafficSign_MainSign_Classification{} }
func (m *TrafficSign_MainSign_Classification) String() string { return proto.CompactTextString(m) }
func (*TrafficSign_MainSign_Classification) ProtoMessage()    {}
func (*TrafficSign_MainSign_Classification) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a8b9d9156670650, []int{1, 0, 0}
}

func (m *TrafficSign_MainSign_Classification) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrafficSign_MainSign_Classification.Unmarshal(m, b)
}
func (m *TrafficSign_MainSign_Classification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrafficSign_MainSign_Classification.Marshal(b, m, deterministic)
}
func (m *TrafficSign_MainSign_Classification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficSign_MainSign_Classification.Merge(m, src)
}
func (m *TrafficSign_MainSign_Classification) XXX_Size() int {
	return xxx_messageInfo_TrafficSign_MainSign_Classification.Size(m)
}
func (m *TrafficSign_MainSign_Classification) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficSign_MainSign_Classification.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficSign_MainSign_Classification proto.InternalMessageInfo

func (m *TrafficSign_MainSign_Classification) GetVariability() TrafficSign_Variability {
	if m != nil {
		return m.Variability
	}
	return TrafficSign_VARIABILITY_UNKNOWN
}

func (m *TrafficSign_MainSign_Classification) GetType() TrafficSign_MainSign_Classification_Type {
	if m != nil {
		return m.Type
	}
	return TrafficSign_MainSign_Classification_TYPE_UNKNOWN
}

func (m *TrafficSign_MainSign_Classification) GetValue() *TrafficSignValue {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *TrafficSign_MainSign_Classification) GetDirectionScope() TrafficSign_MainSign_Classification_DirectionScope {
	if m != nil {
		return m.DirectionScope
	}
	return TrafficSign_MainSign_Classification_DIRECTION_SCOPE_UNKNOWN
}

func (m *TrafficSign_MainSign_Classification) GetAssignedLaneId() []*Identifier {
	if m != nil {
		return m.AssignedLaneId
	}
	return nil
}

//
// \brief Additional supplementary sign modifying the main sign.
//
// \image html OSI_SuppSign.jpg
//
type TrafficSign_SupplementarySign struct {
	// The base parameters of the supplementary traffic sign.
	//
	// The orientation of the bounding box \c SupplementarySign::base
	// ( \c BaseStationary::orientation ) is defined as follows:
	// The z-axis of the given \c BaseStationary::orientation is the vector
	// from the bottom to the top of the supplementary traffic sign's 2D
	// image plate. (Normally it is equal to the ground truth z-axis.) The
	// x-axis of the given \c BaseStationary::orientation is view normal of
	// the supplementary traffic sign's image. This x-axis points from the
	// supplementary traffic sign's image in the direction from where a
	// 'viewer' could see the supplementary traffic sign image.
	//
	Base *BaseStationary `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	// The classification of the supplementary traffic sign.
	//
	Classification       *TrafficSign_SupplementarySign_Classification `protobuf:"bytes,2,opt,name=classification,proto3" json:"classification,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                      `json:"-"`
	XXX_unrecognized     []byte                                        `json:"-"`
	XXX_sizecache        int32                                         `json:"-"`
}

func (m *TrafficSign_SupplementarySign) Reset()         { *m = TrafficSign_SupplementarySign{} }
func (m *TrafficSign_SupplementarySign) String() string { return proto.CompactTextString(m) }
func (*TrafficSign_SupplementarySign) ProtoMessage()    {}
func (*TrafficSign_SupplementarySign) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a8b9d9156670650, []int{1, 1}
}

func (m *TrafficSign_SupplementarySign) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrafficSign_SupplementarySign.Unmarshal(m, b)
}
func (m *TrafficSign_SupplementarySign) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrafficSign_SupplementarySign.Marshal(b, m, deterministic)
}
func (m *TrafficSign_SupplementarySign) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficSign_SupplementarySign.Merge(m, src)
}
func (m *TrafficSign_SupplementarySign) XXX_Size() int {
	return xxx_messageInfo_TrafficSign_SupplementarySign.Size(m)
}
func (m *TrafficSign_SupplementarySign) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficSign_SupplementarySign.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficSign_SupplementarySign proto.InternalMessageInfo

func (m *TrafficSign_SupplementarySign) GetBase() *BaseStationary {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *TrafficSign_SupplementarySign) GetClassification() *TrafficSign_SupplementarySign_Classification {
	if m != nil {
		return m.Classification
	}
	return nil
}

//
// \brief \c Classification data for a supplementary traffic sign.
//
type TrafficSign_SupplementarySign_Classification struct {
	// Variability
	//
	Variability TrafficSign_Variability `protobuf:"varint,1,opt,name=variability,proto3,enum=osi3.TrafficSign_Variability" json:"variability,omitempty"`
	// Type of the supplementary sign.
	//
	Type TrafficSign_SupplementarySign_Classification_Type `protobuf:"varint,2,opt,name=type,proto3,enum=osi3.TrafficSign_SupplementarySign_Classification_Type" json:"type,omitempty"`
	// Additional value(s) associated with the traffic sign, e.g.
	// length, mass or starting time in time range.
	//
	// \note Field need not be set if traffic sign type does not require
	// it.
	//
	// \note OSI uses singular instead of plural for repeated field
	// names.
	//
	Value []*TrafficSignValue `protobuf:"bytes,3,rep,name=value,proto3" json:"value,omitempty"`
	// The IDs of the lanes that the sign is assigned to.
	// May be multiple if the sign is valid for multiple lanes.
	//
	// \note OSI uses singular instead of plural for repeated field
	// names.
	//
	AssignedLaneId       []*Identifier `protobuf:"bytes,4,rep,name=assigned_lane_id,json=assignedLaneId,proto3" json:"assigned_lane_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TrafficSign_SupplementarySign_Classification) Reset() {
	*m = TrafficSign_SupplementarySign_Classification{}
}
func (m *TrafficSign_SupplementarySign_Classification) String() string {
	return proto.CompactTextString(m)
}
func (*TrafficSign_SupplementarySign_Classification) ProtoMessage() {}
func (*TrafficSign_SupplementarySign_Classification) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a8b9d9156670650, []int{1, 1, 0}
}

func (m *TrafficSign_SupplementarySign_Classification) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrafficSign_SupplementarySign_Classification.Unmarshal(m, b)
}
func (m *TrafficSign_SupplementarySign_Classification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrafficSign_SupplementarySign_Classification.Marshal(b, m, deterministic)
}
func (m *TrafficSign_SupplementarySign_Classification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficSign_SupplementarySign_Classification.Merge(m, src)
}
func (m *TrafficSign_SupplementarySign_Classification) XXX_Size() int {
	return xxx_messageInfo_TrafficSign_SupplementarySign_Classification.Size(m)
}
func (m *TrafficSign_SupplementarySign_Classification) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficSign_SupplementarySign_Classification.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficSign_SupplementarySign_Classification proto.InternalMessageInfo

func (m *TrafficSign_SupplementarySign_Classification) GetVariability() TrafficSign_Variability {
	if m != nil {
		return m.Variability
	}
	return TrafficSign_VARIABILITY_UNKNOWN
}

func (m *TrafficSign_SupplementarySign_Classification) GetType() TrafficSign_SupplementarySign_Classification_Type {
	if m != nil {
		return m.Type
	}
	return TrafficSign_SupplementarySign_Classification_TYPE_UNKNOWN
}

func (m *TrafficSign_SupplementarySign_Classification) GetValue() []*TrafficSignValue {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *TrafficSign_SupplementarySign_Classification) GetAssignedLaneId() []*Identifier {
	if m != nil {
		return m.AssignedLaneId
	}
	return nil
}

func init() {
	proto.RegisterEnum("osi3.TrafficSignValue_Unit", TrafficSignValue_Unit_name, TrafficSignValue_Unit_value)
	proto.RegisterEnum("osi3.TrafficSign_Variability", TrafficSign_Variability_name, TrafficSign_Variability_value)
	proto.RegisterEnum("osi3.TrafficSign_MainSign_Classification_Type", TrafficSign_MainSign_Classification_Type_name, TrafficSign_MainSign_Classification_Type_value)
	proto.RegisterEnum("osi3.TrafficSign_MainSign_Classification_DirectionScope", TrafficSign_MainSign_Classification_DirectionScope_name, TrafficSign_MainSign_Classification_DirectionScope_value)
	proto.RegisterEnum("osi3.TrafficSign_SupplementarySign_Classification_Type", TrafficSign_SupplementarySign_Classification_Type_name, TrafficSign_SupplementarySign_Classification_Type_value)
	proto.RegisterType((*TrafficSignValue)(nil), "osi3.TrafficSignValue")
	proto.RegisterType((*TrafficSign)(nil), "osi3.TrafficSign")
	proto.RegisterType((*TrafficSign_MainSign)(nil), "osi3.TrafficSign.MainSign")
	proto.RegisterType((*TrafficSign_MainSign_Classification)(nil), "osi3.TrafficSign.MainSign.Classification")
	proto.RegisterType((*TrafficSign_SupplementarySign)(nil), "osi3.TrafficSign.SupplementarySign")
	proto.RegisterType((*TrafficSign_SupplementarySign_Classification)(nil), "osi3.TrafficSign.SupplementarySign.Classification")
}

func init() { proto.RegisterFile("osi_trafficsign.proto", fileDescriptor_2a8b9d9156670650) }

var fileDescriptor_2a8b9d9156670650 = []byte{
	// 1944 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0xdd, 0x52, 0x1b, 0xc9,
	0x15, 0x0e, 0x48, 0x60, 0x68, 0x81, 0x68, 0xda, 0x80, 0xf9, 0xf1, 0x0f, 0xc6, 0xf6, 0x2e, 0x4e,
	0xbc, 0xec, 0x1a, 0xef, 0xc6, 0x1b, 0x6f, 0x92, 0x4d, 0x4b, 0xd3, 0x92, 0x3a, 0x8c, 0xba, 0xb5,
	0x3d, 0x2d, 0x04, 0x4e, 0xaa, 0xba, 0x64, 0x90, 0x5d, 0x53, 0x05, 0x82, 0x42, 0xf2, 0x56, 0xf1,
	0x08, 0x79, 0x81, 0xdc, 0x27, 0xcf, 0x90, 0xdb, 0x54, 0x5e, 0x22, 0x77, 0xb9, 0xce, 0x7b, 0xa4,
	0xba, 0x7b, 0xe6, 0x68, 0xf4, 0x83, 0x97, 0xad, 0xca, 0x15, 0x9a, 0x73, 0xbe, 0x3e, 0x7d, 0xfa,
	0xfc, 0x1f, 0xd0, 0xea, 0x45, 0x2f, 0x36, 0xfd, 0xab, 0xf6, 0xfb, 0xf7, 0xf1, 0x49, 0x2f, 0xfe,
	0xd0, 0xdd, 0xbb, 0xbc, 0xba, 0xe8, 0x5f, 0x90, 0xfc, 0x45, 0x2f, 0x7e, 0xb5, 0x89, 0x2d, 0xf3,
	0xe4, 0xe2, 0xfc, 0xfc, 0x22, 0xa1, 0xef, 0xfc, 0x25, 0x87, 0xb0, 0xf6, 0xe8, 0x28, 0xfe, 0xd0,
	0x3d, 0x6c, 0x9f, 0x7d, 0xec, 0x90, 0x15, 0x34, 0xf3, 0xa3, 0xfd, 0xb1, 0x3e, 0xb5, 0x3d, 0xb5,
	0x3b, 0xa5, 0xfc, 0x07, 0x79, 0x83, 0x90, 0xfb, 0x61, 0x3e, 0x76, 0xe3, 0xfe, 0xfa, 0xf4, 0xf6,
	0xd4, 0x6e, 0x71, 0x7f, 0x6b, 0xcf, 0xca, 0xdd, 0x1b, 0x95, 0xb0, 0xd7, 0xec, 0xc6, 0x7d, 0x35,
	0xef, 0xe0, 0xf6, 0xe7, 0xce, 0xdf, 0xa7, 0x51, 0xde, 0xfe, 0x20, 0x18, 0x2d, 0x34, 0x05, 0xd7,
	0xa6, 0x29, 0x0e, 0x84, 0x6c, 0x09, 0xfc, 0x0b, 0x52, 0x44, 0xc8, 0x51, 0xa4, 0xae, 0x31, 0x85,
	0xa7, 0x00, 0x21, 0xa4, 0xb1, 0x7f, 0xf1, 0x34, 0xd9, 0x42, 0xf7, 0x1c, 0xe5, 0x80, 0x87, 0xb2,
	0xce, 0x34, 0x53, 0xa6, 0xc1, 0x94, 0xa9, 0xc9, 0xa6, 0xc2, 0x39, 0xb2, 0x86, 0x88, 0x63, 0xd6,
	0x79, 0xc8, 0x06, 0xf4, 0x3c, 0x88, 0x75, 0x07, 0xf0, 0x0c, 0x21, 0xa8, 0x38, 0x2c, 0x04, 0xcf,
	0x92, 0x45, 0x34, 0xef, 0x68, 0x15, 0xc6, 0x34, 0xbe, 0x03, 0x9f, 0x56, 0x14, 0x9e, 0x23, 0x77,
	0xd1, 0x52, 0x2a, 0x41, 0xf1, 0xb2, 0xd1, 0x52, 0xe0, 0x79, 0xb2, 0x8c, 0x16, 0x1d, 0x31, 0x94,
	0xa2, 0xea, 0x48, 0x08, 0x24, 0x47, 0x35, 0xa9, 0xb4, 0xa3, 0x15, 0xe0, 0x11, 0x75, 0x2e, 0x9a,
	0x9a, 0x45, 0x78, 0x81, 0x2c, 0xa0, 0x39, 0x47, 0x09, 0xe8, 0x31, 0x5e, 0x04, 0xd9, 0x0d, 0xa6,
	0xca, 0x4c, 0x68, 0x5a, 0x65, 0xb8, 0xb8, 0xf3, 0xef, 0x67, 0xa8, 0x90, 0xb1, 0x24, 0xd9, 0x46,
	0xd3, 0xf1, 0xa9, 0xf3, 0x41, 0x61, 0x1f, 0x7b, 0x43, 0xf3, 0xd3, 0x4e, 0xb7, 0x1f, 0xbf, 0x8f,
	0x3b, 0x57, 0x6a, 0x3a, 0x3e, 0x25, 0xaf, 0xd1, 0xfc, 0x79, 0x3b, 0xee, 0x1a, 0xeb, 0x68, 0xe7,
	0x91, 0xc2, 0xfe, 0xe6, 0x98, 0x47, 0xf6, 0xea, 0xed, 0xb8, 0x6b, 0x7f, 0xa8, 0xb9, 0xf3, 0xe4,
	0x17, 0x51, 0x88, 0xf4, 0x3e, 0x5e, 0x5e, 0x9e, 0x75, 0xce, 0x3b, 0xdd, 0x7e, 0xfb, 0xea, 0xda,
	0x4b, 0xc8, 0x6d, 0xe7, 0x76, 0x0b, 0xfb, 0x4f, 0xc6, 0x25, 0x44, 0x59, 0xac, 0x13, 0xb5, 0xdc,
	0x1b, 0x25, 0x6d, 0xfe, 0x77, 0x0b, 0xcd, 0xa5, 0x57, 0x91, 0x5d, 0x94, 0x7f, 0xd7, 0xee, 0x75,
	0x12, 0xed, 0x57, 0xbc, 0xc8, 0x52, 0xbb, 0xd7, 0x89, 0xfa, 0xed, 0x7e, 0x7c, 0xd1, 0x6d, 0x5f,
	0x5d, 0x2b, 0x87, 0x20, 0x3f, 0xa0, 0xe2, 0xc9, 0x59, 0xbb, 0xd7, 0x8b, 0xdf, 0xc7, 0x27, 0x8e,
	0x95, 0x3c, 0xe4, 0xf9, 0xcd, 0x0f, 0xd9, 0x2b, 0x0f, 0x1d, 0x50, 0x23, 0x02, 0x36, 0xff, 0xb3,
	0x89, 0x8a, 0xc3, 0x10, 0xf2, 0x3d, 0x2a, 0xfc, 0xd8, 0xbe, 0x8a, 0xdb, 0xef, 0xe2, 0xb3, 0xb8,
	0x7f, 0xed, 0xd4, 0x2a, 0xee, 0x3f, 0x18, 0xbf, 0xe2, 0x70, 0x00, 0x52, 0xd9, 0x13, 0xa4, 0x84,
	0xf2, 0xfd, 0xeb, 0xcb, 0x4e, 0x12, 0xf7, 0x7b, 0xb7, 0x56, 0x6e, 0x4f, 0x5f, 0x5f, 0x76, 0x94,
	0x3b, 0x4b, 0x5e, 0xa4, 0x79, 0x95, 0x73, 0x2f, 0x5c, 0x9b, 0x9c, 0x3c, 0x69, 0xbe, 0xb5, 0xd1,
	0xd2, 0x69, 0x7c, 0xd5, 0x39, 0xb1, 0x52, 0x4c, 0xef, 0xe4, 0xe2, 0xb2, 0xb3, 0x9e, 0x77, 0x97,
	0x7f, 0x7b, 0xfb, 0xcb, 0x83, 0x54, 0x40, 0x64, 0xcf, 0xab, 0xe2, 0xe9, 0xd0, 0x37, 0x79, 0x83,
	0xb0, 0x85, 0x7f, 0xe8, 0x76, 0x4e, 0xcd, 0x59, 0xbb, 0xdb, 0x31, 0xf1, 0xe9, 0xfa, 0x8c, 0x0b,
	0x82, 0xf1, 0x78, 0x2b, 0xa6, 0xc8, 0xb0, 0xdd, 0xed, 0xf0, 0xd3, 0x9d, 0x7f, 0xac, 0xa1, 0xbc,
	0x7d, 0x9b, 0x8d, 0x75, 0x7d, 0xdc, 0x60, 0xc3, 0x29, 0xed, 0x28, 0x69, 0x4a, 0xaf, 0x20, 0xec,
	0xbe, 0x03, 0x2a, 0xaa, 0x4c, 0x99, 0xa8, 0x21, 0x6d, 0x5a, 0xbf, 0x40, 0xbb, 0x8e, 0xaa, 0x78,
	0xb5, 0xa6, 0x4d, 0x89, 0x55, 0xa4, 0x62, 0x26, 0x64, 0x15, 0x6d, 0x04, 0x3b, 0xd2, 0x86, 0x0b,
	0xcd, 0x54, 0xc4, 0xca, 0x9a, 0x4b, 0x81, 0x73, 0x36, 0xcb, 0x1c, 0x5a, 0x37, 0x95, 0x70, 0x28,
	0x9c, 0xb7, 0x59, 0x34, 0xa0, 0x39, 0x31, 0x78, 0x86, 0x6c, 0xa0, 0x55, 0x7f, 0x99, 0x6c, 0x96,
	0xc2, 0x2c, 0x7e, 0x96, 0x6c, 0xa2, 0xb5, 0x31, 0x96, 0x3f, 0x76, 0x87, 0xdc, 0x43, 0x77, 0x1d,
	0xaf, 0xc6, 0xc3, 0xd0, 0x04, 0xb2, 0x25, 0x5a, 0x54, 0x05, 0x11, 0x9e, 0x23, 0xab, 0x68, 0x79,
	0xc0, 0x68, 0x36, 0x3c, 0x79, 0x9e, 0x3c, 0x42, 0x5b, 0x8e, 0xdc, 0xa2, 0x4a, 0x70, 0x51, 0x35,
	0x4a, 0xd2, 0xc0, 0x08, 0xaa, 0x94, 0x6c, 0x71, 0x51, 0xc5, 0x88, 0x3c, 0x45, 0xdb, 0x9f, 0x00,
	0x78, 0x95, 0x0a, 0xe4, 0x19, 0x7a, 0xfc, 0x29, 0x94, 0xd7, 0x6e, 0x01, 0x5e, 0xea, 0xd8, 0x2d,
	0xa9, 0x0e, 0x22, 0xbc, 0x48, 0xb6, 0xd1, 0xfd, 0xa1, 0xb3, 0xba, 0x25, 0x4d, 0x8b, 0x1e, 0x1b,
	0xad, 0x68, 0xa5, 0xc2, 0xcb, 0xb8, 0x08, 0x08, 0xaa, 0x35, 0x13, 0xd6, 0x90, 0x29, 0xcf, 0x84,
	0x4e, 0xf0, 0x92, 0xad, 0x67, 0x0e, 0x51, 0xe5, 0x87, 0x56, 0xd0, 0x31, 0xc6, 0xb6, 0x0c, 0x3a,
	0x52, 0xa4, 0x65, 0x03, 0x2f, 0x93, 0xcf, 0xd1, 0x13, 0xf7, 0xd9, 0x50, 0x5c, 0x2a, 0xae, 0x8f,
	0x8d, 0x96, 0x46, 0x36, 0x1a, 0x32, 0xe2, 0x9a, 0x99, 0x80, 0xab, 0xc4, 0x43, 0x84, 0xbc, 0x42,
	0x5f, 0xde, 0x02, 0x68, 0x9a, 0x8d, 0x88, 0x07, 0xcc, 0x99, 0x18, 0xdf, 0x25, 0x0f, 0xd0, 0x46,
	0x72, 0x88, 0x45, 0x65, 0xc5, 0x4b, 0x2c, 0xf0, 0x21, 0x60, 0x7d, 0x83, 0x57, 0xc8, 0x43, 0xb4,
	0x39, 0xca, 0xf6, 0xe1, 0xe2, 0xf8, 0xab, 0x64, 0x07, 0x3d, 0x1c, 0xe5, 0x47, 0x5a, 0x51, 0x07,
	0xa1, 0x35, 0x46, 0x03, 0xbc, 0x46, 0xee, 0xa3, 0xf5, 0x89, 0x57, 0xd8, 0xd7, 0xde, 0x9b, 0xa4,
	0x80, 0xbf, 0xc1, 0xb2, 0xd7, 0xc9, 0x57, 0xe8, 0xc5, 0x8d, 0xfa, 0x19, 0x2a, 0xc6, 0xae, 0xdb,
	0x20, 0x2f, 0xd1, 0x17, 0x37, 0xab, 0x3c, 0xe9, 0xc8, 0x26, 0x64, 0xc2, 0x8d, 0x97, 0x64, 0xde,
	0xbc, 0x45, 0xbe, 0x43, 0xaf, 0x6f, 0x46, 0x7f, 0xfa, 0xaa, 0xfb, 0x99, 0x40, 0x6a, 0x8a, 0x80,
	0x96, 0x64, 0x53, 0xe3, 0x07, 0x90, 0x9f, 0x52, 0x30, 0x1b, 0x3f, 0x2e, 0x34, 0x1f, 0x42, 0xe0,
	0x27, 0x54, 0x1f, 0x8a, 0x8f, 0x20, 0x11, 0x1b, 0x34, 0x8a, 0x3c, 0x74, 0x1b, 0xa4, 0x3a, 0x9a,
	0x07, 0x3e, 0x86, 0xd0, 0x2a, 0x35, 0x23, 0x13, 0x52, 0xc1, 0xf0, 0x0e, 0x24, 0x59, 0x4a, 0x32,
	0x25, 0x56, 0xe5, 0x02, 0x3f, 0x81, 0xbb, 0x80, 0xc1, 0x44, 0x80, 0x9f, 0xda, 0xce, 0x9f, 0x3c,
	0x55, 0xd6, 0x78, 0x89, 0x6b, 0x16, 0x98, 0x8a, 0x54, 0x86, 0x86, 0x21, 0x7e, 0x46, 0x3e, 0x43,
	0x3b, 0x93, 0x98, 0x75, 0xa9, 0xa5, 0x32, 0x87, 0xac, 0xc6, 0xcb, 0x21, 0x8b, 0xf0, 0x67, 0x99,
	0x18, 0x1a, 0xc2, 0x69, 0xd5, 0x2c, 0x1f, 0x44, 0xf8, 0x73, 0x48, 0x92, 0x11, 0x7e, 0x89, 0x97,
	0x8f, 0x9d, 0x84, 0xdd, 0x4c, 0x0a, 0x4c, 0xb8, 0xc9, 0x9a, 0xb9, 0xc4, 0x0f, 0x58, 0x84, 0x9f,
	0x93, 0x27, 0xe8, 0xd1, 0x24, 0x60, 0x83, 0x05, 0x2c, 0xd2, 0x8a, 0x53, 0x11, 0xe1, 0x5f, 0x66,
	0xbc, 0xfd, 0x09, 0xbd, 0x13, 0x91, 0xbf, 0x02, 0xcb, 0x04, 0xd2, 0x08, 0xa9, 0x0d, 0xb3, 0x55,
	0x11, 0xbf, 0x20, 0x8f, 0xd1, 0x03, 0x47, 0x66, 0xe2, 0x90, 0x2b, 0x29, 0xea, 0x76, 0x88, 0x08,
	0xcd, 0x5b, 0x09, 0x36, 0xfd, 0x02, 0x2a, 0xd4, 0x04, 0x88, 0xb5, 0xee, 0x1e, 0x78, 0xc3, 0x4e,
	0x5a, 0x99, 0x3a, 0xf9, 0x25, 0x59, 0x47, 0x2b, 0x23, 0x0c, 0xef, 0xd3, 0xaf, 0x40, 0x66, 0x26,
	0xf6, 0xb2, 0x47, 0x5f, 0x66, 0x8c, 0x39, 0x0a, 0xf0, 0x22, 0xf6, 0xa1, 0x2e, 0xd6, 0xb9, 0xe0,
	0xf5, 0x66, 0xdd, 0x04, 0x3c, 0xd2, 0x54, 0x94, 0x59, 0xd6, 0x29, 0xaf, 0xa0, 0x54, 0x47, 0x0d,
	0x66, 0xe3, 0x9b, 0xd7, 0xb9, 0x4e, 0x1e, 0xf6, 0x35, 0x28, 0x91, 0xe5, 0x65, 0x5e, 0xfe, 0x0d,
	0xe4, 0xf4, 0x18, 0xc0, 0xbe, 0xfb, 0xd7, 0x50, 0x10, 0x52, 0x0d, 0x3c, 0xcc, 0x1f, 0x7e, 0x0d,
	0x87, 0xe5, 0x21, 0x53, 0x9a, 0x1e, 0xd8, 0xc2, 0x5a, 0xa2, 0x22, 0x61, 0x7f, 0x4b, 0x76, 0xd1,
	0xd3, 0x49, 0xec, 0x81, 0xf2, 0x09, 0xf2, 0x37, 0x60, 0xc5, 0xac, 0x16, 0x56, 0x81, 0x37, 0xf0,
	0xb8, 0x61, 0x05, 0x2c, 0xef, 0x3b, 0x08, 0xf9, 0x11, 0xf9, 0x96, 0xf9, 0x5b, 0x08, 0xf9, 0x9b,
	0x2f, 0xb7, 0xb8, 0xdf, 0xc1, 0x1b, 0x68, 0x18, 0x1a, 0xe5, 0x42, 0xcf, 0xd5, 0x5e, 0xcf, 0xfe,
	0x3d, 0xe4, 0xbb, 0x90, 0xae, 0xc8, 0x37, 0x6c, 0xc3, 0xfa, 0x1e, 0x92, 0x58, 0x48, 0xd3, 0xa0,
	0xca, 0x0a, 0xc7, 0x7f, 0x80, 0xe4, 0x19, 0x10, 0xb3, 0xa6, 0xa6, 0x60, 0xcb, 0x51, 0xbe, 0xbd,
	0xa8, 0x04, 0x89, 0xe3, 0xab, 0x92, 0xac, 0xb8, 0xf6, 0x34, 0xde, 0xdd, 0xcb, 0xf0, 0xea, 0x21,
	0xa0, 0xbf, 0x23, 0x80, 0x8e, 0x3e, 0xc4, 0xb4, 0x17, 0x30, 0xf2, 0x1c, 0x3d, 0x1b, 0xee, 0x39,
	0xd6, 0x32, 0x93, 0xda, 0x53, 0x85, 0x7c, 0x83, 0x5e, 0xde, 0x0a, 0x3a, 0xd4, 0xa0, 0xaa, 0x83,
	0x19, 0x43, 0xb6, 0xd2, 0x20, 0xa8, 0x41, 0x69, 0x73, 0x44, 0xab, 0x09, 0x07, 0x9b, 0x96, 0xa9,
	0x02, 0xf3, 0xfd, 0x11, 0x42, 0x35, 0x43, 0xcd, 0xda, 0xef, 0x00, 0x3c, 0x35, 0x06, 0xb0, 0x52,
	0x43, 0x70, 0x78, 0xda, 0xb6, 0xcb, 0x34, 0xac, 0xb3, 0xc0, 0xe5, 0x8c, 0xf5, 0x69, 0x22, 0xa6,
	0x0e, 0x49, 0x75, 0x13, 0xce, 0x4a, 0x13, 0x64, 0x09, 0x15, 0x92, 0x79, 0x49, 0x08, 0x16, 0x62,
	0x09, 0xd9, 0xca, 0xea, 0x4c, 0x55, 0x99, 0x28, 0x1f, 0x43, 0x3c, 0xf8, 0x7c, 0x6e, 0x0c, 0xea,
	0xcc, 0x38, 0xc2, 0x27, 0xf4, 0x0f, 0x76, 0x03, 0x4b, 0x06, 0xa4, 0x6a, 0x6d, 0xe0, 0x36, 0x05,
	0x16, 0x49, 0xe9, 0x56, 0x87, 0x08, 0x9c, 0xc9, 0x8e, 0x6c, 0x89, 0x88, 0x06, 0x07, 0x34, 0xd4,
	0xa3, 0x0c, 0xcb, 0x9e, 0x69, 0x66, 0x46, 0xb0, 0x44, 0xd2, 0x11, 0xd7, 0xf8, 0x10, 0x74, 0x1b,
	0x94, 0x57, 0x53, 0x56, 0x32, 0x8a, 0xac, 0x72, 0x5c, 0x54, 0x24, 0x6e, 0x0d, 0x9a, 0x95, 0x0c,
	0x99, 0x3f, 0x76, 0x04, 0x3e, 0xa1, 0x42, 0xc8, 0xa6, 0x2d, 0x3c, 0xae, 0x7b, 0x42, 0xd7, 0x39,
	0x1e, 0x4c, 0x4d, 0x29, 0xc0, 0x07, 0x1e, 0x20, 0xde, 0x82, 0x42, 0x4e, 0x6c, 0x32, 0x7e, 0xe1,
	0x3f, 0xc1, 0x34, 0x32, 0x34, 0x64, 0x99, 0xaa, 0x62, 0x4c, 0x18, 0x37, 0xd2, 0xe1, 0x3f, 0xef,
	0xfc, 0x6b, 0x0a, 0x15, 0x87, 0xa7, 0x72, 0x1b, 0xfc, 0x83, 0xe8, 0x8b, 0xca, 0x72, 0x68, 0x96,
	0xde, 0x40, 0xab, 0xa3, 0xcc, 0x74, 0xac, 0xde, 0x46, 0xf7, 0x47, 0x59, 0x42, 0x66, 0x62, 0x7e,
	0xda, 0x96, 0xa0, 0x51, 0x84, 0xf3, 0x6b, 0x6e, 0x92, 0x58, 0xef, 0xcf, 0xbc, 0x4d, 0xf9, 0x49,
	0x87, 0xd2, 0x01, 0x7b, 0xf3, 0x9f, 0x77, 0xd0, 0xf2, 0xd8, 0x42, 0xf8, 0x33, 0x16, 0xbe, 0xb7,
	0x37, 0x2c, 0x7c, 0xfb, 0xb7, 0xd8, 0x3b, 0x7f, 0x6a, 0xf3, 0xfb, 0xdb, 0xec, 0xff, 0x7f, 0xf3,
	0x3b, 0x18, 0xda, 0xfc, 0x5e, 0xff, 0x7c, 0x2d, 0x6f, 0x58, 0x01, 0x73, 0x3f, 0xbd, 0x02, 0x4e,
	0xda, 0xcf, 0xf2, 0xb7, 0xdc, 0xcf, 0xfe, 0x9a, 0xbf, 0xf5, 0x7e, 0x96, 0x22, 0x6c, 0x3f, 0xe0,
	0x55, 0xe1, 0xff, 0xe5, 0xe2, 0x28, 0x87, 0x34, 0xe4, 0x7e, 0x3c, 0x49, 0xdb, 0x34, 0xce, 0x41,
	0xfb, 0xf2, 0x4c, 0x2e, 0x06, 0xbc, 0xcc, 0x4a, 0xc6, 0xeb, 0xcc, 0x28, 0xbb, 0xef, 0xe1, 0x19,
	0xa8, 0x3b, 0x2d, 0xe6, 0x42, 0x68, 0x16, 0x56, 0x0c, 0x45, 0xb9, 0xc0, 0x77, 0xc8, 0x02, 0x9a,
	0x73, 0x9f, 0x15, 0x59, 0xc5, 0x73, 0x83, 0xfd, 0x43, 0xc8, 0x16, 0x9e, 0x87, 0x14, 0xb6, 0x9f,
	0xfe, 0x00, 0x82, 0x5b, 0x5c, 0x5c, 0xfa, 0xcc, 0x2a, 0x40, 0xbd, 0xf1, 0xd9, 0xea, 0xa9, 0x0b,
	0xd0, 0x85, 0x1d, 0xb4, 0xc4, 0x44, 0x90, 0x70, 0x16, 0x47, 0xda, 0x4a, 0x86, 0x55, 0x04, 0x03,
	0xb9, 0xa6, 0x8a, 0x97, 0xa0, 0x64, 0x68, 0x45, 0xcb, 0x5a, 0xaa, 0xc8, 0xd4, 0x5d, 0xd9, 0x72,
	0xf3, 0x2e, 0x0b, 0x30, 0x06, 0x25, 0x6b, 0xf4, 0x2d, 0x55, 0x81, 0x6c, 0x46, 0x78, 0x19, 0xac,
	0x6a, 0x47, 0xf0, 0x90, 0x29, 0x4c, 0x40, 0xac, 0x70, 0x66, 0xb8, 0x0b, 0x2f, 0xb5, 0x05, 0x1f,
	0xaf, 0xc0, 0xab, 0x6c, 0x85, 0x35, 0x5f, 0xbb, 0x05, 0x64, 0x15, 0x88, 0x6e, 0x3c, 0x74, 0x13,
	0x29, 0x5e, 0x03, 0xf7, 0x0c, 0x88, 0xb6, 0xd5, 0xcb, 0x16, 0x0b, 0xf0, 0x3d, 0xb0, 0x66, 0x99,
	0x2a, 0xbc, 0x0e, 0x5a, 0x38, 0xa1, 0x5c, 0xe0, 0x8d, 0x9d, 0x2e, 0x2a, 0x64, 0x62, 0xdd, 0x56,
	0xdd, 0x43, 0xaa, 0x38, 0x2d, 0xf1, 0xd0, 0x76, 0xc5, 0x41, 0x94, 0xac, 0xa2, 0xe5, 0x2c, 0x23,
	0x0d, 0x96, 0x11, 0x72, 0x85, 0x1f, 0xb1, 0xc0, 0x97, 0x9a, 0x2c, 0xd9, 0xff, 0x0e, 0x19, 0xce,
	0x95, 0xa6, 0x6b, 0x53, 0xef, 0x66, 0xdd, 0x7f, 0x1b, 0x5f, 0xfd, 0x2f, 0x00, 0x00, 0xff, 0xff,
	0x26, 0x79, 0x34, 0x8a, 0x9e, 0x14, 0x00, 0x00,
}
