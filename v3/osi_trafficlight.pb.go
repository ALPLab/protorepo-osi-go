// Code generated by protoc-gen-go. DO NOT EDIT.
// source: osi_trafficlight.proto

package osi3

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Definition of colors for traffic lights.
//
type TrafficLight_Classification_Color int32

const (
	// Color is unknown (must not be used in ground truth).
	//
	TrafficLight_Classification_COLOR_UNKNOWN TrafficLight_Classification_Color = 0
	// Other (unspecified but known) color.
	//
	TrafficLight_Classification_COLOR_OTHER TrafficLight_Classification_Color = 1
	// Red light.
	//
	TrafficLight_Classification_COLOR_RED TrafficLight_Classification_Color = 2
	// Orange-yellow light.
	//
	TrafficLight_Classification_COLOR_YELLOW TrafficLight_Classification_Color = 3
	// Green light.
	//
	TrafficLight_Classification_COLOR_GREEN TrafficLight_Classification_Color = 4
	// Blue light.
	//
	TrafficLight_Classification_COLOR_BLUE TrafficLight_Classification_Color = 5
	// White light.
	//
	TrafficLight_Classification_COLOR_WHITE TrafficLight_Classification_Color = 6
)

var TrafficLight_Classification_Color_name = map[int32]string{
	0: "COLOR_UNKNOWN",
	1: "COLOR_OTHER",
	2: "COLOR_RED",
	3: "COLOR_YELLOW",
	4: "COLOR_GREEN",
	5: "COLOR_BLUE",
	6: "COLOR_WHITE",
}

var TrafficLight_Classification_Color_value = map[string]int32{
	"COLOR_UNKNOWN": 0,
	"COLOR_OTHER":   1,
	"COLOR_RED":     2,
	"COLOR_YELLOW":  3,
	"COLOR_GREEN":   4,
	"COLOR_BLUE":    5,
	"COLOR_WHITE":   6,
}

func (x TrafficLight_Classification_Color) String() string {
	return proto.EnumName(TrafficLight_Classification_Color_name, int32(x))
}

func (TrafficLight_Classification_Color) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_230fce0e556e32ed, []int{0, 0, 0}
}

// Definition of traffic light bulb icon.
//
type TrafficLight_Classification_Icon int32

const (
	// Unknown icon of traffic light (must not be used in ground truth).
	//
	TrafficLight_Classification_ICON_UNKNOWN TrafficLight_Classification_Icon = 0
	// Other (unspecified but known) icon of traffic light.
	//
	TrafficLight_Classification_ICON_OTHER TrafficLight_Classification_Icon = 1
	// This is a normal traffic light without specification of e.g.
	// direction.
	//
	TrafficLight_Classification_ICON_NONE TrafficLight_Classification_Icon = 2
	// This traffic light applies to the lane straight ahead.
	//
	TrafficLight_Classification_ICON_ARROW_STRAIGHT_AHEAD TrafficLight_Classification_Icon = 3
	// This traffic light applies to left turns.
	//
	TrafficLight_Classification_ICON_ARROW_LEFT TrafficLight_Classification_Icon = 4
	// This traffic light applies to diagonal left turns.
	//
	TrafficLight_Classification_ICON_ARROW_DIAG_LEFT TrafficLight_Classification_Icon = 5
	// This traffic light applies to a lane allowing to drive straight
	// ahead or to turn left.
	//
	TrafficLight_Classification_ICON_ARROW_STRAIGHT_AHEAD_LEFT TrafficLight_Classification_Icon = 6
	// This traffic light applies to right turns.
	//
	TrafficLight_Classification_ICON_ARROW_RIGHT TrafficLight_Classification_Icon = 7
	// This traffic light applies to diagonal right turns.
	//
	TrafficLight_Classification_ICON_ARROW_DIAG_RIGHT TrafficLight_Classification_Icon = 8
	// This traffic light applies to a lane allowing to drive straight
	// ahead or to turn right.
	//
	TrafficLight_Classification_ICON_ARROW_STRAIGHT_AHEAD_RIGHT TrafficLight_Classification_Icon = 9
	// This traffic light applies to a lane allowing to turn left or
	// right.
	//
	TrafficLight_Classification_ICON_ARROW_LEFT_RIGHT TrafficLight_Classification_Icon = 10
	// This traffic light indicates that the assigned lane is open for
	// driving.
	//
	TrafficLight_Classification_ICON_ARROW_DOWN TrafficLight_Classification_Icon = 11
	// This traffic light indicates a necessary lane change to the left
	// ahead.
	//
	TrafficLight_Classification_ICON_ARROW_DOWN_LEFT TrafficLight_Classification_Icon = 12
	// This traffic light indicates a necessary lane change to the right
	// ahead.
	//
	TrafficLight_Classification_ICON_ARROW_DOWN_RIGHT TrafficLight_Classification_Icon = 13
	// This traffic light indicates that the assigned lane is not open
	// for driving.
	//
	TrafficLight_Classification_ICON_ARROW_CROSS TrafficLight_Classification_Icon = 14
	// This traffic light is valid for pedestrians.
	//
	TrafficLight_Classification_ICON_PEDESTRIAN TrafficLight_Classification_Icon = 15
	// This traffic light is valid for pedestrians with letters 'walk'.
	//
	TrafficLight_Classification_ICON_WALK TrafficLight_Classification_Icon = 16
	// This traffic light is valid for pedestrians with letters 'don't
	// walk'.
	//
	TrafficLight_Classification_ICON_DONT_WALK TrafficLight_Classification_Icon = 17
	// This traffic light is valid for bicyclists.
	//
	TrafficLight_Classification_ICON_BICYCLE TrafficLight_Classification_Icon = 18
	// This traffic light is valid for pedestrians and bicyclists.
	//
	TrafficLight_Classification_ICON_PEDESTRIAN_AND_BICYCLE TrafficLight_Classification_Icon = 19
	// This traffic light counter in second.
	//
	TrafficLight_Classification_ICON_COUNTDOWN_SECONDS TrafficLight_Classification_Icon = 20
	// This traffic light counter in percent.
	//
	TrafficLight_Classification_ICON_COUNTDOWN_PERCENT TrafficLight_Classification_Icon = 21
	// This traffic light is valid for
	// trams.
	//
	// \note There is no detailed traffic light specification for trams
	// and buses at the moment.
	//
	TrafficLight_Classification_ICON_TRAM TrafficLight_Classification_Icon = 22
	// This traffic light is valid for
	// buses.
	//
	// \note There is no detailed traffic light specification for trams
	// and buses at the moment.
	//
	TrafficLight_Classification_ICON_BUS TrafficLight_Classification_Icon = 23
	// This traffic light is valid for
	// buses and trams.
	//
	// \note There is no detailed traffic light specification for trams
	// and buses at the moment.
	//
	TrafficLight_Classification_ICON_BUS_AND_TRAM TrafficLight_Classification_Icon = 24
)

var TrafficLight_Classification_Icon_name = map[int32]string{
	0:  "ICON_UNKNOWN",
	1:  "ICON_OTHER",
	2:  "ICON_NONE",
	3:  "ICON_ARROW_STRAIGHT_AHEAD",
	4:  "ICON_ARROW_LEFT",
	5:  "ICON_ARROW_DIAG_LEFT",
	6:  "ICON_ARROW_STRAIGHT_AHEAD_LEFT",
	7:  "ICON_ARROW_RIGHT",
	8:  "ICON_ARROW_DIAG_RIGHT",
	9:  "ICON_ARROW_STRAIGHT_AHEAD_RIGHT",
	10: "ICON_ARROW_LEFT_RIGHT",
	11: "ICON_ARROW_DOWN",
	12: "ICON_ARROW_DOWN_LEFT",
	13: "ICON_ARROW_DOWN_RIGHT",
	14: "ICON_ARROW_CROSS",
	15: "ICON_PEDESTRIAN",
	16: "ICON_WALK",
	17: "ICON_DONT_WALK",
	18: "ICON_BICYCLE",
	19: "ICON_PEDESTRIAN_AND_BICYCLE",
	20: "ICON_COUNTDOWN_SECONDS",
	21: "ICON_COUNTDOWN_PERCENT",
	22: "ICON_TRAM",
	23: "ICON_BUS",
	24: "ICON_BUS_AND_TRAM",
}

var TrafficLight_Classification_Icon_value = map[string]int32{
	"ICON_UNKNOWN":                    0,
	"ICON_OTHER":                      1,
	"ICON_NONE":                       2,
	"ICON_ARROW_STRAIGHT_AHEAD":       3,
	"ICON_ARROW_LEFT":                 4,
	"ICON_ARROW_DIAG_LEFT":            5,
	"ICON_ARROW_STRAIGHT_AHEAD_LEFT":  6,
	"ICON_ARROW_RIGHT":                7,
	"ICON_ARROW_DIAG_RIGHT":           8,
	"ICON_ARROW_STRAIGHT_AHEAD_RIGHT": 9,
	"ICON_ARROW_LEFT_RIGHT":           10,
	"ICON_ARROW_DOWN":                 11,
	"ICON_ARROW_DOWN_LEFT":            12,
	"ICON_ARROW_DOWN_RIGHT":           13,
	"ICON_ARROW_CROSS":                14,
	"ICON_PEDESTRIAN":                 15,
	"ICON_WALK":                       16,
	"ICON_DONT_WALK":                  17,
	"ICON_BICYCLE":                    18,
	"ICON_PEDESTRIAN_AND_BICYCLE":     19,
	"ICON_COUNTDOWN_SECONDS":          20,
	"ICON_COUNTDOWN_PERCENT":          21,
	"ICON_TRAM":                       22,
	"ICON_BUS":                        23,
	"ICON_BUS_AND_TRAM":               24,
}

func (x TrafficLight_Classification_Icon) String() string {
	return proto.EnumName(TrafficLight_Classification_Icon_name, int32(x))
}

func (TrafficLight_Classification_Icon) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_230fce0e556e32ed, []int{0, 0, 1}
}

// Definition of light modes for traffic lights.
//
type TrafficLight_Classification_Mode int32

const (
	// Mode is unknown (must not be used in ground truth).
	//
	TrafficLight_Classification_MODE_UNKNOWN TrafficLight_Classification_Mode = 0
	// Other (unspecified but known) mode.
	//
	TrafficLight_Classification_MODE_OTHER TrafficLight_Classification_Mode = 1
	// Traffic light is off.
	//
	TrafficLight_Classification_MODE_OFF TrafficLight_Classification_Mode = 2
	// Light is on and not flashing.
	//
	TrafficLight_Classification_MODE_CONSTANT TrafficLight_Classification_Mode = 3
	// Light is flashing.
	//
	TrafficLight_Classification_MODE_FLASHING TrafficLight_Classification_Mode = 4
	// Light is counting.
	//
	TrafficLight_Classification_MODE_COUNTING TrafficLight_Classification_Mode = 5
)

var TrafficLight_Classification_Mode_name = map[int32]string{
	0: "MODE_UNKNOWN",
	1: "MODE_OTHER",
	2: "MODE_OFF",
	3: "MODE_CONSTANT",
	4: "MODE_FLASHING",
	5: "MODE_COUNTING",
}

var TrafficLight_Classification_Mode_value = map[string]int32{
	"MODE_UNKNOWN":  0,
	"MODE_OTHER":    1,
	"MODE_OFF":      2,
	"MODE_CONSTANT": 3,
	"MODE_FLASHING": 4,
	"MODE_COUNTING": 5,
}

func (x TrafficLight_Classification_Mode) String() string {
	return proto.EnumName(TrafficLight_Classification_Mode_name, int32(x))
}

func (TrafficLight_Classification_Mode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_230fce0e556e32ed, []int{0, 0, 2}
}

//
// \brief A traffic light.
//
// \image html OSI_TrafficLight.jpg
//
// One traffic light message defines a single 'bulb' and not a box of several
// bulbs, e.g. red, yellow, green are three separate traffic lights.
//
type TrafficLight struct {
	// The ID of the traffic light.
	//
	Id *Identifier `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The base parameters of the traffic light.
	//
	// \c BaseStationary::orientation x-axis is view normal of the traffic
	// light's icon.
	//
	Base *BaseStationary `protobuf:"bytes,2,opt,name=base,proto3" json:"base,omitempty"`
	// The classification data for the traffic light.
	//
	Classification       *TrafficLight_Classification `protobuf:"bytes,3,opt,name=classification,proto3" json:"classification,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *TrafficLight) Reset()         { *m = TrafficLight{} }
func (m *TrafficLight) String() string { return proto.CompactTextString(m) }
func (*TrafficLight) ProtoMessage()    {}
func (*TrafficLight) Descriptor() ([]byte, []int) {
	return fileDescriptor_230fce0e556e32ed, []int{0}
}

func (m *TrafficLight) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrafficLight.Unmarshal(m, b)
}
func (m *TrafficLight) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrafficLight.Marshal(b, m, deterministic)
}
func (m *TrafficLight) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficLight.Merge(m, src)
}
func (m *TrafficLight) XXX_Size() int {
	return xxx_messageInfo_TrafficLight.Size(m)
}
func (m *TrafficLight) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficLight.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficLight proto.InternalMessageInfo

func (m *TrafficLight) GetId() *Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *TrafficLight) GetBase() *BaseStationary {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *TrafficLight) GetClassification() *TrafficLight_Classification {
	if m != nil {
		return m.Classification
	}
	return nil
}

//
// \brief \c Classification data for a traffic light.
//
type TrafficLight_Classification struct {
	// The color of the traffic light.
	//
	// \note If the color of the traffic light is known (from history or
	// geometrical arrangement) and the state \c #mode is
	// \c #MODE_OFF then \c #color could remain unchanged.
	// If traffic light displays images in different colors and traffic
	// light is off ( \c #mode =  \c #MODE_OFF), then \c #color = \c
	// #COLOR_OTHER .
	//
	Color TrafficLight_Classification_Color `protobuf:"varint,1,opt,name=color,proto3,enum=osi3.TrafficLight_Classification_Color" json:"color,omitempty"`
	// The icon of the traffic light.
	//
	Icon TrafficLight_Classification_Icon `protobuf:"varint,2,opt,name=icon,proto3,enum=osi3.TrafficLight_Classification_Icon" json:"icon,omitempty"`
	// The operating mode of the traffic light.
	//
	Mode TrafficLight_Classification_Mode `protobuf:"varint,3,opt,name=mode,proto3,enum=osi3.TrafficLight_Classification_Mode" json:"mode,omitempty"`
	// The value of the countdown counter.
	// Unit: [%] or [s]
	//
	// \note Set value only if traffic light bulb is a countdown counter.
	//
	Counter float64 `protobuf:"fixed64,4,opt,name=counter,proto3" json:"counter,omitempty"`
	// The IDs of the lanes that the traffic light is assigned to.
	// Might be multiple if the traffic light is valid for multiple driving
	// lanes.
	//
	// \note OSI uses singular instead of plural for repeated field names.
	//
	AssignedLaneId       []*Identifier `protobuf:"bytes,5,rep,name=assigned_lane_id,json=assignedLaneId,proto3" json:"assigned_lane_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TrafficLight_Classification) Reset()         { *m = TrafficLight_Classification{} }
func (m *TrafficLight_Classification) String() string { return proto.CompactTextString(m) }
func (*TrafficLight_Classification) ProtoMessage()    {}
func (*TrafficLight_Classification) Descriptor() ([]byte, []int) {
	return fileDescriptor_230fce0e556e32ed, []int{0, 0}
}

func (m *TrafficLight_Classification) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrafficLight_Classification.Unmarshal(m, b)
}
func (m *TrafficLight_Classification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrafficLight_Classification.Marshal(b, m, deterministic)
}
func (m *TrafficLight_Classification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficLight_Classification.Merge(m, src)
}
func (m *TrafficLight_Classification) XXX_Size() int {
	return xxx_messageInfo_TrafficLight_Classification.Size(m)
}
func (m *TrafficLight_Classification) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficLight_Classification.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficLight_Classification proto.InternalMessageInfo

func (m *TrafficLight_Classification) GetColor() TrafficLight_Classification_Color {
	if m != nil {
		return m.Color
	}
	return TrafficLight_Classification_COLOR_UNKNOWN
}

func (m *TrafficLight_Classification) GetIcon() TrafficLight_Classification_Icon {
	if m != nil {
		return m.Icon
	}
	return TrafficLight_Classification_ICON_UNKNOWN
}

func (m *TrafficLight_Classification) GetMode() TrafficLight_Classification_Mode {
	if m != nil {
		return m.Mode
	}
	return TrafficLight_Classification_MODE_UNKNOWN
}

func (m *TrafficLight_Classification) GetCounter() float64 {
	if m != nil {
		return m.Counter
	}
	return 0
}

func (m *TrafficLight_Classification) GetAssignedLaneId() []*Identifier {
	if m != nil {
		return m.AssignedLaneId
	}
	return nil
}

func init() {
	proto.RegisterEnum("osi3.TrafficLight_Classification_Color", TrafficLight_Classification_Color_name, TrafficLight_Classification_Color_value)
	proto.RegisterEnum("osi3.TrafficLight_Classification_Icon", TrafficLight_Classification_Icon_name, TrafficLight_Classification_Icon_value)
	proto.RegisterEnum("osi3.TrafficLight_Classification_Mode", TrafficLight_Classification_Mode_name, TrafficLight_Classification_Mode_value)
	proto.RegisterType((*TrafficLight)(nil), "osi3.TrafficLight")
	proto.RegisterType((*TrafficLight_Classification)(nil), "osi3.TrafficLight.Classification")
}

func init() { proto.RegisterFile("osi_trafficlight.proto", fileDescriptor_230fce0e556e32ed) }

var fileDescriptor_230fce0e556e32ed = []byte{
	// 665 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xcf, 0x4e, 0xdb, 0x4a,
	0x14, 0xc6, 0x6f, 0x12, 0x07, 0xc2, 0x21, 0x98, 0x61, 0x08, 0x5c, 0xc3, 0xd5, 0xbd, 0xe4, 0xa6,
	0x52, 0xcb, 0x2a, 0x0b, 0xd8, 0x21, 0x75, 0xe1, 0xd8, 0x93, 0xc4, 0xc2, 0xcc, 0xa0, 0xf1, 0x44,
	0x11, 0xab, 0xc8, 0xd8, 0x0e, 0xb5, 0x14, 0x3c, 0x55, 0x92, 0x2e, 0xba, 0xe9, 0x03, 0xf4, 0xed,
	0xfa, 0x0a, 0x7d, 0x92, 0x6a, 0x66, 0x9a, 0x10, 0x2c, 0x10, 0x5d, 0x9e, 0xef, 0xfc, 0xbe, 0xf3,
	0x67, 0x3c, 0x63, 0x38, 0x96, 0x8b, 0x7c, 0xb2, 0x9c, 0xc7, 0xd3, 0x69, 0x9e, 0xcc, 0xf2, 0x87,
	0x4f, 0xcb, 0xee, 0xe7, 0xb9, 0x5c, 0x4a, 0x6c, 0xc9, 0x45, 0x7e, 0x79, 0x8a, 0x54, 0x36, 0x91,
	0x8f, 0x8f, 0xb2, 0x30, 0x7a, 0xe7, 0x3b, 0x40, 0x53, 0x18, 0x3c, 0x54, 0x38, 0x6e, 0x43, 0x35,
	0x4f, 0x9d, 0x4a, 0xbb, 0x72, 0xbe, 0x7b, 0x81, 0xba, 0xca, 0xd5, 0x0d, 0xd2, 0xac, 0x58, 0xe6,
	0xd3, 0x3c, 0x9b, 0xf3, 0x6a, 0x9e, 0xe2, 0x73, 0xb0, 0xee, 0xe3, 0x45, 0xe6, 0x54, 0x35, 0xd3,
	0x32, 0x4c, 0x2f, 0x5e, 0x64, 0xd1, 0x32, 0x5e, 0xe6, 0xb2, 0x88, 0xe7, 0x5f, 0xb9, 0x26, 0x70,
	0x00, 0x76, 0x32, 0x8b, 0x17, 0x8b, 0x7c, 0x9a, 0x27, 0x3a, 0xe5, 0xd4, 0xb4, 0xe7, 0x7f, 0xe3,
	0xd9, 0xec, 0xdb, 0xf5, 0x9e, 0x81, 0xbc, 0x64, 0x3c, 0xfd, 0xd9, 0x00, 0xfb, 0x39, 0x82, 0x3f,
	0x42, 0x3d, 0x91, 0x33, 0x39, 0xd7, 0xc3, 0xda, 0x17, 0x1f, 0xde, 0x2c, 0xda, 0xf5, 0x14, 0xce,
	0x8d, 0x0b, 0x5f, 0x81, 0x95, 0x27, 0xb2, 0xd0, 0x6b, 0xd8, 0x17, 0xef, 0xdf, 0x76, 0x07, 0x89,
	0x2c, 0xb8, 0xf6, 0x28, 0xef, 0xa3, 0x4c, 0x33, 0xbd, 0xce, 0x1f, 0x79, 0x6f, 0x64, 0x9a, 0x71,
	0xed, 0xc1, 0x0e, 0x6c, 0x27, 0xf2, 0x4b, 0xb1, 0xcc, 0xe6, 0x8e, 0xd5, 0xae, 0x9c, 0x57, 0xf8,
	0x2a, 0xc4, 0x57, 0x80, 0x94, 0xe9, 0xa1, 0xc8, 0xd2, 0xc9, 0x2c, 0x2e, 0xb2, 0x49, 0x9e, 0x3a,
	0xf5, 0x76, 0xed, 0xc5, 0x0f, 0x61, 0xaf, 0xc8, 0x30, 0x2e, 0xb2, 0x20, 0xed, 0x7c, 0x83, 0xba,
	0xde, 0x0e, 0x1f, 0xc0, 0x9e, 0xc7, 0x42, 0xc6, 0x27, 0x23, 0x7a, 0x4d, 0xd9, 0x98, 0xa2, 0xbf,
	0xf0, 0x3e, 0xec, 0x1a, 0x89, 0x89, 0x21, 0xe1, 0xa8, 0x82, 0xf7, 0x60, 0xc7, 0x08, 0x9c, 0xf8,
	0xa8, 0x8a, 0x11, 0x34, 0x4d, 0x78, 0x47, 0xc2, 0x90, 0x8d, 0x51, 0xed, 0xc9, 0x31, 0xe0, 0x84,
	0x50, 0x64, 0x61, 0x1b, 0xc0, 0x08, 0xbd, 0x70, 0x44, 0x50, 0xfd, 0x09, 0x18, 0x0f, 0x03, 0x41,
	0xd0, 0x56, 0xe7, 0x87, 0x05, 0x96, 0x3a, 0x20, 0x55, 0x2c, 0xf0, 0x18, 0xdd, 0x68, 0x6f, 0x03,
	0x68, 0x65, 0xa3, 0xbb, 0x8e, 0x29, 0xa3, 0x04, 0x55, 0xf1, 0xbf, 0x70, 0xa2, 0x43, 0x97, 0x73,
	0x36, 0x9e, 0x44, 0x82, 0xbb, 0xc1, 0x60, 0x28, 0x26, 0xee, 0x90, 0xb8, 0x3e, 0xaa, 0xe1, 0x43,
	0xd8, 0xdf, 0x48, 0x87, 0xa4, 0x2f, 0x90, 0x85, 0x1d, 0x68, 0x6d, 0x88, 0x7e, 0xe0, 0x0e, 0x4c,
	0xa6, 0x8e, 0x3b, 0xf0, 0xdf, 0xab, 0xd5, 0x0c, 0xb3, 0x85, 0x5b, 0x80, 0x36, 0x18, 0xae, 0x00,
	0xb4, 0x8d, 0x4f, 0xe0, 0xa8, 0x5c, 0xd3, 0xa4, 0x1a, 0xf8, 0x1d, 0x9c, 0xbd, 0x5e, 0xd4, 0x40,
	0x3b, 0x25, 0xbf, 0x6a, 0xf5, 0x3b, 0x05, 0xa5, 0x1d, 0x7c, 0x75, 0x2c, 0xbb, 0xe5, 0x1d, 0xd8,
	0x98, 0x9a, 0xf9, 0x9a, 0xe5, 0x49, 0x54, 0xc6, 0x54, 0xda, 0x2b, 0x8d, 0xee, 0x71, 0x16, 0x45,
	0xc8, 0x5e, 0xd7, 0xbf, 0x25, 0x3e, 0x89, 0x04, 0x0f, 0x5c, 0x8a, 0xf6, 0xd7, 0xc7, 0x3c, 0x76,
	0xc3, 0x6b, 0x84, 0x30, 0x06, 0x5b, 0x87, 0x3e, 0xa3, 0xc2, 0x68, 0x07, 0xeb, 0x6f, 0xd5, 0x0b,
	0xbc, 0x3b, 0x2f, 0x24, 0x08, 0xe3, 0x33, 0xf8, 0xa7, 0x54, 0x69, 0xe2, 0x52, 0x7f, 0x0d, 0x1c,
	0xe2, 0x53, 0x38, 0xd6, 0x80, 0xc7, 0x46, 0x54, 0xe8, 0xd1, 0x22, 0xe2, 0x31, 0xea, 0x47, 0xa8,
	0xf5, 0x42, 0xee, 0x96, 0x70, 0x8f, 0x50, 0x81, 0x8e, 0xd6, 0xd3, 0x08, 0xee, 0xde, 0xa0, 0x63,
	0xdc, 0x84, 0x86, 0xe9, 0x3c, 0x8a, 0xd0, 0xdf, 0xf8, 0x08, 0x0e, 0x56, 0x91, 0x6e, 0xa7, 0x21,
	0xa7, 0x23, 0xc1, 0x52, 0xef, 0x46, 0x8d, 0x79, 0xc3, 0x7c, 0xf2, 0xfc, 0x4a, 0x69, 0x65, 0x75,
	0xa5, 0x9a, 0xd0, 0x30, 0x71, 0xbf, 0x8f, 0xaa, 0xea, 0x09, 0xe8, 0xc8, 0x63, 0x34, 0x12, 0x2e,
	0x15, 0xa8, 0xb6, 0x96, 0xfa, 0xa1, 0x1b, 0x0d, 0x03, 0x3a, 0x40, 0xd6, 0x06, 0x35, 0xa2, 0x42,
	0x49, 0xf5, 0x5e, 0x75, 0x58, 0xb9, 0xdf, 0xd2, 0xff, 0xc5, 0xcb, 0x5f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x77, 0x56, 0x72, 0x9d, 0x49, 0x05, 0x00, 0x00,
}
