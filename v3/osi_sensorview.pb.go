// Code generated by protoc-gen-go. DO NOT EDIT.
// source: osi_sensorview.proto

package osi3

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

//
// \brief The sensor view is derived from \c GroundTruth and used as
// input to sensor models.
//
// The sensor view information is supposed to provide input to sensor
// models for simulation of actual real sensors.
// All information regarding the environment is given with respect to
// the virtual sensor coordinate system specified in
// \c SensorView::mounting_position, except for the individual physical
// technology-specific data, which is given with respect to the physical
// sensor coordinate system specified in the corresponding physical sensor's
// \c #mounting_position, and the \c #global_ground_truth, which is given in
// global coordinates.
//
// When simulating multiple distinct sensors, each sensor can consume an
// individual copy of the \c SensorView interface. This allows an independent
// treatment of the sensors.
//
// Alternatively combined sensor models can also consume one combined
// \c SensorView, with either combined or separate \c SensorData outputs,
// depending on model architecture.
//
type SensorView struct {
	// The interface version used by the sender (simulation environment).
	//
	Version *InterfaceVersion `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// The data timestamp of the simulation environment. Zero time is arbitrary
	// but must be identical for all messages. Zero time does not need to
	// coincide with the UNIX epoch. Recommended is the starting time point of
	// the simulation.
	//
	// \note For sensor view data this timestamp coincides both with the
	// notional simulation time the data applies to and the time it was sent
	// (there is no inherent latency for sensor view data, as opposed to
	// sensor data).
	//
	Timestamp *Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The ID of the sensor at host vehicle's \c #mounting_position.
	//
	// This is the ID of the virtual sensor, to be used in its detected
	// object output; it is distinct from the IDs of its physical detectors,
	// which are used in the detected features.
	//
	SensorId *Identifier `protobuf:"bytes,3,opt,name=sensor_id,json=sensorId,proto3" json:"sensor_id,omitempty"`
	// The virtual mounting position of the sensor (origin and orientation
	// of the sensor coordinate system) given in vehicle coordinates [1].
	// The virtual position pertains to the sensor as a whole, regardless
	// of the actual position of individual physical detectors, and governs
	// the sensor-relative coordinates in detected objects of the sensor
	// as a whole. Individual features detected by individual physical
	// detectors are governed by the actual physical mounting positions
	// of the detectors, as indicated in the technology-specific sub-views
	// and sub-view configurations.
	//
	// \arg \b x-direction of sensor coordinate system: sensor viewing direction
	// \arg \b z-direction of sensor coordinate system: sensor (up)
	// \arg \b y-direction of sensor coordinate system: perpendicular to x and z
	// right hand system
	//
	// \par References:
	// - [1] DIN ISO 8855:2013-11
	//
	// \note This field is usually static during the simulation.
	// \note The origin of vehicle's coordinate system in world frame is
	// ( \c MovingObject::base . \c BaseMoving::position +
	// Inverse_Rotation_yaw_pitch_roll( \c MovingObject::base . \c
	// BaseMoving::orientation) * \c
	// MovingObject::VehicleAttributes::bbcenter_to_rear) . The orientation of
	// the vehicle's coordinate system is equal to the orientation of the
	// vehicle's bounding box \c MovingObject::base . \c
	// BaseMoving::orientation.
	//
	MountingPosition *MountingPosition `protobuf:"bytes,4,opt,name=mounting_position,json=mountingPosition,proto3" json:"mounting_position,omitempty"`
	// The root mean squared error of the mounting position.
	//
	MountingPositionRmse *MountingPosition `protobuf:"bytes,5,opt,name=mounting_position_rmse,json=mountingPositionRmse,proto3" json:"mounting_position_rmse,omitempty"`
	// Host vehicle data.
	//
	// Host vehicle data is data that the host vehicle knows about itself,
	// e.g. from location sensors, internal sensors and ECU bus data, etc.,
	// that is made available to sensors as input.
	//
	HostVehicleData *HostVehicleData `protobuf:"bytes,6,opt,name=host_vehicle_data,json=hostVehicleData,proto3" json:"host_vehicle_data,omitempty"`
	// Ground truth w.r.t. global coordinate system.
	//
	// This is the ground truth that is provided to the sensor model by the
	// simulation environment. It is filtered as per the requirements of the
	// sensor model as expressed by the \c SensorViewConfiguration message(s)
	// that where exchanged during the simulation initialization phase.
	//
	// \note The host vehicle is always contained in the ground truth provided,
	// regardless of any filtering.
	//
	GlobalGroundTruth *GroundTruth `protobuf:"bytes,7,opt,name=global_ground_truth,json=globalGroundTruth,proto3" json:"global_ground_truth,omitempty"`
	// The ID of the host vehicle in the \c #global_ground_truth data.
	//
	HostVehicleId *Identifier `protobuf:"bytes,8,opt,name=host_vehicle_id,json=hostVehicleId,proto3" json:"host_vehicle_id,omitempty"`
	// Generic SensorView(s).
	//
	// \note OSI uses singular instead of plural for repeated field names.
	//
	GenericSensorView []*GenericSensorView `protobuf:"bytes,1000,rep,name=generic_sensor_view,json=genericSensorView,proto3" json:"generic_sensor_view,omitempty"`
	// Radar-specific SensorView(s).
	//
	// \note OSI uses singular instead of plural for repeated field names.
	//
	RadarSensorView []*RadarSensorView `protobuf:"bytes,1001,rep,name=radar_sensor_view,json=radarSensorView,proto3" json:"radar_sensor_view,omitempty"`
	// Lidar-specific SensorView(s).
	//
	// \note OSI uses singular instead of plural for repeated field names.
	//
	LidarSensorView []*LidarSensorView `protobuf:"bytes,1002,rep,name=lidar_sensor_view,json=lidarSensorView,proto3" json:"lidar_sensor_view,omitempty"`
	// Camera-specific SensorView(s).
	//
	// \note OSI uses singular instead of plural for repeated field names.
	//
	CameraSensorView []*CameraSensorView `protobuf:"bytes,1003,rep,name=camera_sensor_view,json=cameraSensorView,proto3" json:"camera_sensor_view,omitempty"`
	// Ultrasonic-specific SensorView(s).
	//
	// \note OSI uses singular instead of plural for repeated field names.
	//
	UltrasonicSensorView []*UltrasonicSensorView `protobuf:"bytes,1004,rep,name=ultrasonic_sensor_view,json=ultrasonicSensorView,proto3" json:"ultrasonic_sensor_view,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *SensorView) Reset()         { *m = SensorView{} }
func (m *SensorView) String() string { return proto.CompactTextString(m) }
func (*SensorView) ProtoMessage()    {}
func (*SensorView) Descriptor() ([]byte, []int) {
	return fileDescriptor_0101f9a81926cfc6, []int{0}
}

func (m *SensorView) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SensorView.Unmarshal(m, b)
}
func (m *SensorView) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SensorView.Marshal(b, m, deterministic)
}
func (m *SensorView) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SensorView.Merge(m, src)
}
func (m *SensorView) XXX_Size() int {
	return xxx_messageInfo_SensorView.Size(m)
}
func (m *SensorView) XXX_DiscardUnknown() {
	xxx_messageInfo_SensorView.DiscardUnknown(m)
}

var xxx_messageInfo_SensorView proto.InternalMessageInfo

func (m *SensorView) GetVersion() *InterfaceVersion {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *SensorView) GetTimestamp() *Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *SensorView) GetSensorId() *Identifier {
	if m != nil {
		return m.SensorId
	}
	return nil
}

func (m *SensorView) GetMountingPosition() *MountingPosition {
	if m != nil {
		return m.MountingPosition
	}
	return nil
}

func (m *SensorView) GetMountingPositionRmse() *MountingPosition {
	if m != nil {
		return m.MountingPositionRmse
	}
	return nil
}

func (m *SensorView) GetHostVehicleData() *HostVehicleData {
	if m != nil {
		return m.HostVehicleData
	}
	return nil
}

func (m *SensorView) GetGlobalGroundTruth() *GroundTruth {
	if m != nil {
		return m.GlobalGroundTruth
	}
	return nil
}

func (m *SensorView) GetHostVehicleId() *Identifier {
	if m != nil {
		return m.HostVehicleId
	}
	return nil
}

func (m *SensorView) GetGenericSensorView() []*GenericSensorView {
	if m != nil {
		return m.GenericSensorView
	}
	return nil
}

func (m *SensorView) GetRadarSensorView() []*RadarSensorView {
	if m != nil {
		return m.RadarSensorView
	}
	return nil
}

func (m *SensorView) GetLidarSensorView() []*LidarSensorView {
	if m != nil {
		return m.LidarSensorView
	}
	return nil
}

func (m *SensorView) GetCameraSensorView() []*CameraSensorView {
	if m != nil {
		return m.CameraSensorView
	}
	return nil
}

func (m *SensorView) GetUltrasonicSensorView() []*UltrasonicSensorView {
	if m != nil {
		return m.UltrasonicSensorView
	}
	return nil
}

//
// \brief Definition of the generic sensor view.
//
// Generic sensor view data.
//
type GenericSensorView struct {
	// Generic view configuration valid at the time the data was created.
	//
	ViewConfiguration    *GenericSensorViewConfiguration `protobuf:"bytes,1,opt,name=view_configuration,json=viewConfiguration,proto3" json:"view_configuration,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *GenericSensorView) Reset()         { *m = GenericSensorView{} }
func (m *GenericSensorView) String() string { return proto.CompactTextString(m) }
func (*GenericSensorView) ProtoMessage()    {}
func (*GenericSensorView) Descriptor() ([]byte, []int) {
	return fileDescriptor_0101f9a81926cfc6, []int{1}
}

func (m *GenericSensorView) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenericSensorView.Unmarshal(m, b)
}
func (m *GenericSensorView) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenericSensorView.Marshal(b, m, deterministic)
}
func (m *GenericSensorView) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenericSensorView.Merge(m, src)
}
func (m *GenericSensorView) XXX_Size() int {
	return xxx_messageInfo_GenericSensorView.Size(m)
}
func (m *GenericSensorView) XXX_DiscardUnknown() {
	xxx_messageInfo_GenericSensorView.DiscardUnknown(m)
}

var xxx_messageInfo_GenericSensorView proto.InternalMessageInfo

func (m *GenericSensorView) GetViewConfiguration() *GenericSensorViewConfiguration {
	if m != nil {
		return m.ViewConfiguration
	}
	return nil
}

//
// \brief Definition of the radar sensor view.
//
// Radar specific sensor view data.
//
type RadarSensorView struct {
	// Radar view configuration valid at the time the data was created.
	//
	ViewConfiguration *RadarSensorViewConfiguration `protobuf:"bytes,1,opt,name=view_configuration,json=viewConfiguration,proto3" json:"view_configuration,omitempty"`
	// Ray tracing data.
	//
	// This field includes one entry for each ray, in left-to-right,
	// top-to-bottom order (think of scan lines in a TV).
	//
	// \note OSI uses singular instead of plural for repeated field names.
	//
	Reflection           []*RadarSensorView_Reflection `protobuf:"bytes,2,rep,name=reflection,proto3" json:"reflection,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *RadarSensorView) Reset()         { *m = RadarSensorView{} }
func (m *RadarSensorView) String() string { return proto.CompactTextString(m) }
func (*RadarSensorView) ProtoMessage()    {}
func (*RadarSensorView) Descriptor() ([]byte, []int) {
	return fileDescriptor_0101f9a81926cfc6, []int{2}
}

func (m *RadarSensorView) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RadarSensorView.Unmarshal(m, b)
}
func (m *RadarSensorView) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RadarSensorView.Marshal(b, m, deterministic)
}
func (m *RadarSensorView) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RadarSensorView.Merge(m, src)
}
func (m *RadarSensorView) XXX_Size() int {
	return xxx_messageInfo_RadarSensorView.Size(m)
}
func (m *RadarSensorView) XXX_DiscardUnknown() {
	xxx_messageInfo_RadarSensorView.DiscardUnknown(m)
}

var xxx_messageInfo_RadarSensorView proto.InternalMessageInfo

func (m *RadarSensorView) GetViewConfiguration() *RadarSensorViewConfiguration {
	if m != nil {
		return m.ViewConfiguration
	}
	return nil
}

func (m *RadarSensorView) GetReflection() []*RadarSensorView_Reflection {
	if m != nil {
		return m.Reflection
	}
	return nil
}

//
// \brief Definition of the radar reflection.
//
type RadarSensorView_Reflection struct {
	// Relative signal level of the reflection.
	//
	// This takes the combined antenna diagram (losses in TX and RX)
	// as well as the signal losses due to scattering and absorption
	// into account, and will, when multiplied by TX power yield the
	// actual RX power.
	//
	// Unit: [dB]
	//
	SignalStrength float64 `protobuf:"fixed64,1,opt,name=signal_strength,json=signalStrength,proto3" json:"signal_strength,omitempty"`
	// Time of flight.
	//
	// This is the time of flight of the reflection, which is directly
	// proportional to the distance traveled.
	//
	// Unit: [s]
	//
	TimeOfFlight float64 `protobuf:"fixed64,2,opt,name=time_of_flight,json=timeOfFlight,proto3" json:"time_of_flight,omitempty"`
	// Doppler shift.
	//
	// Shift in frequency based on the specified TX frequency.
	//
	// Unit: [Hz]
	//
	DopplerShift float64 `protobuf:"fixed64,3,opt,name=doppler_shift,json=dopplerShift,proto3" json:"doppler_shift,omitempty"`
	// TX horizontal angle (azimuth).
	//
	// Horizontal angle of incidence of the source of the reflection
	// at the TX antenna.
	//
	// Unit: [rad]
	//
	SourceHorizontalAngle float64 `protobuf:"fixed64,4,opt,name=source_horizontal_angle,json=sourceHorizontalAngle,proto3" json:"source_horizontal_angle,omitempty"`
	// TX vertical angle (elevation).
	//
	// Vertical angle of incidence of the source of the reflection
	// at the TX antenna.
	//
	// Unit: [rad]
	//
	SourceVerticalAngle  float64  `protobuf:"fixed64,5,opt,name=source_vertical_angle,json=sourceVerticalAngle,proto3" json:"source_vertical_angle,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RadarSensorView_Reflection) Reset()         { *m = RadarSensorView_Reflection{} }
func (m *RadarSensorView_Reflection) String() string { return proto.CompactTextString(m) }
func (*RadarSensorView_Reflection) ProtoMessage()    {}
func (*RadarSensorView_Reflection) Descriptor() ([]byte, []int) {
	return fileDescriptor_0101f9a81926cfc6, []int{2, 0}
}

func (m *RadarSensorView_Reflection) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RadarSensorView_Reflection.Unmarshal(m, b)
}
func (m *RadarSensorView_Reflection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RadarSensorView_Reflection.Marshal(b, m, deterministic)
}
func (m *RadarSensorView_Reflection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RadarSensorView_Reflection.Merge(m, src)
}
func (m *RadarSensorView_Reflection) XXX_Size() int {
	return xxx_messageInfo_RadarSensorView_Reflection.Size(m)
}
func (m *RadarSensorView_Reflection) XXX_DiscardUnknown() {
	xxx_messageInfo_RadarSensorView_Reflection.DiscardUnknown(m)
}

var xxx_messageInfo_RadarSensorView_Reflection proto.InternalMessageInfo

func (m *RadarSensorView_Reflection) GetSignalStrength() float64 {
	if m != nil {
		return m.SignalStrength
	}
	return 0
}

func (m *RadarSensorView_Reflection) GetTimeOfFlight() float64 {
	if m != nil {
		return m.TimeOfFlight
	}
	return 0
}

func (m *RadarSensorView_Reflection) GetDopplerShift() float64 {
	if m != nil {
		return m.DopplerShift
	}
	return 0
}

func (m *RadarSensorView_Reflection) GetSourceHorizontalAngle() float64 {
	if m != nil {
		return m.SourceHorizontalAngle
	}
	return 0
}

func (m *RadarSensorView_Reflection) GetSourceVerticalAngle() float64 {
	if m != nil {
		return m.SourceVerticalAngle
	}
	return 0
}

//
// \brief Definition of the lidar sensor view.
//
// Lidar specific sensor view data.
//
type LidarSensorView struct {
	// Lidar view configuration valid at the time the data was created.
	//
	ViewConfiguration *LidarSensorViewConfiguration `protobuf:"bytes,1,opt,name=view_configuration,json=viewConfiguration,proto3" json:"view_configuration,omitempty"`
	// Ray tracing data.
	//
	// This field includes one entry for each ray, in left-to-right,
	// top-to-bottom order (think of scan lines in a TV).
	//
	// \note OSI uses singular instead of plural for repeated field names.
	//
	Reflection           []*LidarSensorView_Reflection `protobuf:"bytes,2,rep,name=reflection,proto3" json:"reflection,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *LidarSensorView) Reset()         { *m = LidarSensorView{} }
func (m *LidarSensorView) String() string { return proto.CompactTextString(m) }
func (*LidarSensorView) ProtoMessage()    {}
func (*LidarSensorView) Descriptor() ([]byte, []int) {
	return fileDescriptor_0101f9a81926cfc6, []int{3}
}

func (m *LidarSensorView) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LidarSensorView.Unmarshal(m, b)
}
func (m *LidarSensorView) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LidarSensorView.Marshal(b, m, deterministic)
}
func (m *LidarSensorView) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LidarSensorView.Merge(m, src)
}
func (m *LidarSensorView) XXX_Size() int {
	return xxx_messageInfo_LidarSensorView.Size(m)
}
func (m *LidarSensorView) XXX_DiscardUnknown() {
	xxx_messageInfo_LidarSensorView.DiscardUnknown(m)
}

var xxx_messageInfo_LidarSensorView proto.InternalMessageInfo

func (m *LidarSensorView) GetViewConfiguration() *LidarSensorViewConfiguration {
	if m != nil {
		return m.ViewConfiguration
	}
	return nil
}

func (m *LidarSensorView) GetReflection() []*LidarSensorView_Reflection {
	if m != nil {
		return m.Reflection
	}
	return nil
}

//
// \brief Definition of the lidar reflection.
//
type LidarSensorView_Reflection struct {
	// Relative signal level of the reflection.
	//
	// This takes the signal losses due to scattering and absorption
	// into account, and will, when multiplied by TX power yield the
	// potential RX power (disregarding any other RX/TX losses).
	//
	// Unit: [dB]
	//
	SignalStrength float64 `protobuf:"fixed64,1,opt,name=signal_strength,json=signalStrength,proto3" json:"signal_strength,omitempty"`
	// Time of flight.
	//
	// This is the time of flight of the reflection, which is directly
	// proportional to the distance traveled.
	//
	// Unit: [s]
	//
	TimeOfFlight float64 `protobuf:"fixed64,2,opt,name=time_of_flight,json=timeOfFlight,proto3" json:"time_of_flight,omitempty"`
	// Doppler shift.
	//
	// Shift in frequency based on the specified TX frequency.
	//
	// Unit: [Hz]
	//
	DopplerShift float64 `protobuf:"fixed64,3,opt,name=doppler_shift,json=dopplerShift,proto3" json:"doppler_shift,omitempty"`
	// normal to surface angle.
	//
	// The normal of the transmitted beam to the object, roadmarking etc encounter.
	// \note data is in Lidar coordinate system
	//
	// Unit: [unit vector]
	//
	NormalToSurface *Vector3D `protobuf:"bytes,5,opt,name=normal_to_surface,json=normalToSurface,proto3" json:"normal_to_surface,omitempty"`
	// ID of the detected object this reflection is associated to.
	// can be used for raytracing debug
	//
	// \note ID = MAX(uint64) indicates no reference to an object.
	ObjectId             *Identifier `protobuf:"bytes,6,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *LidarSensorView_Reflection) Reset()         { *m = LidarSensorView_Reflection{} }
func (m *LidarSensorView_Reflection) String() string { return proto.CompactTextString(m) }
func (*LidarSensorView_Reflection) ProtoMessage()    {}
func (*LidarSensorView_Reflection) Descriptor() ([]byte, []int) {
	return fileDescriptor_0101f9a81926cfc6, []int{3, 0}
}

func (m *LidarSensorView_Reflection) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LidarSensorView_Reflection.Unmarshal(m, b)
}
func (m *LidarSensorView_Reflection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LidarSensorView_Reflection.Marshal(b, m, deterministic)
}
func (m *LidarSensorView_Reflection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LidarSensorView_Reflection.Merge(m, src)
}
func (m *LidarSensorView_Reflection) XXX_Size() int {
	return xxx_messageInfo_LidarSensorView_Reflection.Size(m)
}
func (m *LidarSensorView_Reflection) XXX_DiscardUnknown() {
	xxx_messageInfo_LidarSensorView_Reflection.DiscardUnknown(m)
}

var xxx_messageInfo_LidarSensorView_Reflection proto.InternalMessageInfo

func (m *LidarSensorView_Reflection) GetSignalStrength() float64 {
	if m != nil {
		return m.SignalStrength
	}
	return 0
}

func (m *LidarSensorView_Reflection) GetTimeOfFlight() float64 {
	if m != nil {
		return m.TimeOfFlight
	}
	return 0
}

func (m *LidarSensorView_Reflection) GetDopplerShift() float64 {
	if m != nil {
		return m.DopplerShift
	}
	return 0
}

func (m *LidarSensorView_Reflection) GetNormalToSurface() *Vector3D {
	if m != nil {
		return m.NormalToSurface
	}
	return nil
}

func (m *LidarSensorView_Reflection) GetObjectId() *Identifier {
	if m != nil {
		return m.ObjectId
	}
	return nil
}

//
// \brief Definition of the camera sensor view.
//
// Camera specific sensor view data.
//
type CameraSensorView struct {
	// Camera view configuration valid at the time the data was created.
	//
	ViewConfiguration *CameraSensorViewConfiguration `protobuf:"bytes,1,opt,name=view_configuration,json=viewConfiguration,proto3" json:"view_configuration,omitempty"`
	// Raw image data.
	//
	// The raw image data in the memory layout and order specified by the
	// camera sensor input configuration.
	//
	ImageData            []byte   `protobuf:"bytes,2,opt,name=image_data,json=imageData,proto3" json:"image_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CameraSensorView) Reset()         { *m = CameraSensorView{} }
func (m *CameraSensorView) String() string { return proto.CompactTextString(m) }
func (*CameraSensorView) ProtoMessage()    {}
func (*CameraSensorView) Descriptor() ([]byte, []int) {
	return fileDescriptor_0101f9a81926cfc6, []int{4}
}

func (m *CameraSensorView) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CameraSensorView.Unmarshal(m, b)
}
func (m *CameraSensorView) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CameraSensorView.Marshal(b, m, deterministic)
}
func (m *CameraSensorView) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CameraSensorView.Merge(m, src)
}
func (m *CameraSensorView) XXX_Size() int {
	return xxx_messageInfo_CameraSensorView.Size(m)
}
func (m *CameraSensorView) XXX_DiscardUnknown() {
	xxx_messageInfo_CameraSensorView.DiscardUnknown(m)
}

var xxx_messageInfo_CameraSensorView proto.InternalMessageInfo

func (m *CameraSensorView) GetViewConfiguration() *CameraSensorViewConfiguration {
	if m != nil {
		return m.ViewConfiguration
	}
	return nil
}

func (m *CameraSensorView) GetImageData() []byte {
	if m != nil {
		return m.ImageData
	}
	return nil
}

//
// \brief Definition of the ultrasonic sensor view.
//
// Ultrasonic specific sensor view data.
//
type UltrasonicSensorView struct {
	// Ultrasonic view configuration valid at the time the data was created.
	//
	ViewConfiguration    *UltrasonicSensorViewConfiguration `protobuf:"bytes,1,opt,name=view_configuration,json=viewConfiguration,proto3" json:"view_configuration,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *UltrasonicSensorView) Reset()         { *m = UltrasonicSensorView{} }
func (m *UltrasonicSensorView) String() string { return proto.CompactTextString(m) }
func (*UltrasonicSensorView) ProtoMessage()    {}
func (*UltrasonicSensorView) Descriptor() ([]byte, []int) {
	return fileDescriptor_0101f9a81926cfc6, []int{5}
}

func (m *UltrasonicSensorView) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UltrasonicSensorView.Unmarshal(m, b)
}
func (m *UltrasonicSensorView) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UltrasonicSensorView.Marshal(b, m, deterministic)
}
func (m *UltrasonicSensorView) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UltrasonicSensorView.Merge(m, src)
}
func (m *UltrasonicSensorView) XXX_Size() int {
	return xxx_messageInfo_UltrasonicSensorView.Size(m)
}
func (m *UltrasonicSensorView) XXX_DiscardUnknown() {
	xxx_messageInfo_UltrasonicSensorView.DiscardUnknown(m)
}

var xxx_messageInfo_UltrasonicSensorView proto.InternalMessageInfo

func (m *UltrasonicSensorView) GetViewConfiguration() *UltrasonicSensorViewConfiguration {
	if m != nil {
		return m.ViewConfiguration
	}
	return nil
}

func init() {
	proto.RegisterType((*SensorView)(nil), "osi3.SensorView")
	proto.RegisterType((*GenericSensorView)(nil), "osi3.GenericSensorView")
	proto.RegisterType((*RadarSensorView)(nil), "osi3.RadarSensorView")
	proto.RegisterType((*RadarSensorView_Reflection)(nil), "osi3.RadarSensorView.Reflection")
	proto.RegisterType((*LidarSensorView)(nil), "osi3.LidarSensorView")
	proto.RegisterType((*LidarSensorView_Reflection)(nil), "osi3.LidarSensorView.Reflection")
	proto.RegisterType((*CameraSensorView)(nil), "osi3.CameraSensorView")
	proto.RegisterType((*UltrasonicSensorView)(nil), "osi3.UltrasonicSensorView")
}

func init() { proto.RegisterFile("osi_sensorview.proto", fileDescriptor_0101f9a81926cfc6) }

var fileDescriptor_0101f9a81926cfc6 = []byte{
	// 796 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x95, 0xcd, 0x6e, 0xdc, 0x36,
	0x10, 0xc7, 0x21, 0x3b, 0xb1, 0x93, 0x89, 0x63, 0xad, 0xe8, 0x8f, 0xa8, 0x06, 0x0a, 0xb8, 0x9b,
	0x00, 0xc9, 0xa5, 0x46, 0x61, 0x03, 0x45, 0xd1, 0x53, 0x1d, 0xf7, 0xc3, 0x06, 0x52, 0xb4, 0xe1,
	0xba, 0x7b, 0x25, 0x68, 0x89, 0x92, 0x58, 0x48, 0xe4, 0x82, 0xa4, 0x1c, 0xa0, 0xf7, 0xbe, 0x41,
	0xfb, 0x74, 0x7d, 0x81, 0xb6, 0xc9, 0x43, 0x14, 0xfc, 0xc8, 0xae, 0xa4, 0xec, 0xae, 0x0b, 0xf4,
	0xd0, 0xeb, 0xff, 0x3f, 0xf3, 0xe3, 0x68, 0x86, 0x1a, 0xc2, 0xbe, 0xd4, 0x9c, 0x68, 0x26, 0xb4,
	0x54, 0xb7, 0x9c, 0xbd, 0x39, 0x99, 0x29, 0x69, 0x24, 0xba, 0x27, 0x35, 0x3f, 0x3b, 0x4a, 0xac,
	0x77, 0xcb, 0x94, 0xe6, 0x52, 0x78, 0xe3, 0x68, 0x64, 0xa5, 0x4c, 0x36, 0xcd, 0x5c, 0x39, 0xb0,
	0x4a, 0xa9, 0x64, 0x2b, 0x72, 0xa3, 0x5a, 0x53, 0x05, 0xf9, 0x93, 0x3e, 0x37, 0x93, 0xa2, 0xe0,
	0x65, 0xab, 0xa8, 0x59, 0xb0, 0x3e, 0xb2, 0x21, 0x95, 0xd4, 0xe6, 0x96, 0x55, 0x3c, 0xab, 0x59,
	0x4e, 0x0d, 0xf5, 0xd6, 0xf8, 0x8f, 0x2d, 0x80, 0x89, 0x4b, 0x9e, 0x72, 0xf6, 0x06, 0x7d, 0x06,
	0xdb, 0xa1, 0x8c, 0x34, 0x3a, 0x8e, 0x5e, 0x3c, 0x3a, 0x3d, 0x3c, 0xb1, 0x05, 0x9e, 0x5c, 0x09,
	0xc3, 0x54, 0x41, 0x33, 0x36, 0xf5, 0x2e, 0x7e, 0x1f, 0x86, 0x3e, 0x85, 0x87, 0x86, 0x37, 0x4c,
	0x1b, 0xda, 0xcc, 0xd2, 0x0d, 0x97, 0x13, 0xfb, 0x9c, 0xeb, 0xf7, 0x32, 0x5e, 0x44, 0xd8, 0x70,
	0x5f, 0x2b, 0xe1, 0x79, 0xba, 0xe9, 0xc2, 0x47, 0xe1, 0x88, 0x9c, 0x09, 0xc3, 0x0b, 0xce, 0x14,
	0x7e, 0xe0, 0x43, 0xae, 0x72, 0x74, 0x01, 0x49, 0x23, 0x5b, 0x61, 0xb8, 0x28, 0xc9, 0x4c, 0x6a,
	0x6e, 0x3f, 0x2a, 0xbd, 0xd7, 0xad, 0xec, 0xfb, 0x60, 0xff, 0x18, 0x5c, 0x3c, 0x6a, 0x06, 0x0a,
	0x7a, 0x05, 0x87, 0x1f, 0x40, 0x88, 0x6a, 0x34, 0x4b, 0xef, 0xaf, 0x25, 0xed, 0x0f, 0x49, 0xb8,
	0xd1, 0x0c, 0x9d, 0x43, 0x62, 0x5b, 0x49, 0x42, 0x2f, 0x89, 0x6d, 0x66, 0xba, 0xe5, 0x40, 0x07,
	0x1e, 0x74, 0x29, 0xb5, 0x99, 0x7a, 0xf7, 0x6b, 0x6a, 0x28, 0x8e, 0xab, 0xbe, 0x80, 0xce, 0x61,
	0xaf, 0xac, 0xe5, 0x0d, 0xad, 0xc3, 0x38, 0x89, 0x9b, 0x67, 0xba, 0xed, 0x20, 0x89, 0x87, 0x7c,
	0xe7, 0x9c, 0x6b, 0x6b, 0xe0, 0xc4, 0x47, 0x77, 0x24, 0xf4, 0x05, 0xc4, 0xbd, 0x2a, 0x78, 0x9e,
	0x3e, 0x58, 0xd1, 0xcd, 0xc7, 0x9d, 0xe3, 0xaf, 0x72, 0x74, 0x09, 0x7b, 0x25, 0x13, 0x4c, 0xf1,
	0x2c, 0xdc, 0x1a, 0x62, 0xaf, 0x4d, 0xfa, 0xe7, 0xf6, 0xf1, 0xe6, 0x8b, 0x47, 0xa7, 0x4f, 0xc2,
	0xe9, 0x3e, 0x62, 0x71, 0x33, 0x70, 0x52, 0x0e, 0x25, 0xf4, 0x12, 0x12, 0x45, 0x73, 0xaa, 0x7a,
	0x9c, 0xbf, 0x3c, 0x27, 0xb4, 0x02, 0x5b, 0xbf, 0x43, 0x89, 0x55, 0x5f, 0xb0, 0x8c, 0x9a, 0x0f,
	0x19, 0x7f, 0xf7, 0x18, 0xaf, 0xf8, 0x80, 0x51, 0xf7, 0x05, 0xf4, 0x0d, 0xa0, 0x8c, 0x36, 0x4c,
	0xd1, 0x1e, 0xe4, 0xad, 0x87, 0x84, 0xe1, 0x5e, 0xb8, 0x80, 0x0e, 0x65, 0x94, 0x0d, 0x14, 0xf4,
	0x1a, 0x0e, 0xdb, 0xda, 0x28, 0xaa, 0xa5, 0x18, 0xf4, 0xe6, 0x9d, 0x47, 0x1d, 0x79, 0xd4, 0x4f,
	0xf3, 0xa0, 0x0e, 0x6e, 0xbf, 0x5d, 0xa2, 0x8e, 0x2b, 0x48, 0x3e, 0xe8, 0x24, 0x9a, 0x00, 0xb2,
	0x54, 0xd2, 0xfb, 0x53, 0xc3, 0xef, 0xf6, 0x6c, 0x45, 0xfb, 0x2f, 0xba, 0xb1, 0x38, 0xb9, 0x1d,
	0x4a, 0xe3, 0xdf, 0x37, 0x21, 0x1e, 0x34, 0x1b, 0xbd, 0x5e, 0x73, 0xd0, 0x78, 0xe9, 0x7c, 0xee,
	0x3a, 0x06, 0x7d, 0x05, 0xa0, 0x58, 0x51, 0xb3, 0xcc, 0xa1, 0x36, 0x5c, 0x5b, 0x8e, 0x97, 0xa2,
	0x4e, 0xf0, 0x3c, 0x0e, 0x77, 0x72, 0x8e, 0xde, 0x45, 0x00, 0x0b, 0x0b, 0x3d, 0x87, 0x58, 0xf3,
	0x52, 0xd0, 0x9a, 0x68, 0xa3, 0x98, 0x28, 0x4d, 0xe5, 0x0a, 0x8c, 0xf0, 0xae, 0x97, 0x27, 0x41,
	0x45, 0xcf, 0x60, 0xd7, 0x6e, 0x11, 0x22, 0x0b, 0x52, 0xd4, 0xbc, 0xac, 0x8c, 0x5b, 0x36, 0x11,
	0xde, 0xb1, 0xea, 0x0f, 0xc5, 0xb7, 0x4e, 0x43, 0x4f, 0xe1, 0x71, 0x2e, 0x67, 0xb3, 0x9a, 0x29,
	0xa2, 0x2b, 0x5e, 0x18, 0xb7, 0x62, 0x22, 0xbc, 0x13, 0xc4, 0x89, 0xd5, 0xd0, 0xe7, 0xf0, 0x44,
	0xcb, 0x56, 0x65, 0x8c, 0x54, 0x52, 0xf1, 0x5f, 0xa4, 0x30, 0xb4, 0x26, 0x54, 0x94, 0x35, 0x73,
	0xab, 0x25, 0xc2, 0x07, 0xde, 0xbe, 0x9c, 0xbb, 0xe7, 0xd6, 0x44, 0xa7, 0x10, 0x0c, 0xbb, 0xaa,
	0x0d, 0xcf, 0xe6, 0x59, 0xf7, 0x5d, 0xd6, 0x9e, 0x37, 0xa7, 0xc1, 0x73, 0x39, 0xe3, 0xdf, 0x36,
	0x21, 0x1e, 0x5c, 0xe0, 0x7f, 0x33, 0x97, 0x41, 0xca, 0x7f, 0x99, 0xcb, 0x00, 0xb5, 0x6a, 0x2e,
	0x6f, 0xff, 0xff, 0xb9, 0x7c, 0x09, 0x89, 0x90, 0xaa, 0xa1, 0x35, 0x31, 0x92, 0xe8, 0xd6, 0xbd,
	0x37, 0x61, 0x45, 0xef, 0xfa, 0x6f, 0x99, 0xb2, 0xcc, 0x48, 0x75, 0x96, 0xe3, 0xd8, 0x07, 0x5e,
	0xcb, 0x89, 0x0f, 0xb3, 0xef, 0x8a, 0xbc, 0xf9, 0x99, 0x65, 0xc6, 0x6e, 0xc2, 0xad, 0x55, 0xef,
	0x8a, 0x0f, 0xb9, 0xca, 0xc7, 0xbf, 0x46, 0x30, 0x1a, 0xae, 0x04, 0x84, 0xd7, 0xcc, 0xe5, 0xe9,
	0xf2, 0x35, 0x72, 0xe7, 0x60, 0x3e, 0x06, 0xe0, 0x0d, 0x2d, 0xc3, 0x33, 0x61, 0x5b, 0xb3, 0x83,
	0x1f, 0x3a, 0xc5, 0xbe, 0x04, 0x63, 0x01, 0xfb, 0xcb, 0xd6, 0x09, 0x9a, 0xae, 0x29, 0xe5, 0xf9,
	0xea, 0x35, 0x74, 0x57, 0x39, 0x2f, 0x37, 0x2e, 0xa3, 0x9b, 0x2d, 0xf7, 0xf2, 0x9f, 0xfd, 0x13,
	0x00, 0x00, 0xff, 0xff, 0x4a, 0x60, 0x69, 0xaf, 0x91, 0x08, 0x00, 0x00,
}
